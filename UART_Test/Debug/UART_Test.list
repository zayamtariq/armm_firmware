
UART_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054ec  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  080056bc  080056bc  000156bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005884  08005884  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005884  08005884  00015884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800588c  0800588c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800588c  0800588c  0001588c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005890  08005890  00015890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005894  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  20000070  08005904  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000023c  08005904  0002023c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e738  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001de8  00000000  00000000  0002e7d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc8  00000000  00000000  000305c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c10  00000000  00000000  00031288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000220c9  00000000  00000000  00031e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f62e  00000000  00000000  00053f61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d109d  00000000  00000000  0006358f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013462c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cc4  00000000  00000000  0013467c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080056a4 	.word	0x080056a4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	080056a4 	.word	0x080056a4

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e8:	f000 ff16 	bl	8001418 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ec:	f000 f832 	bl	8000654 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f0:	f000 fa4e 	bl	8000a90 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005f4:	f000 fa22 	bl	8000a3c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80005f8:	f000 f89a 	bl	8000730 <MX_TIM2_Init>
  MX_TIM3_Init();
 80005fc:	f000 f91a 	bl	8000834 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000600:	f000 f99a 	bl	8000938 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  // start UART:
  HAL_UART_Receive_IT(&huart2, rx_data, 1); // interrupt based UART receive
 8000604:	2201      	movs	r2, #1
 8000606:	490e      	ldr	r1, [pc, #56]	; (8000640 <main+0x5c>)
 8000608:	480e      	ldr	r0, [pc, #56]	; (8000644 <main+0x60>)
 800060a:	f003 fa80 	bl	8003b0e <HAL_UART_Receive_IT>

  // start interrupt-based PWM timers:
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
 800060e:	2100      	movs	r1, #0
 8000610:	480d      	ldr	r0, [pc, #52]	; (8000648 <main+0x64>)
 8000612:	f002 f96f 	bl	80028f4 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_2);
 8000616:	2104      	movs	r1, #4
 8000618:	480b      	ldr	r0, [pc, #44]	; (8000648 <main+0x64>)
 800061a:	f002 f96b 	bl	80028f4 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 800061e:	2100      	movs	r1, #0
 8000620:	480a      	ldr	r0, [pc, #40]	; (800064c <main+0x68>)
 8000622:	f002 f967 	bl	80028f4 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_2);
 8000626:	2104      	movs	r1, #4
 8000628:	4808      	ldr	r0, [pc, #32]	; (800064c <main+0x68>)
 800062a:	f002 f963 	bl	80028f4 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_1);
 800062e:	2100      	movs	r1, #0
 8000630:	4807      	ldr	r0, [pc, #28]	; (8000650 <main+0x6c>)
 8000632:	f002 f95f 	bl	80028f4 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_2);
 8000636:	2104      	movs	r1, #4
 8000638:	4805      	ldr	r0, [pc, #20]	; (8000650 <main+0x6c>)
 800063a:	f002 f95b 	bl	80028f4 <HAL_TIM_PWM_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800063e:	e7fe      	b.n	800063e <main+0x5a>
 8000640:	200001ac 	.word	0x200001ac
 8000644:	20000164 	.word	0x20000164
 8000648:	2000008c 	.word	0x2000008c
 800064c:	200000d4 	.word	0x200000d4
 8000650:	2000011c 	.word	0x2000011c

08000654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b094      	sub	sp, #80	; 0x50
 8000658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065a:	f107 031c 	add.w	r3, r7, #28
 800065e:	2234      	movs	r2, #52	; 0x34
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f004 fa16 	bl	8004a94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000668:	f107 0308 	add.w	r3, r7, #8
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
 8000676:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000678:	2300      	movs	r3, #0
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	4b2a      	ldr	r3, [pc, #168]	; (8000728 <SystemClock_Config+0xd4>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000680:	4a29      	ldr	r2, [pc, #164]	; (8000728 <SystemClock_Config+0xd4>)
 8000682:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000686:	6413      	str	r3, [r2, #64]	; 0x40
 8000688:	4b27      	ldr	r3, [pc, #156]	; (8000728 <SystemClock_Config+0xd4>)
 800068a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000694:	2300      	movs	r3, #0
 8000696:	603b      	str	r3, [r7, #0]
 8000698:	4b24      	ldr	r3, [pc, #144]	; (800072c <SystemClock_Config+0xd8>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006a0:	4a22      	ldr	r2, [pc, #136]	; (800072c <SystemClock_Config+0xd8>)
 80006a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a6:	6013      	str	r3, [r2, #0]
 80006a8:	4b20      	ldr	r3, [pc, #128]	; (800072c <SystemClock_Config+0xd8>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006b0:	603b      	str	r3, [r7, #0]
 80006b2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b4:	2302      	movs	r3, #2
 80006b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b8:	2301      	movs	r3, #1
 80006ba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006bc:	2310      	movs	r3, #16
 80006be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c0:	2302      	movs	r3, #2
 80006c2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006c4:	2300      	movs	r3, #0
 80006c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006c8:	2310      	movs	r3, #16
 80006ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006cc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006d0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006d2:	2304      	movs	r3, #4
 80006d4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006d6:	2302      	movs	r3, #2
 80006d8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006da:	2302      	movs	r3, #2
 80006dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006de:	f107 031c 	add.w	r3, r7, #28
 80006e2:	4618      	mov	r0, r3
 80006e4:	f001 fdc0 	bl	8002268 <HAL_RCC_OscConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006ee:	f000 fc69 	bl	8000fc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f2:	230f      	movs	r3, #15
 80006f4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f6:	2302      	movs	r3, #2
 80006f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000702:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000704:	2300      	movs	r3, #0
 8000706:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000708:	f107 0308 	add.w	r3, r7, #8
 800070c:	2102      	movs	r1, #2
 800070e:	4618      	mov	r0, r3
 8000710:	f001 fa60 	bl	8001bd4 <HAL_RCC_ClockConfig>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800071a:	f000 fc53 	bl	8000fc4 <Error_Handler>
  }
}
 800071e:	bf00      	nop
 8000720:	3750      	adds	r7, #80	; 0x50
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40023800 	.word	0x40023800
 800072c:	40007000 	.word	0x40007000

08000730 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b08e      	sub	sp, #56	; 0x38
 8000734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000736:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000744:	f107 0320 	add.w	r3, r7, #32
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800074e:	1d3b      	adds	r3, r7, #4
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	605a      	str	r2, [r3, #4]
 8000756:	609a      	str	r2, [r3, #8]
 8000758:	60da      	str	r2, [r3, #12]
 800075a:	611a      	str	r2, [r3, #16]
 800075c:	615a      	str	r2, [r3, #20]
 800075e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000760:	4b33      	ldr	r3, [pc, #204]	; (8000830 <MX_TIM2_Init+0x100>)
 8000762:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000766:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000768:	4b31      	ldr	r3, [pc, #196]	; (8000830 <MX_TIM2_Init+0x100>)
 800076a:	2200      	movs	r2, #0
 800076c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800076e:	4b30      	ldr	r3, [pc, #192]	; (8000830 <MX_TIM2_Init+0x100>)
 8000770:	2200      	movs	r2, #0
 8000772:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8000774:	4b2e      	ldr	r3, [pc, #184]	; (8000830 <MX_TIM2_Init+0x100>)
 8000776:	2264      	movs	r2, #100	; 0x64
 8000778:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800077a:	4b2d      	ldr	r3, [pc, #180]	; (8000830 <MX_TIM2_Init+0x100>)
 800077c:	2200      	movs	r2, #0
 800077e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000780:	4b2b      	ldr	r3, [pc, #172]	; (8000830 <MX_TIM2_Init+0x100>)
 8000782:	2200      	movs	r2, #0
 8000784:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000786:	482a      	ldr	r0, [pc, #168]	; (8000830 <MX_TIM2_Init+0x100>)
 8000788:	f002 f80c 	bl	80027a4 <HAL_TIM_Base_Init>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000792:	f000 fc17 	bl	8000fc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000796:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800079a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800079c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007a0:	4619      	mov	r1, r3
 80007a2:	4823      	ldr	r0, [pc, #140]	; (8000830 <MX_TIM2_Init+0x100>)
 80007a4:	f002 fc44 	bl	8003030 <HAL_TIM_ConfigClockSource>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80007ae:	f000 fc09 	bl	8000fc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80007b2:	481f      	ldr	r0, [pc, #124]	; (8000830 <MX_TIM2_Init+0x100>)
 80007b4:	f002 f845 	bl	8002842 <HAL_TIM_PWM_Init>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80007be:	f000 fc01 	bl	8000fc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007c2:	2300      	movs	r3, #0
 80007c4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007c6:	2300      	movs	r3, #0
 80007c8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007ca:	f107 0320 	add.w	r3, r7, #32
 80007ce:	4619      	mov	r1, r3
 80007d0:	4817      	ldr	r0, [pc, #92]	; (8000830 <MX_TIM2_Init+0x100>)
 80007d2:	f003 f82d 	bl	8003830 <HAL_TIMEx_MasterConfigSynchronization>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80007dc:	f000 fbf2 	bl	8000fc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007e0:	2360      	movs	r3, #96	; 0x60
 80007e2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1;
 80007e4:	2301      	movs	r3, #1
 80007e6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007e8:	2300      	movs	r3, #0
 80007ea:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007ec:	2300      	movs	r3, #0
 80007ee:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007f0:	1d3b      	adds	r3, r7, #4
 80007f2:	2200      	movs	r2, #0
 80007f4:	4619      	mov	r1, r3
 80007f6:	480e      	ldr	r0, [pc, #56]	; (8000830 <MX_TIM2_Init+0x100>)
 80007f8:	f002 fb58 	bl	8002eac <HAL_TIM_PWM_ConfigChannel>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000802:	f000 fbdf 	bl	8000fc4 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000806:	2300      	movs	r3, #0
 8000808:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800080a:	1d3b      	adds	r3, r7, #4
 800080c:	2204      	movs	r2, #4
 800080e:	4619      	mov	r1, r3
 8000810:	4807      	ldr	r0, [pc, #28]	; (8000830 <MX_TIM2_Init+0x100>)
 8000812:	f002 fb4b 	bl	8002eac <HAL_TIM_PWM_ConfigChannel>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 800081c:	f000 fbd2 	bl	8000fc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000820:	4803      	ldr	r0, [pc, #12]	; (8000830 <MX_TIM2_Init+0x100>)
 8000822:	f000 fc5f 	bl	80010e4 <HAL_TIM_MspPostInit>

}
 8000826:	bf00      	nop
 8000828:	3738      	adds	r7, #56	; 0x38
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	2000008c 	.word	0x2000008c

08000834 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b08e      	sub	sp, #56	; 0x38
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800083a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
 8000846:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000848:	f107 0320 	add.w	r3, r7, #32
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000852:	1d3b      	adds	r3, r7, #4
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]
 800085e:	611a      	str	r2, [r3, #16]
 8000860:	615a      	str	r2, [r3, #20]
 8000862:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000864:	4b32      	ldr	r3, [pc, #200]	; (8000930 <MX_TIM3_Init+0xfc>)
 8000866:	4a33      	ldr	r2, [pc, #204]	; (8000934 <MX_TIM3_Init+0x100>)
 8000868:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800086a:	4b31      	ldr	r3, [pc, #196]	; (8000930 <MX_TIM3_Init+0xfc>)
 800086c:	2200      	movs	r2, #0
 800086e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000870:	4b2f      	ldr	r3, [pc, #188]	; (8000930 <MX_TIM3_Init+0xfc>)
 8000872:	2200      	movs	r2, #0
 8000874:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8000876:	4b2e      	ldr	r3, [pc, #184]	; (8000930 <MX_TIM3_Init+0xfc>)
 8000878:	2264      	movs	r2, #100	; 0x64
 800087a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800087c:	4b2c      	ldr	r3, [pc, #176]	; (8000930 <MX_TIM3_Init+0xfc>)
 800087e:	2200      	movs	r2, #0
 8000880:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000882:	4b2b      	ldr	r3, [pc, #172]	; (8000930 <MX_TIM3_Init+0xfc>)
 8000884:	2200      	movs	r2, #0
 8000886:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000888:	4829      	ldr	r0, [pc, #164]	; (8000930 <MX_TIM3_Init+0xfc>)
 800088a:	f001 ff8b 	bl	80027a4 <HAL_TIM_Base_Init>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000894:	f000 fb96 	bl	8000fc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000898:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800089c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800089e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008a2:	4619      	mov	r1, r3
 80008a4:	4822      	ldr	r0, [pc, #136]	; (8000930 <MX_TIM3_Init+0xfc>)
 80008a6:	f002 fbc3 	bl	8003030 <HAL_TIM_ConfigClockSource>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80008b0:	f000 fb88 	bl	8000fc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80008b4:	481e      	ldr	r0, [pc, #120]	; (8000930 <MX_TIM3_Init+0xfc>)
 80008b6:	f001 ffc4 	bl	8002842 <HAL_TIM_PWM_Init>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80008c0:	f000 fb80 	bl	8000fc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008c4:	2300      	movs	r3, #0
 80008c6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008c8:	2300      	movs	r3, #0
 80008ca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008cc:	f107 0320 	add.w	r3, r7, #32
 80008d0:	4619      	mov	r1, r3
 80008d2:	4817      	ldr	r0, [pc, #92]	; (8000930 <MX_TIM3_Init+0xfc>)
 80008d4:	f002 ffac 	bl	8003830 <HAL_TIMEx_MasterConfigSynchronization>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 80008de:	f000 fb71 	bl	8000fc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008e2:	2360      	movs	r3, #96	; 0x60
 80008e4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1;
 80008e6:	2301      	movs	r3, #1
 80008e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008ea:	2300      	movs	r3, #0
 80008ec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008ee:	2300      	movs	r3, #0
 80008f0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008f2:	1d3b      	adds	r3, r7, #4
 80008f4:	2200      	movs	r2, #0
 80008f6:	4619      	mov	r1, r3
 80008f8:	480d      	ldr	r0, [pc, #52]	; (8000930 <MX_TIM3_Init+0xfc>)
 80008fa:	f002 fad7 	bl	8002eac <HAL_TIM_PWM_ConfigChannel>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8000904:	f000 fb5e 	bl	8000fc4 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000908:	2300      	movs	r3, #0
 800090a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800090c:	1d3b      	adds	r3, r7, #4
 800090e:	2204      	movs	r2, #4
 8000910:	4619      	mov	r1, r3
 8000912:	4807      	ldr	r0, [pc, #28]	; (8000930 <MX_TIM3_Init+0xfc>)
 8000914:	f002 faca 	bl	8002eac <HAL_TIM_PWM_ConfigChannel>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 800091e:	f000 fb51 	bl	8000fc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000922:	4803      	ldr	r0, [pc, #12]	; (8000930 <MX_TIM3_Init+0xfc>)
 8000924:	f000 fbde 	bl	80010e4 <HAL_TIM_MspPostInit>

}
 8000928:	bf00      	nop
 800092a:	3738      	adds	r7, #56	; 0x38
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	200000d4 	.word	0x200000d4
 8000934:	40000400 	.word	0x40000400

08000938 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b08e      	sub	sp, #56	; 0x38
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800093e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
 8000946:	605a      	str	r2, [r3, #4]
 8000948:	609a      	str	r2, [r3, #8]
 800094a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800094c:	f107 0320 	add.w	r3, r7, #32
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000956:	1d3b      	adds	r3, r7, #4
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
 8000964:	615a      	str	r2, [r3, #20]
 8000966:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000968:	4b32      	ldr	r3, [pc, #200]	; (8000a34 <MX_TIM4_Init+0xfc>)
 800096a:	4a33      	ldr	r2, [pc, #204]	; (8000a38 <MX_TIM4_Init+0x100>)
 800096c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800096e:	4b31      	ldr	r3, [pc, #196]	; (8000a34 <MX_TIM4_Init+0xfc>)
 8000970:	2200      	movs	r2, #0
 8000972:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000974:	4b2f      	ldr	r3, [pc, #188]	; (8000a34 <MX_TIM4_Init+0xfc>)
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 800097a:	4b2e      	ldr	r3, [pc, #184]	; (8000a34 <MX_TIM4_Init+0xfc>)
 800097c:	2264      	movs	r2, #100	; 0x64
 800097e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000980:	4b2c      	ldr	r3, [pc, #176]	; (8000a34 <MX_TIM4_Init+0xfc>)
 8000982:	2200      	movs	r2, #0
 8000984:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000986:	4b2b      	ldr	r3, [pc, #172]	; (8000a34 <MX_TIM4_Init+0xfc>)
 8000988:	2200      	movs	r2, #0
 800098a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800098c:	4829      	ldr	r0, [pc, #164]	; (8000a34 <MX_TIM4_Init+0xfc>)
 800098e:	f001 ff09 	bl	80027a4 <HAL_TIM_Base_Init>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8000998:	f000 fb14 	bl	8000fc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800099c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009a0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80009a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009a6:	4619      	mov	r1, r3
 80009a8:	4822      	ldr	r0, [pc, #136]	; (8000a34 <MX_TIM4_Init+0xfc>)
 80009aa:	f002 fb41 	bl	8003030 <HAL_TIM_ConfigClockSource>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 80009b4:	f000 fb06 	bl	8000fc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80009b8:	481e      	ldr	r0, [pc, #120]	; (8000a34 <MX_TIM4_Init+0xfc>)
 80009ba:	f001 ff42 	bl	8002842 <HAL_TIM_PWM_Init>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 80009c4:	f000 fafe 	bl	8000fc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009c8:	2300      	movs	r3, #0
 80009ca:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009cc:	2300      	movs	r3, #0
 80009ce:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80009d0:	f107 0320 	add.w	r3, r7, #32
 80009d4:	4619      	mov	r1, r3
 80009d6:	4817      	ldr	r0, [pc, #92]	; (8000a34 <MX_TIM4_Init+0xfc>)
 80009d8:	f002 ff2a 	bl	8003830 <HAL_TIMEx_MasterConfigSynchronization>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 80009e2:	f000 faef 	bl	8000fc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009e6:	2360      	movs	r3, #96	; 0x60
 80009e8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1;
 80009ea:	2301      	movs	r3, #1
 80009ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009f2:	2300      	movs	r3, #0
 80009f4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009f6:	1d3b      	adds	r3, r7, #4
 80009f8:	2200      	movs	r2, #0
 80009fa:	4619      	mov	r1, r3
 80009fc:	480d      	ldr	r0, [pc, #52]	; (8000a34 <MX_TIM4_Init+0xfc>)
 80009fe:	f002 fa55 	bl	8002eac <HAL_TIM_PWM_ConfigChannel>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8000a08:	f000 fadc 	bl	8000fc4 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a10:	1d3b      	adds	r3, r7, #4
 8000a12:	2204      	movs	r2, #4
 8000a14:	4619      	mov	r1, r3
 8000a16:	4807      	ldr	r0, [pc, #28]	; (8000a34 <MX_TIM4_Init+0xfc>)
 8000a18:	f002 fa48 	bl	8002eac <HAL_TIM_PWM_ConfigChannel>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 8000a22:	f000 facf 	bl	8000fc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000a26:	4803      	ldr	r0, [pc, #12]	; (8000a34 <MX_TIM4_Init+0xfc>)
 8000a28:	f000 fb5c 	bl	80010e4 <HAL_TIM_MspPostInit>

}
 8000a2c:	bf00      	nop
 8000a2e:	3738      	adds	r7, #56	; 0x38
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	2000011c 	.word	0x2000011c
 8000a38:	40000800 	.word	0x40000800

08000a3c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a40:	4b11      	ldr	r3, [pc, #68]	; (8000a88 <MX_USART2_UART_Init+0x4c>)
 8000a42:	4a12      	ldr	r2, [pc, #72]	; (8000a8c <MX_USART2_UART_Init+0x50>)
 8000a44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a46:	4b10      	ldr	r3, [pc, #64]	; (8000a88 <MX_USART2_UART_Init+0x4c>)
 8000a48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a4e:	4b0e      	ldr	r3, [pc, #56]	; (8000a88 <MX_USART2_UART_Init+0x4c>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a54:	4b0c      	ldr	r3, [pc, #48]	; (8000a88 <MX_USART2_UART_Init+0x4c>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a5a:	4b0b      	ldr	r3, [pc, #44]	; (8000a88 <MX_USART2_UART_Init+0x4c>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a60:	4b09      	ldr	r3, [pc, #36]	; (8000a88 <MX_USART2_UART_Init+0x4c>)
 8000a62:	220c      	movs	r2, #12
 8000a64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a66:	4b08      	ldr	r3, [pc, #32]	; (8000a88 <MX_USART2_UART_Init+0x4c>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a6c:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <MX_USART2_UART_Init+0x4c>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a72:	4805      	ldr	r0, [pc, #20]	; (8000a88 <MX_USART2_UART_Init+0x4c>)
 8000a74:	f002 ff6c 	bl	8003950 <HAL_UART_Init>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a7e:	f000 faa1 	bl	8000fc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	20000164 	.word	0x20000164
 8000a8c:	40004400 	.word	0x40004400

08000a90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08a      	sub	sp, #40	; 0x28
 8000a94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a96:	f107 0314 	add.w	r3, r7, #20
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	605a      	str	r2, [r3, #4]
 8000aa0:	609a      	str	r2, [r3, #8]
 8000aa2:	60da      	str	r2, [r3, #12]
 8000aa4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	613b      	str	r3, [r7, #16]
 8000aaa:	4b39      	ldr	r3, [pc, #228]	; (8000b90 <MX_GPIO_Init+0x100>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	4a38      	ldr	r2, [pc, #224]	; (8000b90 <MX_GPIO_Init+0x100>)
 8000ab0:	f043 0304 	orr.w	r3, r3, #4
 8000ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab6:	4b36      	ldr	r3, [pc, #216]	; (8000b90 <MX_GPIO_Init+0x100>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	f003 0304 	and.w	r3, r3, #4
 8000abe:	613b      	str	r3, [r7, #16]
 8000ac0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	60fb      	str	r3, [r7, #12]
 8000ac6:	4b32      	ldr	r3, [pc, #200]	; (8000b90 <MX_GPIO_Init+0x100>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	4a31      	ldr	r2, [pc, #196]	; (8000b90 <MX_GPIO_Init+0x100>)
 8000acc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad2:	4b2f      	ldr	r3, [pc, #188]	; (8000b90 <MX_GPIO_Init+0x100>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60bb      	str	r3, [r7, #8]
 8000ae2:	4b2b      	ldr	r3, [pc, #172]	; (8000b90 <MX_GPIO_Init+0x100>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	4a2a      	ldr	r2, [pc, #168]	; (8000b90 <MX_GPIO_Init+0x100>)
 8000ae8:	f043 0301 	orr.w	r3, r3, #1
 8000aec:	6313      	str	r3, [r2, #48]	; 0x30
 8000aee:	4b28      	ldr	r3, [pc, #160]	; (8000b90 <MX_GPIO_Init+0x100>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	f003 0301 	and.w	r3, r3, #1
 8000af6:	60bb      	str	r3, [r7, #8]
 8000af8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	607b      	str	r3, [r7, #4]
 8000afe:	4b24      	ldr	r3, [pc, #144]	; (8000b90 <MX_GPIO_Init+0x100>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	4a23      	ldr	r2, [pc, #140]	; (8000b90 <MX_GPIO_Init+0x100>)
 8000b04:	f043 0302 	orr.w	r3, r3, #2
 8000b08:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0a:	4b21      	ldr	r3, [pc, #132]	; (8000b90 <MX_GPIO_Init+0x100>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	f003 0302 	and.w	r3, r3, #2
 8000b12:	607b      	str	r3, [r7, #4]
 8000b14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8000b16:	2200      	movs	r2, #0
 8000b18:	f44f 61e4 	mov.w	r1, #1824	; 0x720
 8000b1c:	481d      	ldr	r0, [pc, #116]	; (8000b94 <MX_GPIO_Init+0x104>)
 8000b1e:	f001 f825 	bl	8001b6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000b22:	2200      	movs	r2, #0
 8000b24:	f44f 7160 	mov.w	r1, #896	; 0x380
 8000b28:	481b      	ldr	r0, [pc, #108]	; (8000b98 <MX_GPIO_Init+0x108>)
 8000b2a:	f001 f81f 	bl	8001b6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b34:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b3e:	f107 0314 	add.w	r3, r7, #20
 8000b42:	4619      	mov	r1, r3
 8000b44:	4814      	ldr	r0, [pc, #80]	; (8000b98 <MX_GPIO_Init+0x108>)
 8000b46:	f000 fe7d 	bl	8001844 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000b4a:	f44f 63e4 	mov.w	r3, #1824	; 0x720
 8000b4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b50:	2301      	movs	r3, #1
 8000b52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	4619      	mov	r1, r3
 8000b62:	480c      	ldr	r0, [pc, #48]	; (8000b94 <MX_GPIO_Init+0x104>)
 8000b64:	f000 fe6e 	bl	8001844 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000b68:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000b6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b72:	2300      	movs	r3, #0
 8000b74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b76:	2300      	movs	r3, #0
 8000b78:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b7a:	f107 0314 	add.w	r3, r7, #20
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4805      	ldr	r0, [pc, #20]	; (8000b98 <MX_GPIO_Init+0x108>)
 8000b82:	f000 fe5f 	bl	8001844 <HAL_GPIO_Init>

}
 8000b86:	bf00      	nop
 8000b88:	3728      	adds	r7, #40	; 0x28
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40023800 	.word	0x40023800
 8000b94:	40020000 	.word	0x40020000
 8000b98:	40020800 	.word	0x40020800

08000b9c <HAL_UART_RxCpltCallback>:

// we come to this function after a successful receive
// huart = the uart that was configured for this receive

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b090      	sub	sp, #64	; 0x40
 8000ba0:	af06      	add	r7, sp, #24
 8000ba2:	6078      	str	r0, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ba4:	b672      	cpsid	i
}
 8000ba6:	bf00      	nop
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
  __disable_irq();

  uint8_t i;
  if (huart->Instance == USART2) { // make sure we're working with our correct instance of UART (PA2-3 = USART2 TX/RX)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a8d      	ldr	r2, [pc, #564]	; (8000de4 <HAL_UART_RxCpltCallback+0x248>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	f040 8111 	bne.w	8000dd6 <HAL_UART_RxCpltCallback+0x23a>

	  if (rx_indx == 0) {
 8000bb4:	4b8c      	ldr	r3, [pc, #560]	; (8000de8 <HAL_UART_RxCpltCallback+0x24c>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d111      	bne.n	8000be0 <HAL_UART_RxCpltCallback+0x44>
		  for (i = 0; i < 100; i++) {
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000bc2:	e009      	b.n	8000bd8 <HAL_UART_RxCpltCallback+0x3c>
			  rx_buffer[i] = 0; // clear the buffer for a new message once the user clicked enter
 8000bc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000bc8:	4a88      	ldr	r2, [pc, #544]	; (8000dec <HAL_UART_RxCpltCallback+0x250>)
 8000bca:	2100      	movs	r1, #0
 8000bcc:	54d1      	strb	r1, [r2, r3]
		  for (i = 0; i < 100; i++) {
 8000bce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000bd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000bdc:	2b63      	cmp	r3, #99	; 0x63
 8000bde:	d9f1      	bls.n	8000bc4 <HAL_UART_RxCpltCallback+0x28>
		  }
	  }

	  if (rx_data[0] != 13) { // enter button = ascii 13
 8000be0:	4b83      	ldr	r3, [pc, #524]	; (8000df0 <HAL_UART_RxCpltCallback+0x254>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	2b0d      	cmp	r3, #13
 8000be6:	d00b      	beq.n	8000c00 <HAL_UART_RxCpltCallback+0x64>
		  rx_buffer[rx_indx++] = rx_data[0]; // reading a byte at a time in our RX buffer
 8000be8:	4b7f      	ldr	r3, [pc, #508]	; (8000de8 <HAL_UART_RxCpltCallback+0x24c>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	1c5a      	adds	r2, r3, #1
 8000bee:	b2d1      	uxtb	r1, r2
 8000bf0:	4a7d      	ldr	r2, [pc, #500]	; (8000de8 <HAL_UART_RxCpltCallback+0x24c>)
 8000bf2:	7011      	strb	r1, [r2, #0]
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	4b7e      	ldr	r3, [pc, #504]	; (8000df0 <HAL_UART_RxCpltCallback+0x254>)
 8000bf8:	7819      	ldrb	r1, [r3, #0]
 8000bfa:	4b7c      	ldr	r3, [pc, #496]	; (8000dec <HAL_UART_RxCpltCallback+0x250>)
 8000bfc:	5499      	strb	r1, [r3, r2]
 8000bfe:	e0db      	b.n	8000db8 <HAL_UART_RxCpltCallback+0x21c>
	  } else {
		  rx_indx = 0; // if user has clicked the enter button, compare our rx_buffer with desired string, then clear the buffer for next message
 8000c00:	4b79      	ldr	r3, [pc, #484]	; (8000de8 <HAL_UART_RxCpltCallback+0x24c>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	701a      	strb	r2, [r3, #0]
		  transfer_cplt = 1; // set flag
 8000c06:	4b7b      	ldr	r3, [pc, #492]	; (8000df4 <HAL_UART_RxCpltCallback+0x258>)
 8000c08:	2201      	movs	r2, #1
 8000c0a:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart2, (uint8_t *)"\n\r", 2, 100);
 8000c0c:	2364      	movs	r3, #100	; 0x64
 8000c0e:	2202      	movs	r2, #2
 8000c10:	4979      	ldr	r1, [pc, #484]	; (8000df8 <HAL_UART_RxCpltCallback+0x25c>)
 8000c12:	487a      	ldr	r0, [pc, #488]	; (8000dfc <HAL_UART_RxCpltCallback+0x260>)
 8000c14:	f002 fee9 	bl	80039ea <HAL_UART_Transmit>
		   *
		   *
		   */


		  if (sscanf((char *)rx_buffer, "%s %d %d %d %d %d %d", command, &motorValue1, &motorValue2, &motorValue3, &motorValue4, &motorValue5, &motorValue6) == 7) {
 8000c18:	f107 011c 	add.w	r1, r7, #28
 8000c1c:	f107 0220 	add.w	r2, r7, #32
 8000c20:	f107 0308 	add.w	r3, r7, #8
 8000c24:	9304      	str	r3, [sp, #16]
 8000c26:	f107 030c 	add.w	r3, r7, #12
 8000c2a:	9303      	str	r3, [sp, #12]
 8000c2c:	f107 0310 	add.w	r3, r7, #16
 8000c30:	9302      	str	r3, [sp, #8]
 8000c32:	f107 0314 	add.w	r3, r7, #20
 8000c36:	9301      	str	r3, [sp, #4]
 8000c38:	f107 0318 	add.w	r3, r7, #24
 8000c3c:	9300      	str	r3, [sp, #0]
 8000c3e:	460b      	mov	r3, r1
 8000c40:	496f      	ldr	r1, [pc, #444]	; (8000e00 <HAL_UART_RxCpltCallback+0x264>)
 8000c42:	486a      	ldr	r0, [pc, #424]	; (8000dec <HAL_UART_RxCpltCallback+0x250>)
 8000c44:	f003 ff2e 	bl	8004aa4 <siscanf>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b07      	cmp	r3, #7
 8000c4c:	f040 80b4 	bne.w	8000db8 <HAL_UART_RxCpltCallback+0x21c>
			  if (!(strcmp(command, "MOTOR"))) { // move motor N pulses
 8000c50:	f107 0320 	add.w	r3, r7, #32
 8000c54:	496b      	ldr	r1, [pc, #428]	; (8000e04 <HAL_UART_RxCpltCallback+0x268>)
 8000c56:	4618      	mov	r0, r3
 8000c58:	f7ff fada 	bl	8000210 <strcmp>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	f040 80aa 	bne.w	8000db8 <HAL_UART_RxCpltCallback+0x21c>

				  // populate steps left counter
				  motor1_steps = motorValue1;
 8000c64:	69fb      	ldr	r3, [r7, #28]
 8000c66:	b29a      	uxth	r2, r3
 8000c68:	4b67      	ldr	r3, [pc, #412]	; (8000e08 <HAL_UART_RxCpltCallback+0x26c>)
 8000c6a:	801a      	strh	r2, [r3, #0]
				  motor2_steps = motorValue2;
 8000c6c:	69bb      	ldr	r3, [r7, #24]
 8000c6e:	b29a      	uxth	r2, r3
 8000c70:	4b66      	ldr	r3, [pc, #408]	; (8000e0c <HAL_UART_RxCpltCallback+0x270>)
 8000c72:	801a      	strh	r2, [r3, #0]
				  motor3_steps = motorValue3;
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	b29a      	uxth	r2, r3
 8000c78:	4b65      	ldr	r3, [pc, #404]	; (8000e10 <HAL_UART_RxCpltCallback+0x274>)
 8000c7a:	801a      	strh	r2, [r3, #0]
				  motor4_steps = motorValue4;
 8000c7c:	693b      	ldr	r3, [r7, #16]
 8000c7e:	b29a      	uxth	r2, r3
 8000c80:	4b64      	ldr	r3, [pc, #400]	; (8000e14 <HAL_UART_RxCpltCallback+0x278>)
 8000c82:	801a      	strh	r2, [r3, #0]
				  motor5_steps = motorValue5;
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	b29a      	uxth	r2, r3
 8000c88:	4b63      	ldr	r3, [pc, #396]	; (8000e18 <HAL_UART_RxCpltCallback+0x27c>)
 8000c8a:	801a      	strh	r2, [r3, #0]
				  motor6_steps = motorValue6;
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	b29a      	uxth	r2, r3
 8000c90:	4b62      	ldr	r3, [pc, #392]	; (8000e1c <HAL_UART_RxCpltCallback+0x280>)
 8000c92:	801a      	strh	r2, [r3, #0]


				  /* set direction pins */
				  if (motorValue1 < 0) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET); // set direction pin low for negative
 8000c94:	69fb      	ldr	r3, [r7, #28]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	da06      	bge.n	8000ca8 <HAL_UART_RxCpltCallback+0x10c>
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ca0:	485f      	ldr	r0, [pc, #380]	; (8000e20 <HAL_UART_RxCpltCallback+0x284>)
 8000ca2:	f000 ff63 	bl	8001b6c <HAL_GPIO_WritePin>
 8000ca6:	e005      	b.n	8000cb4 <HAL_UART_RxCpltCallback+0x118>
				  else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET); // set direction pin high for positive
 8000ca8:	2201      	movs	r2, #1
 8000caa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cae:	485c      	ldr	r0, [pc, #368]	; (8000e20 <HAL_UART_RxCpltCallback+0x284>)
 8000cb0:	f000 ff5c 	bl	8001b6c <HAL_GPIO_WritePin>

				  if (motorValue2 < 0) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000cb4:	69bb      	ldr	r3, [r7, #24]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	da06      	bge.n	8000cc8 <HAL_UART_RxCpltCallback+0x12c>
 8000cba:	2200      	movs	r2, #0
 8000cbc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cc0:	4857      	ldr	r0, [pc, #348]	; (8000e20 <HAL_UART_RxCpltCallback+0x284>)
 8000cc2:	f000 ff53 	bl	8001b6c <HAL_GPIO_WritePin>
 8000cc6:	e005      	b.n	8000cd4 <HAL_UART_RxCpltCallback+0x138>
				  else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000cc8:	2201      	movs	r2, #1
 8000cca:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cce:	4854      	ldr	r0, [pc, #336]	; (8000e20 <HAL_UART_RxCpltCallback+0x284>)
 8000cd0:	f000 ff4c 	bl	8001b6c <HAL_GPIO_WritePin>

				  if (motorValue3 < 0) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	da06      	bge.n	8000ce8 <HAL_UART_RxCpltCallback+0x14c>
 8000cda:	2200      	movs	r2, #0
 8000cdc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ce0:	484f      	ldr	r0, [pc, #316]	; (8000e20 <HAL_UART_RxCpltCallback+0x284>)
 8000ce2:	f000 ff43 	bl	8001b6c <HAL_GPIO_WritePin>
 8000ce6:	e005      	b.n	8000cf4 <HAL_UART_RxCpltCallback+0x158>
				  else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000ce8:	2201      	movs	r2, #1
 8000cea:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cee:	484c      	ldr	r0, [pc, #304]	; (8000e20 <HAL_UART_RxCpltCallback+0x284>)
 8000cf0:	f000 ff3c 	bl	8001b6c <HAL_GPIO_WritePin>

				  if (motorValue4 < 0) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8000cf4:	693b      	ldr	r3, [r7, #16]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	da06      	bge.n	8000d08 <HAL_UART_RxCpltCallback+0x16c>
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d00:	4848      	ldr	r0, [pc, #288]	; (8000e24 <HAL_UART_RxCpltCallback+0x288>)
 8000d02:	f000 ff33 	bl	8001b6c <HAL_GPIO_WritePin>
 8000d06:	e005      	b.n	8000d14 <HAL_UART_RxCpltCallback+0x178>
				  else HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8000d08:	2201      	movs	r2, #1
 8000d0a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d0e:	4845      	ldr	r0, [pc, #276]	; (8000e24 <HAL_UART_RxCpltCallback+0x288>)
 8000d10:	f000 ff2c 	bl	8001b6c <HAL_GPIO_WritePin>

				  if (motorValue5 < 0) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	da06      	bge.n	8000d28 <HAL_UART_RxCpltCallback+0x18c>
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d20:	4840      	ldr	r0, [pc, #256]	; (8000e24 <HAL_UART_RxCpltCallback+0x288>)
 8000d22:	f000 ff23 	bl	8001b6c <HAL_GPIO_WritePin>
 8000d26:	e005      	b.n	8000d34 <HAL_UART_RxCpltCallback+0x198>
				  else HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8000d28:	2201      	movs	r2, #1
 8000d2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d2e:	483d      	ldr	r0, [pc, #244]	; (8000e24 <HAL_UART_RxCpltCallback+0x288>)
 8000d30:	f000 ff1c 	bl	8001b6c <HAL_GPIO_WritePin>

				  if (motorValue6 < 0) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	da05      	bge.n	8000d46 <HAL_UART_RxCpltCallback+0x1aa>
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2180      	movs	r1, #128	; 0x80
 8000d3e:	4839      	ldr	r0, [pc, #228]	; (8000e24 <HAL_UART_RxCpltCallback+0x288>)
 8000d40:	f000 ff14 	bl	8001b6c <HAL_GPIO_WritePin>
 8000d44:	e004      	b.n	8000d50 <HAL_UART_RxCpltCallback+0x1b4>
				  else HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8000d46:	2201      	movs	r2, #1
 8000d48:	2180      	movs	r1, #128	; 0x80
 8000d4a:	4836      	ldr	r0, [pc, #216]	; (8000e24 <HAL_UART_RxCpltCallback+0x288>)
 8000d4c:	f000 ff0e 	bl	8001b6c <HAL_GPIO_WritePin>

				  /* start motors again */
				  if (motor1_steps != 0) HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
 8000d50:	4b2d      	ldr	r3, [pc, #180]	; (8000e08 <HAL_UART_RxCpltCallback+0x26c>)
 8000d52:	881b      	ldrh	r3, [r3, #0]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d003      	beq.n	8000d60 <HAL_UART_RxCpltCallback+0x1c4>
 8000d58:	2100      	movs	r1, #0
 8000d5a:	4833      	ldr	r0, [pc, #204]	; (8000e28 <HAL_UART_RxCpltCallback+0x28c>)
 8000d5c:	f001 fdca 	bl	80028f4 <HAL_TIM_PWM_Start_IT>
				  if (motor2_steps != 0) HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_2);
 8000d60:	4b2a      	ldr	r3, [pc, #168]	; (8000e0c <HAL_UART_RxCpltCallback+0x270>)
 8000d62:	881b      	ldrh	r3, [r3, #0]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d003      	beq.n	8000d70 <HAL_UART_RxCpltCallback+0x1d4>
 8000d68:	2104      	movs	r1, #4
 8000d6a:	482f      	ldr	r0, [pc, #188]	; (8000e28 <HAL_UART_RxCpltCallback+0x28c>)
 8000d6c:	f001 fdc2 	bl	80028f4 <HAL_TIM_PWM_Start_IT>
				  if (motor3_steps != 0) HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 8000d70:	4b27      	ldr	r3, [pc, #156]	; (8000e10 <HAL_UART_RxCpltCallback+0x274>)
 8000d72:	881b      	ldrh	r3, [r3, #0]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d003      	beq.n	8000d80 <HAL_UART_RxCpltCallback+0x1e4>
 8000d78:	2100      	movs	r1, #0
 8000d7a:	482c      	ldr	r0, [pc, #176]	; (8000e2c <HAL_UART_RxCpltCallback+0x290>)
 8000d7c:	f001 fdba 	bl	80028f4 <HAL_TIM_PWM_Start_IT>
				  if (motor4_steps != 0) HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_2);
 8000d80:	4b24      	ldr	r3, [pc, #144]	; (8000e14 <HAL_UART_RxCpltCallback+0x278>)
 8000d82:	881b      	ldrh	r3, [r3, #0]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d003      	beq.n	8000d90 <HAL_UART_RxCpltCallback+0x1f4>
 8000d88:	2104      	movs	r1, #4
 8000d8a:	4828      	ldr	r0, [pc, #160]	; (8000e2c <HAL_UART_RxCpltCallback+0x290>)
 8000d8c:	f001 fdb2 	bl	80028f4 <HAL_TIM_PWM_Start_IT>
				  if (motor5_steps != 0) HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_1);
 8000d90:	4b21      	ldr	r3, [pc, #132]	; (8000e18 <HAL_UART_RxCpltCallback+0x27c>)
 8000d92:	881b      	ldrh	r3, [r3, #0]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d003      	beq.n	8000da0 <HAL_UART_RxCpltCallback+0x204>
 8000d98:	2100      	movs	r1, #0
 8000d9a:	4825      	ldr	r0, [pc, #148]	; (8000e30 <HAL_UART_RxCpltCallback+0x294>)
 8000d9c:	f001 fdaa 	bl	80028f4 <HAL_TIM_PWM_Start_IT>
				  if (motor6_steps != 0) HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_2);
 8000da0:	4b1e      	ldr	r3, [pc, #120]	; (8000e1c <HAL_UART_RxCpltCallback+0x280>)
 8000da2:	881b      	ldrh	r3, [r3, #0]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d003      	beq.n	8000db0 <HAL_UART_RxCpltCallback+0x214>
 8000da8:	2104      	movs	r1, #4
 8000daa:	4821      	ldr	r0, [pc, #132]	; (8000e30 <HAL_UART_RxCpltCallback+0x294>)
 8000dac:	f001 fda2 	bl	80028f4 <HAL_TIM_PWM_Start_IT>

				  // just to see some signs of life
				  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000db0:	2120      	movs	r1, #32
 8000db2:	481b      	ldr	r0, [pc, #108]	; (8000e20 <HAL_UART_RxCpltCallback+0x284>)
 8000db4:	f000 fef3 	bl	8001b9e <HAL_GPIO_TogglePin>
			  }
		  }

	  }

	  HAL_UART_Receive_IT(&huart2, rx_data, 1); // initialize to interrupt based receive
 8000db8:	2201      	movs	r2, #1
 8000dba:	490d      	ldr	r1, [pc, #52]	; (8000df0 <HAL_UART_RxCpltCallback+0x254>)
 8000dbc:	480f      	ldr	r0, [pc, #60]	; (8000dfc <HAL_UART_RxCpltCallback+0x260>)
 8000dbe:	f002 fea6 	bl	8003b0e <HAL_UART_Receive_IT>
	  HAL_UART_Transmit(&huart2, rx_data, strlen((char *)rx_data), 100); // initialize to transmit as we write new data to the rx_data byte(s)
 8000dc2:	480b      	ldr	r0, [pc, #44]	; (8000df0 <HAL_UART_RxCpltCallback+0x254>)
 8000dc4:	f7ff fa2e 	bl	8000224 <strlen>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	b29a      	uxth	r2, r3
 8000dcc:	2364      	movs	r3, #100	; 0x64
 8000dce:	4908      	ldr	r1, [pc, #32]	; (8000df0 <HAL_UART_RxCpltCallback+0x254>)
 8000dd0:	480a      	ldr	r0, [pc, #40]	; (8000dfc <HAL_UART_RxCpltCallback+0x260>)
 8000dd2:	f002 fe0a 	bl	80039ea <HAL_UART_Transmit>
  __ASM volatile ("cpsie i" : : : "memory");
 8000dd6:	b662      	cpsie	i
}
 8000dd8:	bf00      	nop

  }

  __enable_irq();
}
 8000dda:	bf00      	nop
 8000ddc:	3728      	adds	r7, #40	; 0x28
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40004400 	.word	0x40004400
 8000de8:	200001a8 	.word	0x200001a8
 8000dec:	200001b0 	.word	0x200001b0
 8000df0:	200001ac 	.word	0x200001ac
 8000df4:	20000214 	.word	0x20000214
 8000df8:	080056bc 	.word	0x080056bc
 8000dfc:	20000164 	.word	0x20000164
 8000e00:	080056c0 	.word	0x080056c0
 8000e04:	080056d8 	.word	0x080056d8
 8000e08:	20000216 	.word	0x20000216
 8000e0c:	20000218 	.word	0x20000218
 8000e10:	2000021a 	.word	0x2000021a
 8000e14:	2000021c 	.word	0x2000021c
 8000e18:	2000021e 	.word	0x2000021e
 8000e1c:	20000220 	.word	0x20000220
 8000e20:	40020000 	.word	0x40020000
 8000e24:	40020800 	.word	0x40020800
 8000e28:	2000008c 	.word	0x2000008c
 8000e2c:	200000d4 	.word	0x200000d4
 8000e30:	2000011c 	.word	0x2000011c

08000e34 <HAL_TIM_PWM_PulseFinishedCallback>:

// this function gets called every time that *some* PWM timer sends a pulse
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2 &&  htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e44:	d117      	bne.n	8000e76 <HAL_TIM_PWM_PulseFinishedCallback+0x42>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	7f1b      	ldrb	r3, [r3, #28]
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d113      	bne.n	8000e76 <HAL_TIM_PWM_PulseFinishedCallback+0x42>
		// --global_motor_flag;
		if (motor1_steps != 0) --motor1_steps;
 8000e4e:	4b52      	ldr	r3, [pc, #328]	; (8000f98 <HAL_TIM_PWM_PulseFinishedCallback+0x164>)
 8000e50:	881b      	ldrh	r3, [r3, #0]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d005      	beq.n	8000e62 <HAL_TIM_PWM_PulseFinishedCallback+0x2e>
 8000e56:	4b50      	ldr	r3, [pc, #320]	; (8000f98 <HAL_TIM_PWM_PulseFinishedCallback+0x164>)
 8000e58:	881b      	ldrh	r3, [r3, #0]
 8000e5a:	3b01      	subs	r3, #1
 8000e5c:	b29a      	uxth	r2, r3
 8000e5e:	4b4e      	ldr	r3, [pc, #312]	; (8000f98 <HAL_TIM_PWM_PulseFinishedCallback+0x164>)
 8000e60:	801a      	strh	r2, [r3, #0]
		// if (global motor flag == 0) {disable interrupt, motherfucker!};
		if (motor1_steps == 0) {
 8000e62:	4b4d      	ldr	r3, [pc, #308]	; (8000f98 <HAL_TIM_PWM_PulseFinishedCallback+0x164>)
 8000e64:	881b      	ldrh	r3, [r3, #0]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	f040 8091 	bne.w	8000f8e <HAL_TIM_PWM_PulseFinishedCallback+0x15a>
			HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_1);
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	484b      	ldr	r0, [pc, #300]	; (8000f9c <HAL_TIM_PWM_PulseFinishedCallback+0x168>)
 8000e70:	f001 fe56 	bl	8002b20 <HAL_TIM_PWM_Stop_IT>
		if (motor1_steps == 0) {
 8000e74:	e08b      	b.n	8000f8e <HAL_TIM_PWM_PulseFinishedCallback+0x15a>
		}
	}
	else if (htim->Instance == TIM2 &&  htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e7e:	d116      	bne.n	8000eae <HAL_TIM_PWM_PulseFinishedCallback+0x7a>
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	7f1b      	ldrb	r3, [r3, #28]
 8000e84:	2b02      	cmp	r3, #2
 8000e86:	d112      	bne.n	8000eae <HAL_TIM_PWM_PulseFinishedCallback+0x7a>
		// --global_motor_flag;
		if (motor2_steps != 0) --motor2_steps;
 8000e88:	4b45      	ldr	r3, [pc, #276]	; (8000fa0 <HAL_TIM_PWM_PulseFinishedCallback+0x16c>)
 8000e8a:	881b      	ldrh	r3, [r3, #0]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d005      	beq.n	8000e9c <HAL_TIM_PWM_PulseFinishedCallback+0x68>
 8000e90:	4b43      	ldr	r3, [pc, #268]	; (8000fa0 <HAL_TIM_PWM_PulseFinishedCallback+0x16c>)
 8000e92:	881b      	ldrh	r3, [r3, #0]
 8000e94:	3b01      	subs	r3, #1
 8000e96:	b29a      	uxth	r2, r3
 8000e98:	4b41      	ldr	r3, [pc, #260]	; (8000fa0 <HAL_TIM_PWM_PulseFinishedCallback+0x16c>)
 8000e9a:	801a      	strh	r2, [r3, #0]
		// if (global motor flag == 0) {disable interrupt, motherfucker!};
		if (motor2_steps == 0) {
 8000e9c:	4b40      	ldr	r3, [pc, #256]	; (8000fa0 <HAL_TIM_PWM_PulseFinishedCallback+0x16c>)
 8000e9e:	881b      	ldrh	r3, [r3, #0]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d174      	bne.n	8000f8e <HAL_TIM_PWM_PulseFinishedCallback+0x15a>
			HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_2);
 8000ea4:	2104      	movs	r1, #4
 8000ea6:	483d      	ldr	r0, [pc, #244]	; (8000f9c <HAL_TIM_PWM_PulseFinishedCallback+0x168>)
 8000ea8:	f001 fe3a 	bl	8002b20 <HAL_TIM_PWM_Stop_IT>
		if (motor2_steps == 0) {
 8000eac:	e06f      	b.n	8000f8e <HAL_TIM_PWM_PulseFinishedCallback+0x15a>
		}
	}
	else if (htim->Instance == TIM3 &&  htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a3c      	ldr	r2, [pc, #240]	; (8000fa4 <HAL_TIM_PWM_PulseFinishedCallback+0x170>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d116      	bne.n	8000ee6 <HAL_TIM_PWM_PulseFinishedCallback+0xb2>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	7f1b      	ldrb	r3, [r3, #28]
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d112      	bne.n	8000ee6 <HAL_TIM_PWM_PulseFinishedCallback+0xb2>
    {
    	// --global_motor_flag;
		if (motor3_steps != 0) --motor3_steps;
 8000ec0:	4b39      	ldr	r3, [pc, #228]	; (8000fa8 <HAL_TIM_PWM_PulseFinishedCallback+0x174>)
 8000ec2:	881b      	ldrh	r3, [r3, #0]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d005      	beq.n	8000ed4 <HAL_TIM_PWM_PulseFinishedCallback+0xa0>
 8000ec8:	4b37      	ldr	r3, [pc, #220]	; (8000fa8 <HAL_TIM_PWM_PulseFinishedCallback+0x174>)
 8000eca:	881b      	ldrh	r3, [r3, #0]
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	b29a      	uxth	r2, r3
 8000ed0:	4b35      	ldr	r3, [pc, #212]	; (8000fa8 <HAL_TIM_PWM_PulseFinishedCallback+0x174>)
 8000ed2:	801a      	strh	r2, [r3, #0]
		// if (global motor flag == 0) {disable interrupt, motherfucker!};
		if (motor3_steps == 0) {
 8000ed4:	4b34      	ldr	r3, [pc, #208]	; (8000fa8 <HAL_TIM_PWM_PulseFinishedCallback+0x174>)
 8000ed6:	881b      	ldrh	r3, [r3, #0]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d158      	bne.n	8000f8e <HAL_TIM_PWM_PulseFinishedCallback+0x15a>
			HAL_TIM_PWM_Stop_IT(&htim3, TIM_CHANNEL_1);
 8000edc:	2100      	movs	r1, #0
 8000ede:	4833      	ldr	r0, [pc, #204]	; (8000fac <HAL_TIM_PWM_PulseFinishedCallback+0x178>)
 8000ee0:	f001 fe1e 	bl	8002b20 <HAL_TIM_PWM_Stop_IT>
		if (motor3_steps == 0) {
 8000ee4:	e053      	b.n	8000f8e <HAL_TIM_PWM_PulseFinishedCallback+0x15a>
		}
    }
	else if (htim->Instance == TIM3 &&  htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a2e      	ldr	r2, [pc, #184]	; (8000fa4 <HAL_TIM_PWM_PulseFinishedCallback+0x170>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d116      	bne.n	8000f1e <HAL_TIM_PWM_PulseFinishedCallback+0xea>
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	7f1b      	ldrb	r3, [r3, #28]
 8000ef4:	2b02      	cmp	r3, #2
 8000ef6:	d112      	bne.n	8000f1e <HAL_TIM_PWM_PulseFinishedCallback+0xea>
    	// --global_motor_flag;
		if (motor4_steps != 0) --motor4_steps;
 8000ef8:	4b2d      	ldr	r3, [pc, #180]	; (8000fb0 <HAL_TIM_PWM_PulseFinishedCallback+0x17c>)
 8000efa:	881b      	ldrh	r3, [r3, #0]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d005      	beq.n	8000f0c <HAL_TIM_PWM_PulseFinishedCallback+0xd8>
 8000f00:	4b2b      	ldr	r3, [pc, #172]	; (8000fb0 <HAL_TIM_PWM_PulseFinishedCallback+0x17c>)
 8000f02:	881b      	ldrh	r3, [r3, #0]
 8000f04:	3b01      	subs	r3, #1
 8000f06:	b29a      	uxth	r2, r3
 8000f08:	4b29      	ldr	r3, [pc, #164]	; (8000fb0 <HAL_TIM_PWM_PulseFinishedCallback+0x17c>)
 8000f0a:	801a      	strh	r2, [r3, #0]
		// if (global motor flag == 0) {disable interrupt, motherfucker!};
		if (motor4_steps == 0) {
 8000f0c:	4b28      	ldr	r3, [pc, #160]	; (8000fb0 <HAL_TIM_PWM_PulseFinishedCallback+0x17c>)
 8000f0e:	881b      	ldrh	r3, [r3, #0]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d13c      	bne.n	8000f8e <HAL_TIM_PWM_PulseFinishedCallback+0x15a>
			HAL_TIM_PWM_Stop_IT(&htim3, TIM_CHANNEL_2);
 8000f14:	2104      	movs	r1, #4
 8000f16:	4825      	ldr	r0, [pc, #148]	; (8000fac <HAL_TIM_PWM_PulseFinishedCallback+0x178>)
 8000f18:	f001 fe02 	bl	8002b20 <HAL_TIM_PWM_Stop_IT>
		if (motor4_steps == 0) {
 8000f1c:	e037      	b.n	8000f8e <HAL_TIM_PWM_PulseFinishedCallback+0x15a>
		}
	}
	else if (htim->Instance == TIM4 &&  htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a24      	ldr	r2, [pc, #144]	; (8000fb4 <HAL_TIM_PWM_PulseFinishedCallback+0x180>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d116      	bne.n	8000f56 <HAL_TIM_PWM_PulseFinishedCallback+0x122>
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	7f1b      	ldrb	r3, [r3, #28]
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d112      	bne.n	8000f56 <HAL_TIM_PWM_PulseFinishedCallback+0x122>
    	// --global_motor_flag;
		if (motor5_steps != 0) --motor5_steps;
 8000f30:	4b21      	ldr	r3, [pc, #132]	; (8000fb8 <HAL_TIM_PWM_PulseFinishedCallback+0x184>)
 8000f32:	881b      	ldrh	r3, [r3, #0]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d005      	beq.n	8000f44 <HAL_TIM_PWM_PulseFinishedCallback+0x110>
 8000f38:	4b1f      	ldr	r3, [pc, #124]	; (8000fb8 <HAL_TIM_PWM_PulseFinishedCallback+0x184>)
 8000f3a:	881b      	ldrh	r3, [r3, #0]
 8000f3c:	3b01      	subs	r3, #1
 8000f3e:	b29a      	uxth	r2, r3
 8000f40:	4b1d      	ldr	r3, [pc, #116]	; (8000fb8 <HAL_TIM_PWM_PulseFinishedCallback+0x184>)
 8000f42:	801a      	strh	r2, [r3, #0]
		// if (global motor flag == 0) {disable interrupt, motherfucker!};
		if (motor5_steps == 0) {
 8000f44:	4b1c      	ldr	r3, [pc, #112]	; (8000fb8 <HAL_TIM_PWM_PulseFinishedCallback+0x184>)
 8000f46:	881b      	ldrh	r3, [r3, #0]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d120      	bne.n	8000f8e <HAL_TIM_PWM_PulseFinishedCallback+0x15a>
			HAL_TIM_PWM_Stop_IT(&htim4, TIM_CHANNEL_1);
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	481b      	ldr	r0, [pc, #108]	; (8000fbc <HAL_TIM_PWM_PulseFinishedCallback+0x188>)
 8000f50:	f001 fde6 	bl	8002b20 <HAL_TIM_PWM_Stop_IT>
		if (motor5_steps == 0) {
 8000f54:	e01b      	b.n	8000f8e <HAL_TIM_PWM_PulseFinishedCallback+0x15a>
		}
	}
	else if (htim->Instance == TIM4 &&  htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a16      	ldr	r2, [pc, #88]	; (8000fb4 <HAL_TIM_PWM_PulseFinishedCallback+0x180>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d116      	bne.n	8000f8e <HAL_TIM_PWM_PulseFinishedCallback+0x15a>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	7f1b      	ldrb	r3, [r3, #28]
 8000f64:	2b02      	cmp	r3, #2
 8000f66:	d112      	bne.n	8000f8e <HAL_TIM_PWM_PulseFinishedCallback+0x15a>
    	// --global_motor_flag;
		if (motor6_steps != 0) --motor6_steps;
 8000f68:	4b15      	ldr	r3, [pc, #84]	; (8000fc0 <HAL_TIM_PWM_PulseFinishedCallback+0x18c>)
 8000f6a:	881b      	ldrh	r3, [r3, #0]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d005      	beq.n	8000f7c <HAL_TIM_PWM_PulseFinishedCallback+0x148>
 8000f70:	4b13      	ldr	r3, [pc, #76]	; (8000fc0 <HAL_TIM_PWM_PulseFinishedCallback+0x18c>)
 8000f72:	881b      	ldrh	r3, [r3, #0]
 8000f74:	3b01      	subs	r3, #1
 8000f76:	b29a      	uxth	r2, r3
 8000f78:	4b11      	ldr	r3, [pc, #68]	; (8000fc0 <HAL_TIM_PWM_PulseFinishedCallback+0x18c>)
 8000f7a:	801a      	strh	r2, [r3, #0]
		// if (global motor flag == 0) {disable interrupt, motherfucker!};
		if (motor6_steps == 0) {
 8000f7c:	4b10      	ldr	r3, [pc, #64]	; (8000fc0 <HAL_TIM_PWM_PulseFinishedCallback+0x18c>)
 8000f7e:	881b      	ldrh	r3, [r3, #0]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d104      	bne.n	8000f8e <HAL_TIM_PWM_PulseFinishedCallback+0x15a>
			HAL_TIM_PWM_Stop_IT(&htim4, TIM_CHANNEL_2);
 8000f84:	2104      	movs	r1, #4
 8000f86:	480d      	ldr	r0, [pc, #52]	; (8000fbc <HAL_TIM_PWM_PulseFinishedCallback+0x188>)
 8000f88:	f001 fdca 	bl	8002b20 <HAL_TIM_PWM_Stop_IT>
		}
	}
}
 8000f8c:	e7ff      	b.n	8000f8e <HAL_TIM_PWM_PulseFinishedCallback+0x15a>
 8000f8e:	bf00      	nop
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20000216 	.word	0x20000216
 8000f9c:	2000008c 	.word	0x2000008c
 8000fa0:	20000218 	.word	0x20000218
 8000fa4:	40000400 	.word	0x40000400
 8000fa8:	2000021a 	.word	0x2000021a
 8000fac:	200000d4 	.word	0x200000d4
 8000fb0:	2000021c 	.word	0x2000021c
 8000fb4:	40000800 	.word	0x40000800
 8000fb8:	2000021e 	.word	0x2000021e
 8000fbc:	2000011c 	.word	0x2000011c
 8000fc0:	20000220 	.word	0x20000220

08000fc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000fc8:	b672      	cpsid	i
}
 8000fca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fcc:	e7fe      	b.n	8000fcc <Error_Handler+0x8>
	...

08000fd0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	607b      	str	r3, [r7, #4]
 8000fda:	4b10      	ldr	r3, [pc, #64]	; (800101c <HAL_MspInit+0x4c>)
 8000fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fde:	4a0f      	ldr	r2, [pc, #60]	; (800101c <HAL_MspInit+0x4c>)
 8000fe0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fe4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fe6:	4b0d      	ldr	r3, [pc, #52]	; (800101c <HAL_MspInit+0x4c>)
 8000fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fee:	607b      	str	r3, [r7, #4]
 8000ff0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	603b      	str	r3, [r7, #0]
 8000ff6:	4b09      	ldr	r3, [pc, #36]	; (800101c <HAL_MspInit+0x4c>)
 8000ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffa:	4a08      	ldr	r2, [pc, #32]	; (800101c <HAL_MspInit+0x4c>)
 8000ffc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001000:	6413      	str	r3, [r2, #64]	; 0x40
 8001002:	4b06      	ldr	r3, [pc, #24]	; (800101c <HAL_MspInit+0x4c>)
 8001004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800100a:	603b      	str	r3, [r7, #0]
 800100c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800100e:	2007      	movs	r0, #7
 8001010:	f000 fb44 	bl	800169c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001014:	bf00      	nop
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	40023800 	.word	0x40023800

08001020 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b086      	sub	sp, #24
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001030:	d116      	bne.n	8001060 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	617b      	str	r3, [r7, #20]
 8001036:	4b28      	ldr	r3, [pc, #160]	; (80010d8 <HAL_TIM_Base_MspInit+0xb8>)
 8001038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103a:	4a27      	ldr	r2, [pc, #156]	; (80010d8 <HAL_TIM_Base_MspInit+0xb8>)
 800103c:	f043 0301 	orr.w	r3, r3, #1
 8001040:	6413      	str	r3, [r2, #64]	; 0x40
 8001042:	4b25      	ldr	r3, [pc, #148]	; (80010d8 <HAL_TIM_Base_MspInit+0xb8>)
 8001044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	617b      	str	r3, [r7, #20]
 800104c:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800104e:	2200      	movs	r2, #0
 8001050:	2100      	movs	r1, #0
 8001052:	201c      	movs	r0, #28
 8001054:	f000 fb2d 	bl	80016b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001058:	201c      	movs	r0, #28
 800105a:	f000 fb46 	bl	80016ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800105e:	e036      	b.n	80010ce <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM3)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a1d      	ldr	r2, [pc, #116]	; (80010dc <HAL_TIM_Base_MspInit+0xbc>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d116      	bne.n	8001098 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	613b      	str	r3, [r7, #16]
 800106e:	4b1a      	ldr	r3, [pc, #104]	; (80010d8 <HAL_TIM_Base_MspInit+0xb8>)
 8001070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001072:	4a19      	ldr	r2, [pc, #100]	; (80010d8 <HAL_TIM_Base_MspInit+0xb8>)
 8001074:	f043 0302 	orr.w	r3, r3, #2
 8001078:	6413      	str	r3, [r2, #64]	; 0x40
 800107a:	4b17      	ldr	r3, [pc, #92]	; (80010d8 <HAL_TIM_Base_MspInit+0xb8>)
 800107c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107e:	f003 0302 	and.w	r3, r3, #2
 8001082:	613b      	str	r3, [r7, #16]
 8001084:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001086:	2200      	movs	r2, #0
 8001088:	2100      	movs	r1, #0
 800108a:	201d      	movs	r0, #29
 800108c:	f000 fb11 	bl	80016b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001090:	201d      	movs	r0, #29
 8001092:	f000 fb2a 	bl	80016ea <HAL_NVIC_EnableIRQ>
}
 8001096:	e01a      	b.n	80010ce <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM4)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a10      	ldr	r2, [pc, #64]	; (80010e0 <HAL_TIM_Base_MspInit+0xc0>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d115      	bne.n	80010ce <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <HAL_TIM_Base_MspInit+0xb8>)
 80010a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010aa:	4a0b      	ldr	r2, [pc, #44]	; (80010d8 <HAL_TIM_Base_MspInit+0xb8>)
 80010ac:	f043 0304 	orr.w	r3, r3, #4
 80010b0:	6413      	str	r3, [r2, #64]	; 0x40
 80010b2:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <HAL_TIM_Base_MspInit+0xb8>)
 80010b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b6:	f003 0304 	and.w	r3, r3, #4
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80010be:	2200      	movs	r2, #0
 80010c0:	2100      	movs	r1, #0
 80010c2:	201e      	movs	r0, #30
 80010c4:	f000 faf5 	bl	80016b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80010c8:	201e      	movs	r0, #30
 80010ca:	f000 fb0e 	bl	80016ea <HAL_NVIC_EnableIRQ>
}
 80010ce:	bf00      	nop
 80010d0:	3718      	adds	r7, #24
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40023800 	.word	0x40023800
 80010dc:	40000400 	.word	0x40000400
 80010e0:	40000800 	.word	0x40000800

080010e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b08a      	sub	sp, #40	; 0x28
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ec:	f107 0314 	add.w	r3, r7, #20
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]
 80010fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001104:	d11e      	bne.n	8001144 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	613b      	str	r3, [r7, #16]
 800110a:	4b34      	ldr	r3, [pc, #208]	; (80011dc <HAL_TIM_MspPostInit+0xf8>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	4a33      	ldr	r2, [pc, #204]	; (80011dc <HAL_TIM_MspPostInit+0xf8>)
 8001110:	f043 0301 	orr.w	r3, r3, #1
 8001114:	6313      	str	r3, [r2, #48]	; 0x30
 8001116:	4b31      	ldr	r3, [pc, #196]	; (80011dc <HAL_TIM_MspPostInit+0xf8>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	613b      	str	r3, [r7, #16]
 8001120:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001122:	2303      	movs	r3, #3
 8001124:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001126:	2302      	movs	r3, #2
 8001128:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112e:	2300      	movs	r3, #0
 8001130:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001132:	2301      	movs	r3, #1
 8001134:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001136:	f107 0314 	add.w	r3, r7, #20
 800113a:	4619      	mov	r1, r3
 800113c:	4828      	ldr	r0, [pc, #160]	; (80011e0 <HAL_TIM_MspPostInit+0xfc>)
 800113e:	f000 fb81 	bl	8001844 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001142:	e046      	b.n	80011d2 <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM3)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a26      	ldr	r2, [pc, #152]	; (80011e4 <HAL_TIM_MspPostInit+0x100>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d11e      	bne.n	800118c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	60fb      	str	r3, [r7, #12]
 8001152:	4b22      	ldr	r3, [pc, #136]	; (80011dc <HAL_TIM_MspPostInit+0xf8>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	4a21      	ldr	r2, [pc, #132]	; (80011dc <HAL_TIM_MspPostInit+0xf8>)
 8001158:	f043 0301 	orr.w	r3, r3, #1
 800115c:	6313      	str	r3, [r2, #48]	; 0x30
 800115e:	4b1f      	ldr	r3, [pc, #124]	; (80011dc <HAL_TIM_MspPostInit+0xf8>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	f003 0301 	and.w	r3, r3, #1
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800116a:	23c0      	movs	r3, #192	; 0xc0
 800116c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116e:	2302      	movs	r3, #2
 8001170:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001172:	2300      	movs	r3, #0
 8001174:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001176:	2300      	movs	r3, #0
 8001178:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800117a:	2302      	movs	r3, #2
 800117c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800117e:	f107 0314 	add.w	r3, r7, #20
 8001182:	4619      	mov	r1, r3
 8001184:	4816      	ldr	r0, [pc, #88]	; (80011e0 <HAL_TIM_MspPostInit+0xfc>)
 8001186:	f000 fb5d 	bl	8001844 <HAL_GPIO_Init>
}
 800118a:	e022      	b.n	80011d2 <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM4)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a15      	ldr	r2, [pc, #84]	; (80011e8 <HAL_TIM_MspPostInit+0x104>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d11d      	bne.n	80011d2 <HAL_TIM_MspPostInit+0xee>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	60bb      	str	r3, [r7, #8]
 800119a:	4b10      	ldr	r3, [pc, #64]	; (80011dc <HAL_TIM_MspPostInit+0xf8>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	4a0f      	ldr	r2, [pc, #60]	; (80011dc <HAL_TIM_MspPostInit+0xf8>)
 80011a0:	f043 0302 	orr.w	r3, r3, #2
 80011a4:	6313      	str	r3, [r2, #48]	; 0x30
 80011a6:	4b0d      	ldr	r3, [pc, #52]	; (80011dc <HAL_TIM_MspPostInit+0xf8>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	f003 0302 	and.w	r3, r3, #2
 80011ae:	60bb      	str	r3, [r7, #8]
 80011b0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011b2:	23c0      	movs	r3, #192	; 0xc0
 80011b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b6:	2302      	movs	r3, #2
 80011b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ba:	2300      	movs	r3, #0
 80011bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011be:	2300      	movs	r3, #0
 80011c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80011c2:	2302      	movs	r3, #2
 80011c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c6:	f107 0314 	add.w	r3, r7, #20
 80011ca:	4619      	mov	r1, r3
 80011cc:	4807      	ldr	r0, [pc, #28]	; (80011ec <HAL_TIM_MspPostInit+0x108>)
 80011ce:	f000 fb39 	bl	8001844 <HAL_GPIO_Init>
}
 80011d2:	bf00      	nop
 80011d4:	3728      	adds	r7, #40	; 0x28
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40023800 	.word	0x40023800
 80011e0:	40020000 	.word	0x40020000
 80011e4:	40000400 	.word	0x40000400
 80011e8:	40000800 	.word	0x40000800
 80011ec:	40020400 	.word	0x40020400

080011f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b08a      	sub	sp, #40	; 0x28
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f8:	f107 0314 	add.w	r3, r7, #20
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]
 8001206:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a1d      	ldr	r2, [pc, #116]	; (8001284 <HAL_UART_MspInit+0x94>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d133      	bne.n	800127a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	613b      	str	r3, [r7, #16]
 8001216:	4b1c      	ldr	r3, [pc, #112]	; (8001288 <HAL_UART_MspInit+0x98>)
 8001218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121a:	4a1b      	ldr	r2, [pc, #108]	; (8001288 <HAL_UART_MspInit+0x98>)
 800121c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001220:	6413      	str	r3, [r2, #64]	; 0x40
 8001222:	4b19      	ldr	r3, [pc, #100]	; (8001288 <HAL_UART_MspInit+0x98>)
 8001224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800122a:	613b      	str	r3, [r7, #16]
 800122c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	60fb      	str	r3, [r7, #12]
 8001232:	4b15      	ldr	r3, [pc, #84]	; (8001288 <HAL_UART_MspInit+0x98>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	4a14      	ldr	r2, [pc, #80]	; (8001288 <HAL_UART_MspInit+0x98>)
 8001238:	f043 0301 	orr.w	r3, r3, #1
 800123c:	6313      	str	r3, [r2, #48]	; 0x30
 800123e:	4b12      	ldr	r3, [pc, #72]	; (8001288 <HAL_UART_MspInit+0x98>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	f003 0301 	and.w	r3, r3, #1
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800124a:	230c      	movs	r3, #12
 800124c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124e:	2302      	movs	r3, #2
 8001250:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001252:	2300      	movs	r3, #0
 8001254:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001256:	2303      	movs	r3, #3
 8001258:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800125a:	2307      	movs	r3, #7
 800125c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800125e:	f107 0314 	add.w	r3, r7, #20
 8001262:	4619      	mov	r1, r3
 8001264:	4809      	ldr	r0, [pc, #36]	; (800128c <HAL_UART_MspInit+0x9c>)
 8001266:	f000 faed 	bl	8001844 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800126a:	2200      	movs	r2, #0
 800126c:	2100      	movs	r1, #0
 800126e:	2026      	movs	r0, #38	; 0x26
 8001270:	f000 fa1f 	bl	80016b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001274:	2026      	movs	r0, #38	; 0x26
 8001276:	f000 fa38 	bl	80016ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800127a:	bf00      	nop
 800127c:	3728      	adds	r7, #40	; 0x28
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40004400 	.word	0x40004400
 8001288:	40023800 	.word	0x40023800
 800128c:	40020000 	.word	0x40020000

08001290 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001294:	e7fe      	b.n	8001294 <NMI_Handler+0x4>

08001296 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001296:	b480      	push	{r7}
 8001298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800129a:	e7fe      	b.n	800129a <HardFault_Handler+0x4>

0800129c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012a0:	e7fe      	b.n	80012a0 <MemManage_Handler+0x4>

080012a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012a2:	b480      	push	{r7}
 80012a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012a6:	e7fe      	b.n	80012a6 <BusFault_Handler+0x4>

080012a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012ac:	e7fe      	b.n	80012ac <UsageFault_Handler+0x4>

080012ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012ae:	b480      	push	{r7}
 80012b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012b2:	bf00      	nop
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012c0:	bf00      	nop
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr

080012ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012ca:	b480      	push	{r7}
 80012cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012ce:	bf00      	nop
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012dc:	f000 f8ee 	bl	80014bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012e0:	bf00      	nop
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012e8:	4802      	ldr	r0, [pc, #8]	; (80012f4 <TIM2_IRQHandler+0x10>)
 80012ea:	f001 fcd7 	bl	8002c9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	2000008c 	.word	0x2000008c

080012f8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80012fc:	4802      	ldr	r0, [pc, #8]	; (8001308 <TIM3_IRQHandler+0x10>)
 80012fe:	f001 fccd 	bl	8002c9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	200000d4 	.word	0x200000d4

0800130c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001310:	4802      	ldr	r0, [pc, #8]	; (800131c <TIM4_IRQHandler+0x10>)
 8001312:	f001 fcc3 	bl	8002c9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	2000011c 	.word	0x2000011c

08001320 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001324:	4802      	ldr	r0, [pc, #8]	; (8001330 <USART2_IRQHandler+0x10>)
 8001326:	f002 fc23 	bl	8003b70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800132a:	bf00      	nop
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	20000164 	.word	0x20000164

08001334 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b086      	sub	sp, #24
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800133c:	4a14      	ldr	r2, [pc, #80]	; (8001390 <_sbrk+0x5c>)
 800133e:	4b15      	ldr	r3, [pc, #84]	; (8001394 <_sbrk+0x60>)
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001348:	4b13      	ldr	r3, [pc, #76]	; (8001398 <_sbrk+0x64>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d102      	bne.n	8001356 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001350:	4b11      	ldr	r3, [pc, #68]	; (8001398 <_sbrk+0x64>)
 8001352:	4a12      	ldr	r2, [pc, #72]	; (800139c <_sbrk+0x68>)
 8001354:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001356:	4b10      	ldr	r3, [pc, #64]	; (8001398 <_sbrk+0x64>)
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4413      	add	r3, r2
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	429a      	cmp	r2, r3
 8001362:	d207      	bcs.n	8001374 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001364:	f003 fb6c 	bl	8004a40 <__errno>
 8001368:	4603      	mov	r3, r0
 800136a:	220c      	movs	r2, #12
 800136c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800136e:	f04f 33ff 	mov.w	r3, #4294967295
 8001372:	e009      	b.n	8001388 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001374:	4b08      	ldr	r3, [pc, #32]	; (8001398 <_sbrk+0x64>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800137a:	4b07      	ldr	r3, [pc, #28]	; (8001398 <_sbrk+0x64>)
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4413      	add	r3, r2
 8001382:	4a05      	ldr	r2, [pc, #20]	; (8001398 <_sbrk+0x64>)
 8001384:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001386:	68fb      	ldr	r3, [r7, #12]
}
 8001388:	4618      	mov	r0, r3
 800138a:	3718      	adds	r7, #24
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	20020000 	.word	0x20020000
 8001394:	00000400 	.word	0x00000400
 8001398:	20000224 	.word	0x20000224
 800139c:	20000240 	.word	0x20000240

080013a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013a4:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <SystemInit+0x20>)
 80013a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013aa:	4a05      	ldr	r2, [pc, #20]	; (80013c0 <SystemInit+0x20>)
 80013ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013b4:	bf00      	nop
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	e000ed00 	.word	0xe000ed00

080013c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013c8:	480d      	ldr	r0, [pc, #52]	; (8001400 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013ca:	490e      	ldr	r1, [pc, #56]	; (8001404 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013cc:	4a0e      	ldr	r2, [pc, #56]	; (8001408 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013d0:	e002      	b.n	80013d8 <LoopCopyDataInit>

080013d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013d6:	3304      	adds	r3, #4

080013d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013dc:	d3f9      	bcc.n	80013d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013de:	4a0b      	ldr	r2, [pc, #44]	; (800140c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013e0:	4c0b      	ldr	r4, [pc, #44]	; (8001410 <LoopFillZerobss+0x26>)
  movs r3, #0
 80013e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013e4:	e001      	b.n	80013ea <LoopFillZerobss>

080013e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013e8:	3204      	adds	r2, #4

080013ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013ec:	d3fb      	bcc.n	80013e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013ee:	f7ff ffd7 	bl	80013a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013f2:	f003 fb2b 	bl	8004a4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013f6:	f7ff f8f5 	bl	80005e4 <main>
  bx  lr    
 80013fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001400:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001404:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001408:	08005894 	.word	0x08005894
  ldr r2, =_sbss
 800140c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001410:	2000023c 	.word	0x2000023c

08001414 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001414:	e7fe      	b.n	8001414 <ADC_IRQHandler>
	...

08001418 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800141c:	4b0e      	ldr	r3, [pc, #56]	; (8001458 <HAL_Init+0x40>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a0d      	ldr	r2, [pc, #52]	; (8001458 <HAL_Init+0x40>)
 8001422:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001426:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001428:	4b0b      	ldr	r3, [pc, #44]	; (8001458 <HAL_Init+0x40>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a0a      	ldr	r2, [pc, #40]	; (8001458 <HAL_Init+0x40>)
 800142e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001432:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001434:	4b08      	ldr	r3, [pc, #32]	; (8001458 <HAL_Init+0x40>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a07      	ldr	r2, [pc, #28]	; (8001458 <HAL_Init+0x40>)
 800143a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800143e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001440:	2003      	movs	r0, #3
 8001442:	f000 f92b 	bl	800169c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001446:	2000      	movs	r0, #0
 8001448:	f000 f808 	bl	800145c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800144c:	f7ff fdc0 	bl	8000fd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001450:	2300      	movs	r3, #0
}
 8001452:	4618      	mov	r0, r3
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	40023c00 	.word	0x40023c00

0800145c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001464:	4b12      	ldr	r3, [pc, #72]	; (80014b0 <HAL_InitTick+0x54>)
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	4b12      	ldr	r3, [pc, #72]	; (80014b4 <HAL_InitTick+0x58>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	4619      	mov	r1, r3
 800146e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001472:	fbb3 f3f1 	udiv	r3, r3, r1
 8001476:	fbb2 f3f3 	udiv	r3, r2, r3
 800147a:	4618      	mov	r0, r3
 800147c:	f000 f943 	bl	8001706 <HAL_SYSTICK_Config>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e00e      	b.n	80014a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2b0f      	cmp	r3, #15
 800148e:	d80a      	bhi.n	80014a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001490:	2200      	movs	r2, #0
 8001492:	6879      	ldr	r1, [r7, #4]
 8001494:	f04f 30ff 	mov.w	r0, #4294967295
 8001498:	f000 f90b 	bl	80016b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800149c:	4a06      	ldr	r2, [pc, #24]	; (80014b8 <HAL_InitTick+0x5c>)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014a2:	2300      	movs	r3, #0
 80014a4:	e000      	b.n	80014a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20000000 	.word	0x20000000
 80014b4:	20000008 	.word	0x20000008
 80014b8:	20000004 	.word	0x20000004

080014bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014c0:	4b06      	ldr	r3, [pc, #24]	; (80014dc <HAL_IncTick+0x20>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	461a      	mov	r2, r3
 80014c6:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <HAL_IncTick+0x24>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4413      	add	r3, r2
 80014cc:	4a04      	ldr	r2, [pc, #16]	; (80014e0 <HAL_IncTick+0x24>)
 80014ce:	6013      	str	r3, [r2, #0]
}
 80014d0:	bf00      	nop
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	20000008 	.word	0x20000008
 80014e0:	20000228 	.word	0x20000228

080014e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  return uwTick;
 80014e8:	4b03      	ldr	r3, [pc, #12]	; (80014f8 <HAL_GetTick+0x14>)
 80014ea:	681b      	ldr	r3, [r3, #0]
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	20000228 	.word	0x20000228

080014fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f003 0307 	and.w	r3, r3, #7
 800150a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800150c:	4b0c      	ldr	r3, [pc, #48]	; (8001540 <__NVIC_SetPriorityGrouping+0x44>)
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001512:	68ba      	ldr	r2, [r7, #8]
 8001514:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001518:	4013      	ands	r3, r2
 800151a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001524:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001528:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800152c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800152e:	4a04      	ldr	r2, [pc, #16]	; (8001540 <__NVIC_SetPriorityGrouping+0x44>)
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	60d3      	str	r3, [r2, #12]
}
 8001534:	bf00      	nop
 8001536:	3714      	adds	r7, #20
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr
 8001540:	e000ed00 	.word	0xe000ed00

08001544 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001548:	4b04      	ldr	r3, [pc, #16]	; (800155c <__NVIC_GetPriorityGrouping+0x18>)
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	0a1b      	lsrs	r3, r3, #8
 800154e:	f003 0307 	and.w	r3, r3, #7
}
 8001552:	4618      	mov	r0, r3
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	e000ed00 	.word	0xe000ed00

08001560 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800156a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156e:	2b00      	cmp	r3, #0
 8001570:	db0b      	blt.n	800158a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001572:	79fb      	ldrb	r3, [r7, #7]
 8001574:	f003 021f 	and.w	r2, r3, #31
 8001578:	4907      	ldr	r1, [pc, #28]	; (8001598 <__NVIC_EnableIRQ+0x38>)
 800157a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157e:	095b      	lsrs	r3, r3, #5
 8001580:	2001      	movs	r0, #1
 8001582:	fa00 f202 	lsl.w	r2, r0, r2
 8001586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800158a:	bf00      	nop
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	e000e100 	.word	0xe000e100

0800159c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	6039      	str	r1, [r7, #0]
 80015a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	db0a      	blt.n	80015c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	b2da      	uxtb	r2, r3
 80015b4:	490c      	ldr	r1, [pc, #48]	; (80015e8 <__NVIC_SetPriority+0x4c>)
 80015b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ba:	0112      	lsls	r2, r2, #4
 80015bc:	b2d2      	uxtb	r2, r2
 80015be:	440b      	add	r3, r1
 80015c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015c4:	e00a      	b.n	80015dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	b2da      	uxtb	r2, r3
 80015ca:	4908      	ldr	r1, [pc, #32]	; (80015ec <__NVIC_SetPriority+0x50>)
 80015cc:	79fb      	ldrb	r3, [r7, #7]
 80015ce:	f003 030f 	and.w	r3, r3, #15
 80015d2:	3b04      	subs	r3, #4
 80015d4:	0112      	lsls	r2, r2, #4
 80015d6:	b2d2      	uxtb	r2, r2
 80015d8:	440b      	add	r3, r1
 80015da:	761a      	strb	r2, [r3, #24]
}
 80015dc:	bf00      	nop
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr
 80015e8:	e000e100 	.word	0xe000e100
 80015ec:	e000ed00 	.word	0xe000ed00

080015f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b089      	sub	sp, #36	; 0x24
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	f003 0307 	and.w	r3, r3, #7
 8001602:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	f1c3 0307 	rsb	r3, r3, #7
 800160a:	2b04      	cmp	r3, #4
 800160c:	bf28      	it	cs
 800160e:	2304      	movcs	r3, #4
 8001610:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	3304      	adds	r3, #4
 8001616:	2b06      	cmp	r3, #6
 8001618:	d902      	bls.n	8001620 <NVIC_EncodePriority+0x30>
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	3b03      	subs	r3, #3
 800161e:	e000      	b.n	8001622 <NVIC_EncodePriority+0x32>
 8001620:	2300      	movs	r3, #0
 8001622:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001624:	f04f 32ff 	mov.w	r2, #4294967295
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	fa02 f303 	lsl.w	r3, r2, r3
 800162e:	43da      	mvns	r2, r3
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	401a      	ands	r2, r3
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001638:	f04f 31ff 	mov.w	r1, #4294967295
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	fa01 f303 	lsl.w	r3, r1, r3
 8001642:	43d9      	mvns	r1, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001648:	4313      	orrs	r3, r2
         );
}
 800164a:	4618      	mov	r0, r3
 800164c:	3724      	adds	r7, #36	; 0x24
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
	...

08001658 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	3b01      	subs	r3, #1
 8001664:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001668:	d301      	bcc.n	800166e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800166a:	2301      	movs	r3, #1
 800166c:	e00f      	b.n	800168e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800166e:	4a0a      	ldr	r2, [pc, #40]	; (8001698 <SysTick_Config+0x40>)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	3b01      	subs	r3, #1
 8001674:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001676:	210f      	movs	r1, #15
 8001678:	f04f 30ff 	mov.w	r0, #4294967295
 800167c:	f7ff ff8e 	bl	800159c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001680:	4b05      	ldr	r3, [pc, #20]	; (8001698 <SysTick_Config+0x40>)
 8001682:	2200      	movs	r2, #0
 8001684:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001686:	4b04      	ldr	r3, [pc, #16]	; (8001698 <SysTick_Config+0x40>)
 8001688:	2207      	movs	r2, #7
 800168a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	e000e010 	.word	0xe000e010

0800169c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f7ff ff29 	bl	80014fc <__NVIC_SetPriorityGrouping>
}
 80016aa:	bf00      	nop
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b086      	sub	sp, #24
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	4603      	mov	r3, r0
 80016ba:	60b9      	str	r1, [r7, #8]
 80016bc:	607a      	str	r2, [r7, #4]
 80016be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016c0:	2300      	movs	r3, #0
 80016c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016c4:	f7ff ff3e 	bl	8001544 <__NVIC_GetPriorityGrouping>
 80016c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	68b9      	ldr	r1, [r7, #8]
 80016ce:	6978      	ldr	r0, [r7, #20]
 80016d0:	f7ff ff8e 	bl	80015f0 <NVIC_EncodePriority>
 80016d4:	4602      	mov	r2, r0
 80016d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016da:	4611      	mov	r1, r2
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff ff5d 	bl	800159c <__NVIC_SetPriority>
}
 80016e2:	bf00      	nop
 80016e4:	3718      	adds	r7, #24
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b082      	sub	sp, #8
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	4603      	mov	r3, r0
 80016f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff ff31 	bl	8001560 <__NVIC_EnableIRQ>
}
 80016fe:	bf00      	nop
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	b082      	sub	sp, #8
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f7ff ffa2 	bl	8001658 <SysTick_Config>
 8001714:	4603      	mov	r3, r0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800171e:	b580      	push	{r7, lr}
 8001720:	b084      	sub	sp, #16
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800172a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800172c:	f7ff feda 	bl	80014e4 <HAL_GetTick>
 8001730:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001738:	b2db      	uxtb	r3, r3
 800173a:	2b02      	cmp	r3, #2
 800173c:	d008      	beq.n	8001750 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2280      	movs	r2, #128	; 0x80
 8001742:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2200      	movs	r2, #0
 8001748:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e052      	b.n	80017f6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f022 0216 	bic.w	r2, r2, #22
 800175e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	695a      	ldr	r2, [r3, #20]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800176e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001774:	2b00      	cmp	r3, #0
 8001776:	d103      	bne.n	8001780 <HAL_DMA_Abort+0x62>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800177c:	2b00      	cmp	r3, #0
 800177e:	d007      	beq.n	8001790 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f022 0208 	bic.w	r2, r2, #8
 800178e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f022 0201 	bic.w	r2, r2, #1
 800179e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017a0:	e013      	b.n	80017ca <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017a2:	f7ff fe9f 	bl	80014e4 <HAL_GetTick>
 80017a6:	4602      	mov	r2, r0
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	2b05      	cmp	r3, #5
 80017ae:	d90c      	bls.n	80017ca <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2220      	movs	r2, #32
 80017b4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2203      	movs	r2, #3
 80017ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2200      	movs	r2, #0
 80017c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e015      	b.n	80017f6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0301 	and.w	r3, r3, #1
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d1e4      	bne.n	80017a2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017dc:	223f      	movs	r2, #63	; 0x3f
 80017de:	409a      	lsls	r2, r3
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2201      	movs	r2, #1
 80017e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2200      	movs	r2, #0
 80017f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80017f4:	2300      	movs	r3, #0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3710      	adds	r7, #16
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}

080017fe <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017fe:	b480      	push	{r7}
 8001800:	b083      	sub	sp, #12
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800180c:	b2db      	uxtb	r3, r3
 800180e:	2b02      	cmp	r3, #2
 8001810:	d004      	beq.n	800181c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2280      	movs	r2, #128	; 0x80
 8001816:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e00c      	b.n	8001836 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2205      	movs	r2, #5
 8001820:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f022 0201 	bic.w	r2, r2, #1
 8001832:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001834:	2300      	movs	r3, #0
}
 8001836:	4618      	mov	r0, r3
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
	...

08001844 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001844:	b480      	push	{r7}
 8001846:	b089      	sub	sp, #36	; 0x24
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800184e:	2300      	movs	r3, #0
 8001850:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001852:	2300      	movs	r3, #0
 8001854:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001856:	2300      	movs	r3, #0
 8001858:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800185a:	2300      	movs	r3, #0
 800185c:	61fb      	str	r3, [r7, #28]
 800185e:	e165      	b.n	8001b2c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001860:	2201      	movs	r2, #1
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	697a      	ldr	r2, [r7, #20]
 8001870:	4013      	ands	r3, r2
 8001872:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001874:	693a      	ldr	r2, [r7, #16]
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	429a      	cmp	r2, r3
 800187a:	f040 8154 	bne.w	8001b26 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f003 0303 	and.w	r3, r3, #3
 8001886:	2b01      	cmp	r3, #1
 8001888:	d005      	beq.n	8001896 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001892:	2b02      	cmp	r3, #2
 8001894:	d130      	bne.n	80018f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	2203      	movs	r2, #3
 80018a2:	fa02 f303 	lsl.w	r3, r2, r3
 80018a6:	43db      	mvns	r3, r3
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	4013      	ands	r3, r2
 80018ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	68da      	ldr	r2, [r3, #12]
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	4313      	orrs	r3, r2
 80018be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	69ba      	ldr	r2, [r7, #24]
 80018c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018cc:	2201      	movs	r2, #1
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	43db      	mvns	r3, r3
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	4013      	ands	r3, r2
 80018da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	091b      	lsrs	r3, r3, #4
 80018e2:	f003 0201 	and.w	r2, r3, #1
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f003 0303 	and.w	r3, r3, #3
 8001900:	2b03      	cmp	r3, #3
 8001902:	d017      	beq.n	8001934 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	2203      	movs	r2, #3
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	43db      	mvns	r3, r3
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	4013      	ands	r3, r2
 800191a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	689a      	ldr	r2, [r3, #8]
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	4313      	orrs	r3, r2
 800192c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f003 0303 	and.w	r3, r3, #3
 800193c:	2b02      	cmp	r3, #2
 800193e:	d123      	bne.n	8001988 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	08da      	lsrs	r2, r3, #3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	3208      	adds	r2, #8
 8001948:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800194c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	f003 0307 	and.w	r3, r3, #7
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	220f      	movs	r2, #15
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	43db      	mvns	r3, r3
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	4013      	ands	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	691a      	ldr	r2, [r3, #16]
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	f003 0307 	and.w	r3, r3, #7
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	4313      	orrs	r3, r2
 8001978:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	08da      	lsrs	r2, r3, #3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	3208      	adds	r2, #8
 8001982:	69b9      	ldr	r1, [r7, #24]
 8001984:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	2203      	movs	r2, #3
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	43db      	mvns	r3, r3
 800199a:	69ba      	ldr	r2, [r7, #24]
 800199c:	4013      	ands	r3, r2
 800199e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f003 0203 	and.w	r2, r3, #3
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	f000 80ae 	beq.w	8001b26 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ca:	2300      	movs	r3, #0
 80019cc:	60fb      	str	r3, [r7, #12]
 80019ce:	4b5d      	ldr	r3, [pc, #372]	; (8001b44 <HAL_GPIO_Init+0x300>)
 80019d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d2:	4a5c      	ldr	r2, [pc, #368]	; (8001b44 <HAL_GPIO_Init+0x300>)
 80019d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019d8:	6453      	str	r3, [r2, #68]	; 0x44
 80019da:	4b5a      	ldr	r3, [pc, #360]	; (8001b44 <HAL_GPIO_Init+0x300>)
 80019dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019e2:	60fb      	str	r3, [r7, #12]
 80019e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019e6:	4a58      	ldr	r2, [pc, #352]	; (8001b48 <HAL_GPIO_Init+0x304>)
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	089b      	lsrs	r3, r3, #2
 80019ec:	3302      	adds	r3, #2
 80019ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	f003 0303 	and.w	r3, r3, #3
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	220f      	movs	r2, #15
 80019fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001a02:	43db      	mvns	r3, r3
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	4013      	ands	r3, r2
 8001a08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a4f      	ldr	r2, [pc, #316]	; (8001b4c <HAL_GPIO_Init+0x308>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d025      	beq.n	8001a5e <HAL_GPIO_Init+0x21a>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4a4e      	ldr	r2, [pc, #312]	; (8001b50 <HAL_GPIO_Init+0x30c>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d01f      	beq.n	8001a5a <HAL_GPIO_Init+0x216>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a4d      	ldr	r2, [pc, #308]	; (8001b54 <HAL_GPIO_Init+0x310>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d019      	beq.n	8001a56 <HAL_GPIO_Init+0x212>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a4c      	ldr	r2, [pc, #304]	; (8001b58 <HAL_GPIO_Init+0x314>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d013      	beq.n	8001a52 <HAL_GPIO_Init+0x20e>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4a4b      	ldr	r2, [pc, #300]	; (8001b5c <HAL_GPIO_Init+0x318>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d00d      	beq.n	8001a4e <HAL_GPIO_Init+0x20a>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a4a      	ldr	r2, [pc, #296]	; (8001b60 <HAL_GPIO_Init+0x31c>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d007      	beq.n	8001a4a <HAL_GPIO_Init+0x206>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a49      	ldr	r2, [pc, #292]	; (8001b64 <HAL_GPIO_Init+0x320>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d101      	bne.n	8001a46 <HAL_GPIO_Init+0x202>
 8001a42:	2306      	movs	r3, #6
 8001a44:	e00c      	b.n	8001a60 <HAL_GPIO_Init+0x21c>
 8001a46:	2307      	movs	r3, #7
 8001a48:	e00a      	b.n	8001a60 <HAL_GPIO_Init+0x21c>
 8001a4a:	2305      	movs	r3, #5
 8001a4c:	e008      	b.n	8001a60 <HAL_GPIO_Init+0x21c>
 8001a4e:	2304      	movs	r3, #4
 8001a50:	e006      	b.n	8001a60 <HAL_GPIO_Init+0x21c>
 8001a52:	2303      	movs	r3, #3
 8001a54:	e004      	b.n	8001a60 <HAL_GPIO_Init+0x21c>
 8001a56:	2302      	movs	r3, #2
 8001a58:	e002      	b.n	8001a60 <HAL_GPIO_Init+0x21c>
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e000      	b.n	8001a60 <HAL_GPIO_Init+0x21c>
 8001a5e:	2300      	movs	r3, #0
 8001a60:	69fa      	ldr	r2, [r7, #28]
 8001a62:	f002 0203 	and.w	r2, r2, #3
 8001a66:	0092      	lsls	r2, r2, #2
 8001a68:	4093      	lsls	r3, r2
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a70:	4935      	ldr	r1, [pc, #212]	; (8001b48 <HAL_GPIO_Init+0x304>)
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	089b      	lsrs	r3, r3, #2
 8001a76:	3302      	adds	r3, #2
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a7e:	4b3a      	ldr	r3, [pc, #232]	; (8001b68 <HAL_GPIO_Init+0x324>)
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	43db      	mvns	r3, r3
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d003      	beq.n	8001aa2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001aa2:	4a31      	ldr	r2, [pc, #196]	; (8001b68 <HAL_GPIO_Init+0x324>)
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001aa8:	4b2f      	ldr	r3, [pc, #188]	; (8001b68 <HAL_GPIO_Init+0x324>)
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d003      	beq.n	8001acc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001acc:	4a26      	ldr	r2, [pc, #152]	; (8001b68 <HAL_GPIO_Init+0x324>)
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ad2:	4b25      	ldr	r3, [pc, #148]	; (8001b68 <HAL_GPIO_Init+0x324>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	43db      	mvns	r3, r3
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d003      	beq.n	8001af6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001af6:	4a1c      	ldr	r2, [pc, #112]	; (8001b68 <HAL_GPIO_Init+0x324>)
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001afc:	4b1a      	ldr	r3, [pc, #104]	; (8001b68 <HAL_GPIO_Init+0x324>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	43db      	mvns	r3, r3
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d003      	beq.n	8001b20 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b20:	4a11      	ldr	r2, [pc, #68]	; (8001b68 <HAL_GPIO_Init+0x324>)
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	3301      	adds	r3, #1
 8001b2a:	61fb      	str	r3, [r7, #28]
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	2b0f      	cmp	r3, #15
 8001b30:	f67f ae96 	bls.w	8001860 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b34:	bf00      	nop
 8001b36:	bf00      	nop
 8001b38:	3724      	adds	r7, #36	; 0x24
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	40023800 	.word	0x40023800
 8001b48:	40013800 	.word	0x40013800
 8001b4c:	40020000 	.word	0x40020000
 8001b50:	40020400 	.word	0x40020400
 8001b54:	40020800 	.word	0x40020800
 8001b58:	40020c00 	.word	0x40020c00
 8001b5c:	40021000 	.word	0x40021000
 8001b60:	40021400 	.word	0x40021400
 8001b64:	40021800 	.word	0x40021800
 8001b68:	40013c00 	.word	0x40013c00

08001b6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	460b      	mov	r3, r1
 8001b76:	807b      	strh	r3, [r7, #2]
 8001b78:	4613      	mov	r3, r2
 8001b7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b7c:	787b      	ldrb	r3, [r7, #1]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d003      	beq.n	8001b8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b82:	887a      	ldrh	r2, [r7, #2]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b88:	e003      	b.n	8001b92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b8a:	887b      	ldrh	r3, [r7, #2]
 8001b8c:	041a      	lsls	r2, r3, #16
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	619a      	str	r2, [r3, #24]
}
 8001b92:	bf00      	nop
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr

08001b9e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	b085      	sub	sp, #20
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	695b      	ldr	r3, [r3, #20]
 8001bae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001bb0:	887a      	ldrh	r2, [r7, #2]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	041a      	lsls	r2, r3, #16
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	43d9      	mvns	r1, r3
 8001bbc:	887b      	ldrh	r3, [r7, #2]
 8001bbe:	400b      	ands	r3, r1
 8001bc0:	431a      	orrs	r2, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	619a      	str	r2, [r3, #24]
}
 8001bc6:	bf00      	nop
 8001bc8:	3714      	adds	r7, #20
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
	...

08001bd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d101      	bne.n	8001be8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e0cc      	b.n	8001d82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001be8:	4b68      	ldr	r3, [pc, #416]	; (8001d8c <HAL_RCC_ClockConfig+0x1b8>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 030f 	and.w	r3, r3, #15
 8001bf0:	683a      	ldr	r2, [r7, #0]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d90c      	bls.n	8001c10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bf6:	4b65      	ldr	r3, [pc, #404]	; (8001d8c <HAL_RCC_ClockConfig+0x1b8>)
 8001bf8:	683a      	ldr	r2, [r7, #0]
 8001bfa:	b2d2      	uxtb	r2, r2
 8001bfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bfe:	4b63      	ldr	r3, [pc, #396]	; (8001d8c <HAL_RCC_ClockConfig+0x1b8>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 030f 	and.w	r3, r3, #15
 8001c06:	683a      	ldr	r2, [r7, #0]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d001      	beq.n	8001c10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e0b8      	b.n	8001d82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0302 	and.w	r3, r3, #2
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d020      	beq.n	8001c5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0304 	and.w	r3, r3, #4
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d005      	beq.n	8001c34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c28:	4b59      	ldr	r3, [pc, #356]	; (8001d90 <HAL_RCC_ClockConfig+0x1bc>)
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	4a58      	ldr	r2, [pc, #352]	; (8001d90 <HAL_RCC_ClockConfig+0x1bc>)
 8001c2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c32:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0308 	and.w	r3, r3, #8
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d005      	beq.n	8001c4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c40:	4b53      	ldr	r3, [pc, #332]	; (8001d90 <HAL_RCC_ClockConfig+0x1bc>)
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	4a52      	ldr	r2, [pc, #328]	; (8001d90 <HAL_RCC_ClockConfig+0x1bc>)
 8001c46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c4c:	4b50      	ldr	r3, [pc, #320]	; (8001d90 <HAL_RCC_ClockConfig+0x1bc>)
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	494d      	ldr	r1, [pc, #308]	; (8001d90 <HAL_RCC_ClockConfig+0x1bc>)
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d044      	beq.n	8001cf4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d107      	bne.n	8001c82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c72:	4b47      	ldr	r3, [pc, #284]	; (8001d90 <HAL_RCC_ClockConfig+0x1bc>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d119      	bne.n	8001cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e07f      	b.n	8001d82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d003      	beq.n	8001c92 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c8e:	2b03      	cmp	r3, #3
 8001c90:	d107      	bne.n	8001ca2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c92:	4b3f      	ldr	r3, [pc, #252]	; (8001d90 <HAL_RCC_ClockConfig+0x1bc>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d109      	bne.n	8001cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e06f      	b.n	8001d82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ca2:	4b3b      	ldr	r3, [pc, #236]	; (8001d90 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d101      	bne.n	8001cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e067      	b.n	8001d82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cb2:	4b37      	ldr	r3, [pc, #220]	; (8001d90 <HAL_RCC_ClockConfig+0x1bc>)
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f023 0203 	bic.w	r2, r3, #3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	4934      	ldr	r1, [pc, #208]	; (8001d90 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cc4:	f7ff fc0e 	bl	80014e4 <HAL_GetTick>
 8001cc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cca:	e00a      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ccc:	f7ff fc0a 	bl	80014e4 <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e04f      	b.n	8001d82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ce2:	4b2b      	ldr	r3, [pc, #172]	; (8001d90 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	f003 020c 	and.w	r2, r3, #12
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d1eb      	bne.n	8001ccc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cf4:	4b25      	ldr	r3, [pc, #148]	; (8001d8c <HAL_RCC_ClockConfig+0x1b8>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 030f 	and.w	r3, r3, #15
 8001cfc:	683a      	ldr	r2, [r7, #0]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d20c      	bcs.n	8001d1c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d02:	4b22      	ldr	r3, [pc, #136]	; (8001d8c <HAL_RCC_ClockConfig+0x1b8>)
 8001d04:	683a      	ldr	r2, [r7, #0]
 8001d06:	b2d2      	uxtb	r2, r2
 8001d08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d0a:	4b20      	ldr	r3, [pc, #128]	; (8001d8c <HAL_RCC_ClockConfig+0x1b8>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 030f 	and.w	r3, r3, #15
 8001d12:	683a      	ldr	r2, [r7, #0]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d001      	beq.n	8001d1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e032      	b.n	8001d82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0304 	and.w	r3, r3, #4
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d008      	beq.n	8001d3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d28:	4b19      	ldr	r3, [pc, #100]	; (8001d90 <HAL_RCC_ClockConfig+0x1bc>)
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	4916      	ldr	r1, [pc, #88]	; (8001d90 <HAL_RCC_ClockConfig+0x1bc>)
 8001d36:	4313      	orrs	r3, r2
 8001d38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0308 	and.w	r3, r3, #8
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d009      	beq.n	8001d5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d46:	4b12      	ldr	r3, [pc, #72]	; (8001d90 <HAL_RCC_ClockConfig+0x1bc>)
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	691b      	ldr	r3, [r3, #16]
 8001d52:	00db      	lsls	r3, r3, #3
 8001d54:	490e      	ldr	r1, [pc, #56]	; (8001d90 <HAL_RCC_ClockConfig+0x1bc>)
 8001d56:	4313      	orrs	r3, r2
 8001d58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d5a:	f000 f855 	bl	8001e08 <HAL_RCC_GetSysClockFreq>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	4b0b      	ldr	r3, [pc, #44]	; (8001d90 <HAL_RCC_ClockConfig+0x1bc>)
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	091b      	lsrs	r3, r3, #4
 8001d66:	f003 030f 	and.w	r3, r3, #15
 8001d6a:	490a      	ldr	r1, [pc, #40]	; (8001d94 <HAL_RCC_ClockConfig+0x1c0>)
 8001d6c:	5ccb      	ldrb	r3, [r1, r3]
 8001d6e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d72:	4a09      	ldr	r2, [pc, #36]	; (8001d98 <HAL_RCC_ClockConfig+0x1c4>)
 8001d74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d76:	4b09      	ldr	r3, [pc, #36]	; (8001d9c <HAL_RCC_ClockConfig+0x1c8>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7ff fb6e 	bl	800145c <HAL_InitTick>

  return HAL_OK;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3710      	adds	r7, #16
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	40023c00 	.word	0x40023c00
 8001d90:	40023800 	.word	0x40023800
 8001d94:	080056ec 	.word	0x080056ec
 8001d98:	20000000 	.word	0x20000000
 8001d9c:	20000004 	.word	0x20000004

08001da0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001da4:	4b03      	ldr	r3, [pc, #12]	; (8001db4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001da6:	681b      	ldr	r3, [r3, #0]
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	20000000 	.word	0x20000000

08001db8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001dbc:	f7ff fff0 	bl	8001da0 <HAL_RCC_GetHCLKFreq>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	4b05      	ldr	r3, [pc, #20]	; (8001dd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	0a9b      	lsrs	r3, r3, #10
 8001dc8:	f003 0307 	and.w	r3, r3, #7
 8001dcc:	4903      	ldr	r1, [pc, #12]	; (8001ddc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dce:	5ccb      	ldrb	r3, [r1, r3]
 8001dd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	40023800 	.word	0x40023800
 8001ddc:	080056fc 	.word	0x080056fc

08001de0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001de4:	f7ff ffdc 	bl	8001da0 <HAL_RCC_GetHCLKFreq>
 8001de8:	4602      	mov	r2, r0
 8001dea:	4b05      	ldr	r3, [pc, #20]	; (8001e00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	0b5b      	lsrs	r3, r3, #13
 8001df0:	f003 0307 	and.w	r3, r3, #7
 8001df4:	4903      	ldr	r1, [pc, #12]	; (8001e04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001df6:	5ccb      	ldrb	r3, [r1, r3]
 8001df8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	40023800 	.word	0x40023800
 8001e04:	080056fc 	.word	0x080056fc

08001e08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e0c:	b0ae      	sub	sp, #184	; 0xb8
 8001e0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001e10:	2300      	movs	r3, #0
 8001e12:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001e16:	2300      	movs	r3, #0
 8001e18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001e22:	2300      	movs	r3, #0
 8001e24:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e2e:	4bcb      	ldr	r3, [pc, #812]	; (800215c <HAL_RCC_GetSysClockFreq+0x354>)
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	f003 030c 	and.w	r3, r3, #12
 8001e36:	2b0c      	cmp	r3, #12
 8001e38:	f200 8206 	bhi.w	8002248 <HAL_RCC_GetSysClockFreq+0x440>
 8001e3c:	a201      	add	r2, pc, #4	; (adr r2, 8001e44 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e42:	bf00      	nop
 8001e44:	08001e79 	.word	0x08001e79
 8001e48:	08002249 	.word	0x08002249
 8001e4c:	08002249 	.word	0x08002249
 8001e50:	08002249 	.word	0x08002249
 8001e54:	08001e81 	.word	0x08001e81
 8001e58:	08002249 	.word	0x08002249
 8001e5c:	08002249 	.word	0x08002249
 8001e60:	08002249 	.word	0x08002249
 8001e64:	08001e89 	.word	0x08001e89
 8001e68:	08002249 	.word	0x08002249
 8001e6c:	08002249 	.word	0x08002249
 8001e70:	08002249 	.word	0x08002249
 8001e74:	08002079 	.word	0x08002079
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e78:	4bb9      	ldr	r3, [pc, #740]	; (8002160 <HAL_RCC_GetSysClockFreq+0x358>)
 8001e7a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001e7e:	e1e7      	b.n	8002250 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e80:	4bb8      	ldr	r3, [pc, #736]	; (8002164 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001e82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001e86:	e1e3      	b.n	8002250 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e88:	4bb4      	ldr	r3, [pc, #720]	; (800215c <HAL_RCC_GetSysClockFreq+0x354>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e94:	4bb1      	ldr	r3, [pc, #708]	; (800215c <HAL_RCC_GetSysClockFreq+0x354>)
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d071      	beq.n	8001f84 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ea0:	4bae      	ldr	r3, [pc, #696]	; (800215c <HAL_RCC_GetSysClockFreq+0x354>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	099b      	lsrs	r3, r3, #6
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001eac:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001eb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001eb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001eb8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001ec2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001ec6:	4622      	mov	r2, r4
 8001ec8:	462b      	mov	r3, r5
 8001eca:	f04f 0000 	mov.w	r0, #0
 8001ece:	f04f 0100 	mov.w	r1, #0
 8001ed2:	0159      	lsls	r1, r3, #5
 8001ed4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ed8:	0150      	lsls	r0, r2, #5
 8001eda:	4602      	mov	r2, r0
 8001edc:	460b      	mov	r3, r1
 8001ede:	4621      	mov	r1, r4
 8001ee0:	1a51      	subs	r1, r2, r1
 8001ee2:	6439      	str	r1, [r7, #64]	; 0x40
 8001ee4:	4629      	mov	r1, r5
 8001ee6:	eb63 0301 	sbc.w	r3, r3, r1
 8001eea:	647b      	str	r3, [r7, #68]	; 0x44
 8001eec:	f04f 0200 	mov.w	r2, #0
 8001ef0:	f04f 0300 	mov.w	r3, #0
 8001ef4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001ef8:	4649      	mov	r1, r9
 8001efa:	018b      	lsls	r3, r1, #6
 8001efc:	4641      	mov	r1, r8
 8001efe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f02:	4641      	mov	r1, r8
 8001f04:	018a      	lsls	r2, r1, #6
 8001f06:	4641      	mov	r1, r8
 8001f08:	1a51      	subs	r1, r2, r1
 8001f0a:	63b9      	str	r1, [r7, #56]	; 0x38
 8001f0c:	4649      	mov	r1, r9
 8001f0e:	eb63 0301 	sbc.w	r3, r3, r1
 8001f12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f14:	f04f 0200 	mov.w	r2, #0
 8001f18:	f04f 0300 	mov.w	r3, #0
 8001f1c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001f20:	4649      	mov	r1, r9
 8001f22:	00cb      	lsls	r3, r1, #3
 8001f24:	4641      	mov	r1, r8
 8001f26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001f2a:	4641      	mov	r1, r8
 8001f2c:	00ca      	lsls	r2, r1, #3
 8001f2e:	4610      	mov	r0, r2
 8001f30:	4619      	mov	r1, r3
 8001f32:	4603      	mov	r3, r0
 8001f34:	4622      	mov	r2, r4
 8001f36:	189b      	adds	r3, r3, r2
 8001f38:	633b      	str	r3, [r7, #48]	; 0x30
 8001f3a:	462b      	mov	r3, r5
 8001f3c:	460a      	mov	r2, r1
 8001f3e:	eb42 0303 	adc.w	r3, r2, r3
 8001f42:	637b      	str	r3, [r7, #52]	; 0x34
 8001f44:	f04f 0200 	mov.w	r2, #0
 8001f48:	f04f 0300 	mov.w	r3, #0
 8001f4c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001f50:	4629      	mov	r1, r5
 8001f52:	024b      	lsls	r3, r1, #9
 8001f54:	4621      	mov	r1, r4
 8001f56:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001f5a:	4621      	mov	r1, r4
 8001f5c:	024a      	lsls	r2, r1, #9
 8001f5e:	4610      	mov	r0, r2
 8001f60:	4619      	mov	r1, r3
 8001f62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001f66:	2200      	movs	r2, #0
 8001f68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001f6c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001f70:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001f74:	f7fe f9b4 	bl	80002e0 <__aeabi_uldivmod>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001f82:	e067      	b.n	8002054 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f84:	4b75      	ldr	r3, [pc, #468]	; (800215c <HAL_RCC_GetSysClockFreq+0x354>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	099b      	lsrs	r3, r3, #6
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001f90:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001f94:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001f98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f9c:	67bb      	str	r3, [r7, #120]	; 0x78
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001fa2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001fa6:	4622      	mov	r2, r4
 8001fa8:	462b      	mov	r3, r5
 8001faa:	f04f 0000 	mov.w	r0, #0
 8001fae:	f04f 0100 	mov.w	r1, #0
 8001fb2:	0159      	lsls	r1, r3, #5
 8001fb4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fb8:	0150      	lsls	r0, r2, #5
 8001fba:	4602      	mov	r2, r0
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	4621      	mov	r1, r4
 8001fc0:	1a51      	subs	r1, r2, r1
 8001fc2:	62b9      	str	r1, [r7, #40]	; 0x28
 8001fc4:	4629      	mov	r1, r5
 8001fc6:	eb63 0301 	sbc.w	r3, r3, r1
 8001fca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fcc:	f04f 0200 	mov.w	r2, #0
 8001fd0:	f04f 0300 	mov.w	r3, #0
 8001fd4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001fd8:	4649      	mov	r1, r9
 8001fda:	018b      	lsls	r3, r1, #6
 8001fdc:	4641      	mov	r1, r8
 8001fde:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001fe2:	4641      	mov	r1, r8
 8001fe4:	018a      	lsls	r2, r1, #6
 8001fe6:	4641      	mov	r1, r8
 8001fe8:	ebb2 0a01 	subs.w	sl, r2, r1
 8001fec:	4649      	mov	r1, r9
 8001fee:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ff2:	f04f 0200 	mov.w	r2, #0
 8001ff6:	f04f 0300 	mov.w	r3, #0
 8001ffa:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001ffe:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002002:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002006:	4692      	mov	sl, r2
 8002008:	469b      	mov	fp, r3
 800200a:	4623      	mov	r3, r4
 800200c:	eb1a 0303 	adds.w	r3, sl, r3
 8002010:	623b      	str	r3, [r7, #32]
 8002012:	462b      	mov	r3, r5
 8002014:	eb4b 0303 	adc.w	r3, fp, r3
 8002018:	627b      	str	r3, [r7, #36]	; 0x24
 800201a:	f04f 0200 	mov.w	r2, #0
 800201e:	f04f 0300 	mov.w	r3, #0
 8002022:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002026:	4629      	mov	r1, r5
 8002028:	028b      	lsls	r3, r1, #10
 800202a:	4621      	mov	r1, r4
 800202c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002030:	4621      	mov	r1, r4
 8002032:	028a      	lsls	r2, r1, #10
 8002034:	4610      	mov	r0, r2
 8002036:	4619      	mov	r1, r3
 8002038:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800203c:	2200      	movs	r2, #0
 800203e:	673b      	str	r3, [r7, #112]	; 0x70
 8002040:	677a      	str	r2, [r7, #116]	; 0x74
 8002042:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002046:	f7fe f94b 	bl	80002e0 <__aeabi_uldivmod>
 800204a:	4602      	mov	r2, r0
 800204c:	460b      	mov	r3, r1
 800204e:	4613      	mov	r3, r2
 8002050:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002054:	4b41      	ldr	r3, [pc, #260]	; (800215c <HAL_RCC_GetSysClockFreq+0x354>)
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	0c1b      	lsrs	r3, r3, #16
 800205a:	f003 0303 	and.w	r3, r3, #3
 800205e:	3301      	adds	r3, #1
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002066:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800206a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800206e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002072:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002076:	e0eb      	b.n	8002250 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002078:	4b38      	ldr	r3, [pc, #224]	; (800215c <HAL_RCC_GetSysClockFreq+0x354>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002080:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002084:	4b35      	ldr	r3, [pc, #212]	; (800215c <HAL_RCC_GetSysClockFreq+0x354>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d06b      	beq.n	8002168 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002090:	4b32      	ldr	r3, [pc, #200]	; (800215c <HAL_RCC_GetSysClockFreq+0x354>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	099b      	lsrs	r3, r3, #6
 8002096:	2200      	movs	r2, #0
 8002098:	66bb      	str	r3, [r7, #104]	; 0x68
 800209a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800209c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800209e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020a2:	663b      	str	r3, [r7, #96]	; 0x60
 80020a4:	2300      	movs	r3, #0
 80020a6:	667b      	str	r3, [r7, #100]	; 0x64
 80020a8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80020ac:	4622      	mov	r2, r4
 80020ae:	462b      	mov	r3, r5
 80020b0:	f04f 0000 	mov.w	r0, #0
 80020b4:	f04f 0100 	mov.w	r1, #0
 80020b8:	0159      	lsls	r1, r3, #5
 80020ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020be:	0150      	lsls	r0, r2, #5
 80020c0:	4602      	mov	r2, r0
 80020c2:	460b      	mov	r3, r1
 80020c4:	4621      	mov	r1, r4
 80020c6:	1a51      	subs	r1, r2, r1
 80020c8:	61b9      	str	r1, [r7, #24]
 80020ca:	4629      	mov	r1, r5
 80020cc:	eb63 0301 	sbc.w	r3, r3, r1
 80020d0:	61fb      	str	r3, [r7, #28]
 80020d2:	f04f 0200 	mov.w	r2, #0
 80020d6:	f04f 0300 	mov.w	r3, #0
 80020da:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80020de:	4659      	mov	r1, fp
 80020e0:	018b      	lsls	r3, r1, #6
 80020e2:	4651      	mov	r1, sl
 80020e4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80020e8:	4651      	mov	r1, sl
 80020ea:	018a      	lsls	r2, r1, #6
 80020ec:	4651      	mov	r1, sl
 80020ee:	ebb2 0801 	subs.w	r8, r2, r1
 80020f2:	4659      	mov	r1, fp
 80020f4:	eb63 0901 	sbc.w	r9, r3, r1
 80020f8:	f04f 0200 	mov.w	r2, #0
 80020fc:	f04f 0300 	mov.w	r3, #0
 8002100:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002104:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002108:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800210c:	4690      	mov	r8, r2
 800210e:	4699      	mov	r9, r3
 8002110:	4623      	mov	r3, r4
 8002112:	eb18 0303 	adds.w	r3, r8, r3
 8002116:	613b      	str	r3, [r7, #16]
 8002118:	462b      	mov	r3, r5
 800211a:	eb49 0303 	adc.w	r3, r9, r3
 800211e:	617b      	str	r3, [r7, #20]
 8002120:	f04f 0200 	mov.w	r2, #0
 8002124:	f04f 0300 	mov.w	r3, #0
 8002128:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800212c:	4629      	mov	r1, r5
 800212e:	024b      	lsls	r3, r1, #9
 8002130:	4621      	mov	r1, r4
 8002132:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002136:	4621      	mov	r1, r4
 8002138:	024a      	lsls	r2, r1, #9
 800213a:	4610      	mov	r0, r2
 800213c:	4619      	mov	r1, r3
 800213e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002142:	2200      	movs	r2, #0
 8002144:	65bb      	str	r3, [r7, #88]	; 0x58
 8002146:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002148:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800214c:	f7fe f8c8 	bl	80002e0 <__aeabi_uldivmod>
 8002150:	4602      	mov	r2, r0
 8002152:	460b      	mov	r3, r1
 8002154:	4613      	mov	r3, r2
 8002156:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800215a:	e065      	b.n	8002228 <HAL_RCC_GetSysClockFreq+0x420>
 800215c:	40023800 	.word	0x40023800
 8002160:	00f42400 	.word	0x00f42400
 8002164:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002168:	4b3d      	ldr	r3, [pc, #244]	; (8002260 <HAL_RCC_GetSysClockFreq+0x458>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	099b      	lsrs	r3, r3, #6
 800216e:	2200      	movs	r2, #0
 8002170:	4618      	mov	r0, r3
 8002172:	4611      	mov	r1, r2
 8002174:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002178:	653b      	str	r3, [r7, #80]	; 0x50
 800217a:	2300      	movs	r3, #0
 800217c:	657b      	str	r3, [r7, #84]	; 0x54
 800217e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002182:	4642      	mov	r2, r8
 8002184:	464b      	mov	r3, r9
 8002186:	f04f 0000 	mov.w	r0, #0
 800218a:	f04f 0100 	mov.w	r1, #0
 800218e:	0159      	lsls	r1, r3, #5
 8002190:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002194:	0150      	lsls	r0, r2, #5
 8002196:	4602      	mov	r2, r0
 8002198:	460b      	mov	r3, r1
 800219a:	4641      	mov	r1, r8
 800219c:	1a51      	subs	r1, r2, r1
 800219e:	60b9      	str	r1, [r7, #8]
 80021a0:	4649      	mov	r1, r9
 80021a2:	eb63 0301 	sbc.w	r3, r3, r1
 80021a6:	60fb      	str	r3, [r7, #12]
 80021a8:	f04f 0200 	mov.w	r2, #0
 80021ac:	f04f 0300 	mov.w	r3, #0
 80021b0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80021b4:	4659      	mov	r1, fp
 80021b6:	018b      	lsls	r3, r1, #6
 80021b8:	4651      	mov	r1, sl
 80021ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80021be:	4651      	mov	r1, sl
 80021c0:	018a      	lsls	r2, r1, #6
 80021c2:	4651      	mov	r1, sl
 80021c4:	1a54      	subs	r4, r2, r1
 80021c6:	4659      	mov	r1, fp
 80021c8:	eb63 0501 	sbc.w	r5, r3, r1
 80021cc:	f04f 0200 	mov.w	r2, #0
 80021d0:	f04f 0300 	mov.w	r3, #0
 80021d4:	00eb      	lsls	r3, r5, #3
 80021d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021da:	00e2      	lsls	r2, r4, #3
 80021dc:	4614      	mov	r4, r2
 80021de:	461d      	mov	r5, r3
 80021e0:	4643      	mov	r3, r8
 80021e2:	18e3      	adds	r3, r4, r3
 80021e4:	603b      	str	r3, [r7, #0]
 80021e6:	464b      	mov	r3, r9
 80021e8:	eb45 0303 	adc.w	r3, r5, r3
 80021ec:	607b      	str	r3, [r7, #4]
 80021ee:	f04f 0200 	mov.w	r2, #0
 80021f2:	f04f 0300 	mov.w	r3, #0
 80021f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80021fa:	4629      	mov	r1, r5
 80021fc:	028b      	lsls	r3, r1, #10
 80021fe:	4621      	mov	r1, r4
 8002200:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002204:	4621      	mov	r1, r4
 8002206:	028a      	lsls	r2, r1, #10
 8002208:	4610      	mov	r0, r2
 800220a:	4619      	mov	r1, r3
 800220c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002210:	2200      	movs	r2, #0
 8002212:	64bb      	str	r3, [r7, #72]	; 0x48
 8002214:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002216:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800221a:	f7fe f861 	bl	80002e0 <__aeabi_uldivmod>
 800221e:	4602      	mov	r2, r0
 8002220:	460b      	mov	r3, r1
 8002222:	4613      	mov	r3, r2
 8002224:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002228:	4b0d      	ldr	r3, [pc, #52]	; (8002260 <HAL_RCC_GetSysClockFreq+0x458>)
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	0f1b      	lsrs	r3, r3, #28
 800222e:	f003 0307 	and.w	r3, r3, #7
 8002232:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002236:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800223a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800223e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002242:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002246:	e003      	b.n	8002250 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002248:	4b06      	ldr	r3, [pc, #24]	; (8002264 <HAL_RCC_GetSysClockFreq+0x45c>)
 800224a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800224e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002250:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002254:	4618      	mov	r0, r3
 8002256:	37b8      	adds	r7, #184	; 0xb8
 8002258:	46bd      	mov	sp, r7
 800225a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800225e:	bf00      	nop
 8002260:	40023800 	.word	0x40023800
 8002264:	00f42400 	.word	0x00f42400

08002268 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b086      	sub	sp, #24
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d101      	bne.n	800227a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e28d      	b.n	8002796 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	2b00      	cmp	r3, #0
 8002284:	f000 8083 	beq.w	800238e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002288:	4b94      	ldr	r3, [pc, #592]	; (80024dc <HAL_RCC_OscConfig+0x274>)
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f003 030c 	and.w	r3, r3, #12
 8002290:	2b04      	cmp	r3, #4
 8002292:	d019      	beq.n	80022c8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002294:	4b91      	ldr	r3, [pc, #580]	; (80024dc <HAL_RCC_OscConfig+0x274>)
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800229c:	2b08      	cmp	r3, #8
 800229e:	d106      	bne.n	80022ae <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80022a0:	4b8e      	ldr	r3, [pc, #568]	; (80024dc <HAL_RCC_OscConfig+0x274>)
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022ac:	d00c      	beq.n	80022c8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022ae:	4b8b      	ldr	r3, [pc, #556]	; (80024dc <HAL_RCC_OscConfig+0x274>)
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80022b6:	2b0c      	cmp	r3, #12
 80022b8:	d112      	bne.n	80022e0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022ba:	4b88      	ldr	r3, [pc, #544]	; (80024dc <HAL_RCC_OscConfig+0x274>)
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022c6:	d10b      	bne.n	80022e0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022c8:	4b84      	ldr	r3, [pc, #528]	; (80024dc <HAL_RCC_OscConfig+0x274>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d05b      	beq.n	800238c <HAL_RCC_OscConfig+0x124>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d157      	bne.n	800238c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e25a      	b.n	8002796 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022e8:	d106      	bne.n	80022f8 <HAL_RCC_OscConfig+0x90>
 80022ea:	4b7c      	ldr	r3, [pc, #496]	; (80024dc <HAL_RCC_OscConfig+0x274>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a7b      	ldr	r2, [pc, #492]	; (80024dc <HAL_RCC_OscConfig+0x274>)
 80022f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022f4:	6013      	str	r3, [r2, #0]
 80022f6:	e01d      	b.n	8002334 <HAL_RCC_OscConfig+0xcc>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002300:	d10c      	bne.n	800231c <HAL_RCC_OscConfig+0xb4>
 8002302:	4b76      	ldr	r3, [pc, #472]	; (80024dc <HAL_RCC_OscConfig+0x274>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a75      	ldr	r2, [pc, #468]	; (80024dc <HAL_RCC_OscConfig+0x274>)
 8002308:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800230c:	6013      	str	r3, [r2, #0]
 800230e:	4b73      	ldr	r3, [pc, #460]	; (80024dc <HAL_RCC_OscConfig+0x274>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a72      	ldr	r2, [pc, #456]	; (80024dc <HAL_RCC_OscConfig+0x274>)
 8002314:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002318:	6013      	str	r3, [r2, #0]
 800231a:	e00b      	b.n	8002334 <HAL_RCC_OscConfig+0xcc>
 800231c:	4b6f      	ldr	r3, [pc, #444]	; (80024dc <HAL_RCC_OscConfig+0x274>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a6e      	ldr	r2, [pc, #440]	; (80024dc <HAL_RCC_OscConfig+0x274>)
 8002322:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002326:	6013      	str	r3, [r2, #0]
 8002328:	4b6c      	ldr	r3, [pc, #432]	; (80024dc <HAL_RCC_OscConfig+0x274>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a6b      	ldr	r2, [pc, #428]	; (80024dc <HAL_RCC_OscConfig+0x274>)
 800232e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002332:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d013      	beq.n	8002364 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800233c:	f7ff f8d2 	bl	80014e4 <HAL_GetTick>
 8002340:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002342:	e008      	b.n	8002356 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002344:	f7ff f8ce 	bl	80014e4 <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	2b64      	cmp	r3, #100	; 0x64
 8002350:	d901      	bls.n	8002356 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e21f      	b.n	8002796 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002356:	4b61      	ldr	r3, [pc, #388]	; (80024dc <HAL_RCC_OscConfig+0x274>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d0f0      	beq.n	8002344 <HAL_RCC_OscConfig+0xdc>
 8002362:	e014      	b.n	800238e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002364:	f7ff f8be 	bl	80014e4 <HAL_GetTick>
 8002368:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800236a:	e008      	b.n	800237e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800236c:	f7ff f8ba 	bl	80014e4 <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	2b64      	cmp	r3, #100	; 0x64
 8002378:	d901      	bls.n	800237e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e20b      	b.n	8002796 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800237e:	4b57      	ldr	r3, [pc, #348]	; (80024dc <HAL_RCC_OscConfig+0x274>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d1f0      	bne.n	800236c <HAL_RCC_OscConfig+0x104>
 800238a:	e000      	b.n	800238e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800238c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0302 	and.w	r3, r3, #2
 8002396:	2b00      	cmp	r3, #0
 8002398:	d06f      	beq.n	800247a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800239a:	4b50      	ldr	r3, [pc, #320]	; (80024dc <HAL_RCC_OscConfig+0x274>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f003 030c 	and.w	r3, r3, #12
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d017      	beq.n	80023d6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80023a6:	4b4d      	ldr	r3, [pc, #308]	; (80024dc <HAL_RCC_OscConfig+0x274>)
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80023ae:	2b08      	cmp	r3, #8
 80023b0:	d105      	bne.n	80023be <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80023b2:	4b4a      	ldr	r3, [pc, #296]	; (80024dc <HAL_RCC_OscConfig+0x274>)
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d00b      	beq.n	80023d6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023be:	4b47      	ldr	r3, [pc, #284]	; (80024dc <HAL_RCC_OscConfig+0x274>)
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80023c6:	2b0c      	cmp	r3, #12
 80023c8:	d11c      	bne.n	8002404 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023ca:	4b44      	ldr	r3, [pc, #272]	; (80024dc <HAL_RCC_OscConfig+0x274>)
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d116      	bne.n	8002404 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023d6:	4b41      	ldr	r3, [pc, #260]	; (80024dc <HAL_RCC_OscConfig+0x274>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0302 	and.w	r3, r3, #2
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d005      	beq.n	80023ee <HAL_RCC_OscConfig+0x186>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d001      	beq.n	80023ee <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e1d3      	b.n	8002796 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ee:	4b3b      	ldr	r3, [pc, #236]	; (80024dc <HAL_RCC_OscConfig+0x274>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	4937      	ldr	r1, [pc, #220]	; (80024dc <HAL_RCC_OscConfig+0x274>)
 80023fe:	4313      	orrs	r3, r2
 8002400:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002402:	e03a      	b.n	800247a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d020      	beq.n	800244e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800240c:	4b34      	ldr	r3, [pc, #208]	; (80024e0 <HAL_RCC_OscConfig+0x278>)
 800240e:	2201      	movs	r2, #1
 8002410:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002412:	f7ff f867 	bl	80014e4 <HAL_GetTick>
 8002416:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002418:	e008      	b.n	800242c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800241a:	f7ff f863 	bl	80014e4 <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	2b02      	cmp	r3, #2
 8002426:	d901      	bls.n	800242c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002428:	2303      	movs	r3, #3
 800242a:	e1b4      	b.n	8002796 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800242c:	4b2b      	ldr	r3, [pc, #172]	; (80024dc <HAL_RCC_OscConfig+0x274>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0302 	and.w	r3, r3, #2
 8002434:	2b00      	cmp	r3, #0
 8002436:	d0f0      	beq.n	800241a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002438:	4b28      	ldr	r3, [pc, #160]	; (80024dc <HAL_RCC_OscConfig+0x274>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	691b      	ldr	r3, [r3, #16]
 8002444:	00db      	lsls	r3, r3, #3
 8002446:	4925      	ldr	r1, [pc, #148]	; (80024dc <HAL_RCC_OscConfig+0x274>)
 8002448:	4313      	orrs	r3, r2
 800244a:	600b      	str	r3, [r1, #0]
 800244c:	e015      	b.n	800247a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800244e:	4b24      	ldr	r3, [pc, #144]	; (80024e0 <HAL_RCC_OscConfig+0x278>)
 8002450:	2200      	movs	r2, #0
 8002452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002454:	f7ff f846 	bl	80014e4 <HAL_GetTick>
 8002458:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800245a:	e008      	b.n	800246e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800245c:	f7ff f842 	bl	80014e4 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	2b02      	cmp	r3, #2
 8002468:	d901      	bls.n	800246e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e193      	b.n	8002796 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800246e:	4b1b      	ldr	r3, [pc, #108]	; (80024dc <HAL_RCC_OscConfig+0x274>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	2b00      	cmp	r3, #0
 8002478:	d1f0      	bne.n	800245c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0308 	and.w	r3, r3, #8
 8002482:	2b00      	cmp	r3, #0
 8002484:	d036      	beq.n	80024f4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	695b      	ldr	r3, [r3, #20]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d016      	beq.n	80024bc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800248e:	4b15      	ldr	r3, [pc, #84]	; (80024e4 <HAL_RCC_OscConfig+0x27c>)
 8002490:	2201      	movs	r2, #1
 8002492:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002494:	f7ff f826 	bl	80014e4 <HAL_GetTick>
 8002498:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800249a:	e008      	b.n	80024ae <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800249c:	f7ff f822 	bl	80014e4 <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e173      	b.n	8002796 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024ae:	4b0b      	ldr	r3, [pc, #44]	; (80024dc <HAL_RCC_OscConfig+0x274>)
 80024b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024b2:	f003 0302 	and.w	r3, r3, #2
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d0f0      	beq.n	800249c <HAL_RCC_OscConfig+0x234>
 80024ba:	e01b      	b.n	80024f4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024bc:	4b09      	ldr	r3, [pc, #36]	; (80024e4 <HAL_RCC_OscConfig+0x27c>)
 80024be:	2200      	movs	r2, #0
 80024c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024c2:	f7ff f80f 	bl	80014e4 <HAL_GetTick>
 80024c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024c8:	e00e      	b.n	80024e8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024ca:	f7ff f80b 	bl	80014e4 <HAL_GetTick>
 80024ce:	4602      	mov	r2, r0
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d907      	bls.n	80024e8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	e15c      	b.n	8002796 <HAL_RCC_OscConfig+0x52e>
 80024dc:	40023800 	.word	0x40023800
 80024e0:	42470000 	.word	0x42470000
 80024e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024e8:	4b8a      	ldr	r3, [pc, #552]	; (8002714 <HAL_RCC_OscConfig+0x4ac>)
 80024ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024ec:	f003 0302 	and.w	r3, r3, #2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d1ea      	bne.n	80024ca <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0304 	and.w	r3, r3, #4
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	f000 8097 	beq.w	8002630 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002502:	2300      	movs	r3, #0
 8002504:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002506:	4b83      	ldr	r3, [pc, #524]	; (8002714 <HAL_RCC_OscConfig+0x4ac>)
 8002508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d10f      	bne.n	8002532 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002512:	2300      	movs	r3, #0
 8002514:	60bb      	str	r3, [r7, #8]
 8002516:	4b7f      	ldr	r3, [pc, #508]	; (8002714 <HAL_RCC_OscConfig+0x4ac>)
 8002518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251a:	4a7e      	ldr	r2, [pc, #504]	; (8002714 <HAL_RCC_OscConfig+0x4ac>)
 800251c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002520:	6413      	str	r3, [r2, #64]	; 0x40
 8002522:	4b7c      	ldr	r3, [pc, #496]	; (8002714 <HAL_RCC_OscConfig+0x4ac>)
 8002524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800252a:	60bb      	str	r3, [r7, #8]
 800252c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800252e:	2301      	movs	r3, #1
 8002530:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002532:	4b79      	ldr	r3, [pc, #484]	; (8002718 <HAL_RCC_OscConfig+0x4b0>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800253a:	2b00      	cmp	r3, #0
 800253c:	d118      	bne.n	8002570 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800253e:	4b76      	ldr	r3, [pc, #472]	; (8002718 <HAL_RCC_OscConfig+0x4b0>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a75      	ldr	r2, [pc, #468]	; (8002718 <HAL_RCC_OscConfig+0x4b0>)
 8002544:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002548:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800254a:	f7fe ffcb 	bl	80014e4 <HAL_GetTick>
 800254e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002550:	e008      	b.n	8002564 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002552:	f7fe ffc7 	bl	80014e4 <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	2b02      	cmp	r3, #2
 800255e:	d901      	bls.n	8002564 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e118      	b.n	8002796 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002564:	4b6c      	ldr	r3, [pc, #432]	; (8002718 <HAL_RCC_OscConfig+0x4b0>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800256c:	2b00      	cmp	r3, #0
 800256e:	d0f0      	beq.n	8002552 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	2b01      	cmp	r3, #1
 8002576:	d106      	bne.n	8002586 <HAL_RCC_OscConfig+0x31e>
 8002578:	4b66      	ldr	r3, [pc, #408]	; (8002714 <HAL_RCC_OscConfig+0x4ac>)
 800257a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800257c:	4a65      	ldr	r2, [pc, #404]	; (8002714 <HAL_RCC_OscConfig+0x4ac>)
 800257e:	f043 0301 	orr.w	r3, r3, #1
 8002582:	6713      	str	r3, [r2, #112]	; 0x70
 8002584:	e01c      	b.n	80025c0 <HAL_RCC_OscConfig+0x358>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	2b05      	cmp	r3, #5
 800258c:	d10c      	bne.n	80025a8 <HAL_RCC_OscConfig+0x340>
 800258e:	4b61      	ldr	r3, [pc, #388]	; (8002714 <HAL_RCC_OscConfig+0x4ac>)
 8002590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002592:	4a60      	ldr	r2, [pc, #384]	; (8002714 <HAL_RCC_OscConfig+0x4ac>)
 8002594:	f043 0304 	orr.w	r3, r3, #4
 8002598:	6713      	str	r3, [r2, #112]	; 0x70
 800259a:	4b5e      	ldr	r3, [pc, #376]	; (8002714 <HAL_RCC_OscConfig+0x4ac>)
 800259c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800259e:	4a5d      	ldr	r2, [pc, #372]	; (8002714 <HAL_RCC_OscConfig+0x4ac>)
 80025a0:	f043 0301 	orr.w	r3, r3, #1
 80025a4:	6713      	str	r3, [r2, #112]	; 0x70
 80025a6:	e00b      	b.n	80025c0 <HAL_RCC_OscConfig+0x358>
 80025a8:	4b5a      	ldr	r3, [pc, #360]	; (8002714 <HAL_RCC_OscConfig+0x4ac>)
 80025aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ac:	4a59      	ldr	r2, [pc, #356]	; (8002714 <HAL_RCC_OscConfig+0x4ac>)
 80025ae:	f023 0301 	bic.w	r3, r3, #1
 80025b2:	6713      	str	r3, [r2, #112]	; 0x70
 80025b4:	4b57      	ldr	r3, [pc, #348]	; (8002714 <HAL_RCC_OscConfig+0x4ac>)
 80025b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025b8:	4a56      	ldr	r2, [pc, #344]	; (8002714 <HAL_RCC_OscConfig+0x4ac>)
 80025ba:	f023 0304 	bic.w	r3, r3, #4
 80025be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d015      	beq.n	80025f4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025c8:	f7fe ff8c 	bl	80014e4 <HAL_GetTick>
 80025cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025ce:	e00a      	b.n	80025e6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025d0:	f7fe ff88 	bl	80014e4 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	f241 3288 	movw	r2, #5000	; 0x1388
 80025de:	4293      	cmp	r3, r2
 80025e0:	d901      	bls.n	80025e6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e0d7      	b.n	8002796 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025e6:	4b4b      	ldr	r3, [pc, #300]	; (8002714 <HAL_RCC_OscConfig+0x4ac>)
 80025e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d0ee      	beq.n	80025d0 <HAL_RCC_OscConfig+0x368>
 80025f2:	e014      	b.n	800261e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f4:	f7fe ff76 	bl	80014e4 <HAL_GetTick>
 80025f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025fa:	e00a      	b.n	8002612 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025fc:	f7fe ff72 	bl	80014e4 <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	f241 3288 	movw	r2, #5000	; 0x1388
 800260a:	4293      	cmp	r3, r2
 800260c:	d901      	bls.n	8002612 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e0c1      	b.n	8002796 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002612:	4b40      	ldr	r3, [pc, #256]	; (8002714 <HAL_RCC_OscConfig+0x4ac>)
 8002614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	2b00      	cmp	r3, #0
 800261c:	d1ee      	bne.n	80025fc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800261e:	7dfb      	ldrb	r3, [r7, #23]
 8002620:	2b01      	cmp	r3, #1
 8002622:	d105      	bne.n	8002630 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002624:	4b3b      	ldr	r3, [pc, #236]	; (8002714 <HAL_RCC_OscConfig+0x4ac>)
 8002626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002628:	4a3a      	ldr	r2, [pc, #232]	; (8002714 <HAL_RCC_OscConfig+0x4ac>)
 800262a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800262e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	699b      	ldr	r3, [r3, #24]
 8002634:	2b00      	cmp	r3, #0
 8002636:	f000 80ad 	beq.w	8002794 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800263a:	4b36      	ldr	r3, [pc, #216]	; (8002714 <HAL_RCC_OscConfig+0x4ac>)
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f003 030c 	and.w	r3, r3, #12
 8002642:	2b08      	cmp	r3, #8
 8002644:	d060      	beq.n	8002708 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	699b      	ldr	r3, [r3, #24]
 800264a:	2b02      	cmp	r3, #2
 800264c:	d145      	bne.n	80026da <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800264e:	4b33      	ldr	r3, [pc, #204]	; (800271c <HAL_RCC_OscConfig+0x4b4>)
 8002650:	2200      	movs	r2, #0
 8002652:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002654:	f7fe ff46 	bl	80014e4 <HAL_GetTick>
 8002658:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800265a:	e008      	b.n	800266e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800265c:	f7fe ff42 	bl	80014e4 <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	2b02      	cmp	r3, #2
 8002668:	d901      	bls.n	800266e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e093      	b.n	8002796 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800266e:	4b29      	ldr	r3, [pc, #164]	; (8002714 <HAL_RCC_OscConfig+0x4ac>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d1f0      	bne.n	800265c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	69da      	ldr	r2, [r3, #28]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a1b      	ldr	r3, [r3, #32]
 8002682:	431a      	orrs	r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002688:	019b      	lsls	r3, r3, #6
 800268a:	431a      	orrs	r2, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002690:	085b      	lsrs	r3, r3, #1
 8002692:	3b01      	subs	r3, #1
 8002694:	041b      	lsls	r3, r3, #16
 8002696:	431a      	orrs	r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800269c:	061b      	lsls	r3, r3, #24
 800269e:	431a      	orrs	r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a4:	071b      	lsls	r3, r3, #28
 80026a6:	491b      	ldr	r1, [pc, #108]	; (8002714 <HAL_RCC_OscConfig+0x4ac>)
 80026a8:	4313      	orrs	r3, r2
 80026aa:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026ac:	4b1b      	ldr	r3, [pc, #108]	; (800271c <HAL_RCC_OscConfig+0x4b4>)
 80026ae:	2201      	movs	r2, #1
 80026b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b2:	f7fe ff17 	bl	80014e4 <HAL_GetTick>
 80026b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026b8:	e008      	b.n	80026cc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026ba:	f7fe ff13 	bl	80014e4 <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d901      	bls.n	80026cc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	e064      	b.n	8002796 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026cc:	4b11      	ldr	r3, [pc, #68]	; (8002714 <HAL_RCC_OscConfig+0x4ac>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d0f0      	beq.n	80026ba <HAL_RCC_OscConfig+0x452>
 80026d8:	e05c      	b.n	8002794 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026da:	4b10      	ldr	r3, [pc, #64]	; (800271c <HAL_RCC_OscConfig+0x4b4>)
 80026dc:	2200      	movs	r2, #0
 80026de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e0:	f7fe ff00 	bl	80014e4 <HAL_GetTick>
 80026e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026e6:	e008      	b.n	80026fa <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026e8:	f7fe fefc 	bl	80014e4 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e04d      	b.n	8002796 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026fa:	4b06      	ldr	r3, [pc, #24]	; (8002714 <HAL_RCC_OscConfig+0x4ac>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d1f0      	bne.n	80026e8 <HAL_RCC_OscConfig+0x480>
 8002706:	e045      	b.n	8002794 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	699b      	ldr	r3, [r3, #24]
 800270c:	2b01      	cmp	r3, #1
 800270e:	d107      	bne.n	8002720 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e040      	b.n	8002796 <HAL_RCC_OscConfig+0x52e>
 8002714:	40023800 	.word	0x40023800
 8002718:	40007000 	.word	0x40007000
 800271c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002720:	4b1f      	ldr	r3, [pc, #124]	; (80027a0 <HAL_RCC_OscConfig+0x538>)
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	699b      	ldr	r3, [r3, #24]
 800272a:	2b01      	cmp	r3, #1
 800272c:	d030      	beq.n	8002790 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002738:	429a      	cmp	r2, r3
 800273a:	d129      	bne.n	8002790 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002746:	429a      	cmp	r2, r3
 8002748:	d122      	bne.n	8002790 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800274a:	68fa      	ldr	r2, [r7, #12]
 800274c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002750:	4013      	ands	r3, r2
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002756:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002758:	4293      	cmp	r3, r2
 800275a:	d119      	bne.n	8002790 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002766:	085b      	lsrs	r3, r3, #1
 8002768:	3b01      	subs	r3, #1
 800276a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800276c:	429a      	cmp	r2, r3
 800276e:	d10f      	bne.n	8002790 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800277a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800277c:	429a      	cmp	r2, r3
 800277e:	d107      	bne.n	8002790 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800278c:	429a      	cmp	r2, r3
 800278e:	d001      	beq.n	8002794 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e000      	b.n	8002796 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	3718      	adds	r7, #24
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	40023800 	.word	0x40023800

080027a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d101      	bne.n	80027b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e041      	b.n	800283a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d106      	bne.n	80027d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f7fe fc28 	bl	8001020 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2202      	movs	r2, #2
 80027d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	3304      	adds	r3, #4
 80027e0:	4619      	mov	r1, r3
 80027e2:	4610      	mov	r0, r2
 80027e4:	f000 fd14 	bl	8003210 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2201      	movs	r2, #1
 8002804:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	3708      	adds	r7, #8
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}

08002842 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002842:	b580      	push	{r7, lr}
 8002844:	b082      	sub	sp, #8
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d101      	bne.n	8002854 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e041      	b.n	80028d8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800285a:	b2db      	uxtb	r3, r3
 800285c:	2b00      	cmp	r3, #0
 800285e:	d106      	bne.n	800286e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f000 f839 	bl	80028e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2202      	movs	r2, #2
 8002872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	3304      	adds	r3, #4
 800287e:	4619      	mov	r1, r3
 8002880:	4610      	mov	r0, r2
 8002882:	f000 fcc5 	bl	8003210 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2201      	movs	r2, #1
 800288a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2201      	movs	r2, #1
 8002892:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2201      	movs	r2, #1
 800289a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2201      	movs	r2, #1
 80028a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2201      	movs	r2, #1
 80028aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2201      	movs	r2, #1
 80028b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2201      	movs	r2, #1
 80028ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2201      	movs	r2, #1
 80028c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2201      	movs	r2, #1
 80028ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2201      	movs	r2, #1
 80028d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028d6:	2300      	movs	r3, #0
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3708      	adds	r7, #8
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80028e8:	bf00      	nop
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028fe:	2300      	movs	r3, #0
 8002900:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d109      	bne.n	800291c <HAL_TIM_PWM_Start_IT+0x28>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800290e:	b2db      	uxtb	r3, r3
 8002910:	2b01      	cmp	r3, #1
 8002912:	bf14      	ite	ne
 8002914:	2301      	movne	r3, #1
 8002916:	2300      	moveq	r3, #0
 8002918:	b2db      	uxtb	r3, r3
 800291a:	e022      	b.n	8002962 <HAL_TIM_PWM_Start_IT+0x6e>
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	2b04      	cmp	r3, #4
 8002920:	d109      	bne.n	8002936 <HAL_TIM_PWM_Start_IT+0x42>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002928:	b2db      	uxtb	r3, r3
 800292a:	2b01      	cmp	r3, #1
 800292c:	bf14      	ite	ne
 800292e:	2301      	movne	r3, #1
 8002930:	2300      	moveq	r3, #0
 8002932:	b2db      	uxtb	r3, r3
 8002934:	e015      	b.n	8002962 <HAL_TIM_PWM_Start_IT+0x6e>
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	2b08      	cmp	r3, #8
 800293a:	d109      	bne.n	8002950 <HAL_TIM_PWM_Start_IT+0x5c>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002942:	b2db      	uxtb	r3, r3
 8002944:	2b01      	cmp	r3, #1
 8002946:	bf14      	ite	ne
 8002948:	2301      	movne	r3, #1
 800294a:	2300      	moveq	r3, #0
 800294c:	b2db      	uxtb	r3, r3
 800294e:	e008      	b.n	8002962 <HAL_TIM_PWM_Start_IT+0x6e>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002956:	b2db      	uxtb	r3, r3
 8002958:	2b01      	cmp	r3, #1
 800295a:	bf14      	ite	ne
 800295c:	2301      	movne	r3, #1
 800295e:	2300      	moveq	r3, #0
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2b00      	cmp	r3, #0
 8002964:	d001      	beq.n	800296a <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e0c7      	b.n	8002afa <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d104      	bne.n	800297a <HAL_TIM_PWM_Start_IT+0x86>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2202      	movs	r2, #2
 8002974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002978:	e013      	b.n	80029a2 <HAL_TIM_PWM_Start_IT+0xae>
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	2b04      	cmp	r3, #4
 800297e:	d104      	bne.n	800298a <HAL_TIM_PWM_Start_IT+0x96>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2202      	movs	r2, #2
 8002984:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002988:	e00b      	b.n	80029a2 <HAL_TIM_PWM_Start_IT+0xae>
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	2b08      	cmp	r3, #8
 800298e:	d104      	bne.n	800299a <HAL_TIM_PWM_Start_IT+0xa6>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2202      	movs	r2, #2
 8002994:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002998:	e003      	b.n	80029a2 <HAL_TIM_PWM_Start_IT+0xae>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2202      	movs	r2, #2
 800299e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	2b0c      	cmp	r3, #12
 80029a6:	d841      	bhi.n	8002a2c <HAL_TIM_PWM_Start_IT+0x138>
 80029a8:	a201      	add	r2, pc, #4	; (adr r2, 80029b0 <HAL_TIM_PWM_Start_IT+0xbc>)
 80029aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029ae:	bf00      	nop
 80029b0:	080029e5 	.word	0x080029e5
 80029b4:	08002a2d 	.word	0x08002a2d
 80029b8:	08002a2d 	.word	0x08002a2d
 80029bc:	08002a2d 	.word	0x08002a2d
 80029c0:	080029f7 	.word	0x080029f7
 80029c4:	08002a2d 	.word	0x08002a2d
 80029c8:	08002a2d 	.word	0x08002a2d
 80029cc:	08002a2d 	.word	0x08002a2d
 80029d0:	08002a09 	.word	0x08002a09
 80029d4:	08002a2d 	.word	0x08002a2d
 80029d8:	08002a2d 	.word	0x08002a2d
 80029dc:	08002a2d 	.word	0x08002a2d
 80029e0:	08002a1b 	.word	0x08002a1b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	68da      	ldr	r2, [r3, #12]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f042 0202 	orr.w	r2, r2, #2
 80029f2:	60da      	str	r2, [r3, #12]
      break;
 80029f4:	e01d      	b.n	8002a32 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	68da      	ldr	r2, [r3, #12]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f042 0204 	orr.w	r2, r2, #4
 8002a04:	60da      	str	r2, [r3, #12]
      break;
 8002a06:	e014      	b.n	8002a32 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	68da      	ldr	r2, [r3, #12]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f042 0208 	orr.w	r2, r2, #8
 8002a16:	60da      	str	r2, [r3, #12]
      break;
 8002a18:	e00b      	b.n	8002a32 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	68da      	ldr	r2, [r3, #12]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f042 0210 	orr.w	r2, r2, #16
 8002a28:	60da      	str	r2, [r3, #12]
      break;
 8002a2a:	e002      	b.n	8002a32 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	73fb      	strb	r3, [r7, #15]
      break;
 8002a30:	bf00      	nop
  }

  if (status == HAL_OK)
 8002a32:	7bfb      	ldrb	r3, [r7, #15]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d15f      	bne.n	8002af8 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	6839      	ldr	r1, [r7, #0]
 8002a40:	4618      	mov	r0, r3
 8002a42:	f000 fecf 	bl	80037e4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a2e      	ldr	r2, [pc, #184]	; (8002b04 <HAL_TIM_PWM_Start_IT+0x210>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d004      	beq.n	8002a5a <HAL_TIM_PWM_Start_IT+0x166>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a2c      	ldr	r2, [pc, #176]	; (8002b08 <HAL_TIM_PWM_Start_IT+0x214>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d101      	bne.n	8002a5e <HAL_TIM_PWM_Start_IT+0x16a>
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e000      	b.n	8002a60 <HAL_TIM_PWM_Start_IT+0x16c>
 8002a5e:	2300      	movs	r3, #0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d007      	beq.n	8002a74 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a72:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a22      	ldr	r2, [pc, #136]	; (8002b04 <HAL_TIM_PWM_Start_IT+0x210>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d022      	beq.n	8002ac4 <HAL_TIM_PWM_Start_IT+0x1d0>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a86:	d01d      	beq.n	8002ac4 <HAL_TIM_PWM_Start_IT+0x1d0>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a1f      	ldr	r2, [pc, #124]	; (8002b0c <HAL_TIM_PWM_Start_IT+0x218>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d018      	beq.n	8002ac4 <HAL_TIM_PWM_Start_IT+0x1d0>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a1e      	ldr	r2, [pc, #120]	; (8002b10 <HAL_TIM_PWM_Start_IT+0x21c>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d013      	beq.n	8002ac4 <HAL_TIM_PWM_Start_IT+0x1d0>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a1c      	ldr	r2, [pc, #112]	; (8002b14 <HAL_TIM_PWM_Start_IT+0x220>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d00e      	beq.n	8002ac4 <HAL_TIM_PWM_Start_IT+0x1d0>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a17      	ldr	r2, [pc, #92]	; (8002b08 <HAL_TIM_PWM_Start_IT+0x214>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d009      	beq.n	8002ac4 <HAL_TIM_PWM_Start_IT+0x1d0>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a18      	ldr	r2, [pc, #96]	; (8002b18 <HAL_TIM_PWM_Start_IT+0x224>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d004      	beq.n	8002ac4 <HAL_TIM_PWM_Start_IT+0x1d0>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a17      	ldr	r2, [pc, #92]	; (8002b1c <HAL_TIM_PWM_Start_IT+0x228>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d111      	bne.n	8002ae8 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f003 0307 	and.w	r3, r3, #7
 8002ace:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	2b06      	cmp	r3, #6
 8002ad4:	d010      	beq.n	8002af8 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f042 0201 	orr.w	r2, r2, #1
 8002ae4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ae6:	e007      	b.n	8002af8 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f042 0201 	orr.w	r2, r2, #1
 8002af6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3710      	adds	r7, #16
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	40010000 	.word	0x40010000
 8002b08:	40010400 	.word	0x40010400
 8002b0c:	40000400 	.word	0x40000400
 8002b10:	40000800 	.word	0x40000800
 8002b14:	40000c00 	.word	0x40000c00
 8002b18:	40014000 	.word	0x40014000
 8002b1c:	40001800 	.word	0x40001800

08002b20 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	2b0c      	cmp	r3, #12
 8002b32:	d841      	bhi.n	8002bb8 <HAL_TIM_PWM_Stop_IT+0x98>
 8002b34:	a201      	add	r2, pc, #4	; (adr r2, 8002b3c <HAL_TIM_PWM_Stop_IT+0x1c>)
 8002b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b3a:	bf00      	nop
 8002b3c:	08002b71 	.word	0x08002b71
 8002b40:	08002bb9 	.word	0x08002bb9
 8002b44:	08002bb9 	.word	0x08002bb9
 8002b48:	08002bb9 	.word	0x08002bb9
 8002b4c:	08002b83 	.word	0x08002b83
 8002b50:	08002bb9 	.word	0x08002bb9
 8002b54:	08002bb9 	.word	0x08002bb9
 8002b58:	08002bb9 	.word	0x08002bb9
 8002b5c:	08002b95 	.word	0x08002b95
 8002b60:	08002bb9 	.word	0x08002bb9
 8002b64:	08002bb9 	.word	0x08002bb9
 8002b68:	08002bb9 	.word	0x08002bb9
 8002b6c:	08002ba7 	.word	0x08002ba7
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	68da      	ldr	r2, [r3, #12]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f022 0202 	bic.w	r2, r2, #2
 8002b7e:	60da      	str	r2, [r3, #12]
      break;
 8002b80:	e01d      	b.n	8002bbe <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68da      	ldr	r2, [r3, #12]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f022 0204 	bic.w	r2, r2, #4
 8002b90:	60da      	str	r2, [r3, #12]
      break;
 8002b92:	e014      	b.n	8002bbe <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	68da      	ldr	r2, [r3, #12]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f022 0208 	bic.w	r2, r2, #8
 8002ba2:	60da      	str	r2, [r3, #12]
      break;
 8002ba4:	e00b      	b.n	8002bbe <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68da      	ldr	r2, [r3, #12]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f022 0210 	bic.w	r2, r2, #16
 8002bb4:	60da      	str	r2, [r3, #12]
      break;
 8002bb6:	e002      	b.n	8002bbe <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	73fb      	strb	r3, [r7, #15]
      break;
 8002bbc:	bf00      	nop
  }

  if (status == HAL_OK)
 8002bbe:	7bfb      	ldrb	r3, [r7, #15]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d161      	bne.n	8002c88 <HAL_TIM_PWM_Stop_IT+0x168>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	6839      	ldr	r1, [r7, #0]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f000 fe09 	bl	80037e4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a2f      	ldr	r2, [pc, #188]	; (8002c94 <HAL_TIM_PWM_Stop_IT+0x174>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d004      	beq.n	8002be6 <HAL_TIM_PWM_Stop_IT+0xc6>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a2d      	ldr	r2, [pc, #180]	; (8002c98 <HAL_TIM_PWM_Stop_IT+0x178>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d101      	bne.n	8002bea <HAL_TIM_PWM_Stop_IT+0xca>
 8002be6:	2301      	movs	r3, #1
 8002be8:	e000      	b.n	8002bec <HAL_TIM_PWM_Stop_IT+0xcc>
 8002bea:	2300      	movs	r3, #0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d017      	beq.n	8002c20 <HAL_TIM_PWM_Stop_IT+0x100>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	6a1a      	ldr	r2, [r3, #32]
 8002bf6:	f241 1311 	movw	r3, #4369	; 0x1111
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d10f      	bne.n	8002c20 <HAL_TIM_PWM_Stop_IT+0x100>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	6a1a      	ldr	r2, [r3, #32]
 8002c06:	f240 4344 	movw	r3, #1092	; 0x444
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d107      	bne.n	8002c20 <HAL_TIM_PWM_Stop_IT+0x100>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c1e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	6a1a      	ldr	r2, [r3, #32]
 8002c26:	f241 1311 	movw	r3, #4369	; 0x1111
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d10f      	bne.n	8002c50 <HAL_TIM_PWM_Stop_IT+0x130>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	6a1a      	ldr	r2, [r3, #32]
 8002c36:	f240 4344 	movw	r3, #1092	; 0x444
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d107      	bne.n	8002c50 <HAL_TIM_PWM_Stop_IT+0x130>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f022 0201 	bic.w	r2, r2, #1
 8002c4e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d104      	bne.n	8002c60 <HAL_TIM_PWM_Stop_IT+0x140>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2201      	movs	r2, #1
 8002c5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c5e:	e013      	b.n	8002c88 <HAL_TIM_PWM_Stop_IT+0x168>
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	2b04      	cmp	r3, #4
 8002c64:	d104      	bne.n	8002c70 <HAL_TIM_PWM_Stop_IT+0x150>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c6e:	e00b      	b.n	8002c88 <HAL_TIM_PWM_Stop_IT+0x168>
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	2b08      	cmp	r3, #8
 8002c74:	d104      	bne.n	8002c80 <HAL_TIM_PWM_Stop_IT+0x160>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c7e:	e003      	b.n	8002c88 <HAL_TIM_PWM_Stop_IT+0x168>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8002c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3710      	adds	r7, #16
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	40010000 	.word	0x40010000
 8002c98:	40010400 	.word	0x40010400

08002c9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d122      	bne.n	8002cf8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	f003 0302 	and.w	r3, r3, #2
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d11b      	bne.n	8002cf8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f06f 0202 	mvn.w	r2, #2
 8002cc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2201      	movs	r2, #1
 8002cce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	699b      	ldr	r3, [r3, #24]
 8002cd6:	f003 0303 	and.w	r3, r3, #3
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d003      	beq.n	8002ce6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f000 fa81 	bl	80031e6 <HAL_TIM_IC_CaptureCallback>
 8002ce4:	e005      	b.n	8002cf2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f000 fa73 	bl	80031d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f7fe f8a1 	bl	8000e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	f003 0304 	and.w	r3, r3, #4
 8002d02:	2b04      	cmp	r3, #4
 8002d04:	d122      	bne.n	8002d4c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	f003 0304 	and.w	r3, r3, #4
 8002d10:	2b04      	cmp	r3, #4
 8002d12:	d11b      	bne.n	8002d4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f06f 0204 	mvn.w	r2, #4
 8002d1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2202      	movs	r2, #2
 8002d22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	699b      	ldr	r3, [r3, #24]
 8002d2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d003      	beq.n	8002d3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 fa57 	bl	80031e6 <HAL_TIM_IC_CaptureCallback>
 8002d38:	e005      	b.n	8002d46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f000 fa49 	bl	80031d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f7fe f877 	bl	8000e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	f003 0308 	and.w	r3, r3, #8
 8002d56:	2b08      	cmp	r3, #8
 8002d58:	d122      	bne.n	8002da0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	f003 0308 	and.w	r3, r3, #8
 8002d64:	2b08      	cmp	r3, #8
 8002d66:	d11b      	bne.n	8002da0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f06f 0208 	mvn.w	r2, #8
 8002d70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2204      	movs	r2, #4
 8002d76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	69db      	ldr	r3, [r3, #28]
 8002d7e:	f003 0303 	and.w	r3, r3, #3
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d003      	beq.n	8002d8e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f000 fa2d 	bl	80031e6 <HAL_TIM_IC_CaptureCallback>
 8002d8c:	e005      	b.n	8002d9a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f000 fa1f 	bl	80031d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f7fe f84d 	bl	8000e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	f003 0310 	and.w	r3, r3, #16
 8002daa:	2b10      	cmp	r3, #16
 8002dac:	d122      	bne.n	8002df4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	f003 0310 	and.w	r3, r3, #16
 8002db8:	2b10      	cmp	r3, #16
 8002dba:	d11b      	bne.n	8002df4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f06f 0210 	mvn.w	r2, #16
 8002dc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2208      	movs	r2, #8
 8002dca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	69db      	ldr	r3, [r3, #28]
 8002dd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d003      	beq.n	8002de2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f000 fa03 	bl	80031e6 <HAL_TIM_IC_CaptureCallback>
 8002de0:	e005      	b.n	8002dee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 f9f5 	bl	80031d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f7fe f823 	bl	8000e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	f003 0301 	and.w	r3, r3, #1
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d10e      	bne.n	8002e20 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	f003 0301 	and.w	r3, r3, #1
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d107      	bne.n	8002e20 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f06f 0201 	mvn.w	r2, #1
 8002e18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f000 f9cf 	bl	80031be <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e2a:	2b80      	cmp	r3, #128	; 0x80
 8002e2c:	d10e      	bne.n	8002e4c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e38:	2b80      	cmp	r3, #128	; 0x80
 8002e3a:	d107      	bne.n	8002e4c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f000 fd78 	bl	800393c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	691b      	ldr	r3, [r3, #16]
 8002e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e56:	2b40      	cmp	r3, #64	; 0x40
 8002e58:	d10e      	bne.n	8002e78 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e64:	2b40      	cmp	r3, #64	; 0x40
 8002e66:	d107      	bne.n	8002e78 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f000 f9c1 	bl	80031fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	f003 0320 	and.w	r3, r3, #32
 8002e82:	2b20      	cmp	r3, #32
 8002e84:	d10e      	bne.n	8002ea4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	f003 0320 	and.w	r3, r3, #32
 8002e90:	2b20      	cmp	r3, #32
 8002e92:	d107      	bne.n	8002ea4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f06f 0220 	mvn.w	r2, #32
 8002e9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f000 fd42 	bl	8003928 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ea4:	bf00      	nop
 8002ea6:	3708      	adds	r7, #8
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b086      	sub	sp, #24
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	60b9      	str	r1, [r7, #8]
 8002eb6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d101      	bne.n	8002eca <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002ec6:	2302      	movs	r3, #2
 8002ec8:	e0ae      	b.n	8003028 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2201      	movs	r2, #1
 8002ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2b0c      	cmp	r3, #12
 8002ed6:	f200 809f 	bhi.w	8003018 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002eda:	a201      	add	r2, pc, #4	; (adr r2, 8002ee0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ee0:	08002f15 	.word	0x08002f15
 8002ee4:	08003019 	.word	0x08003019
 8002ee8:	08003019 	.word	0x08003019
 8002eec:	08003019 	.word	0x08003019
 8002ef0:	08002f55 	.word	0x08002f55
 8002ef4:	08003019 	.word	0x08003019
 8002ef8:	08003019 	.word	0x08003019
 8002efc:	08003019 	.word	0x08003019
 8002f00:	08002f97 	.word	0x08002f97
 8002f04:	08003019 	.word	0x08003019
 8002f08:	08003019 	.word	0x08003019
 8002f0c:	08003019 	.word	0x08003019
 8002f10:	08002fd7 	.word	0x08002fd7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	68b9      	ldr	r1, [r7, #8]
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f000 fa18 	bl	8003350 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	699a      	ldr	r2, [r3, #24]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f042 0208 	orr.w	r2, r2, #8
 8002f2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	699a      	ldr	r2, [r3, #24]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f022 0204 	bic.w	r2, r2, #4
 8002f3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	6999      	ldr	r1, [r3, #24]
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	691a      	ldr	r2, [r3, #16]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	619a      	str	r2, [r3, #24]
      break;
 8002f52:	e064      	b.n	800301e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	68b9      	ldr	r1, [r7, #8]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f000 fa68 	bl	8003430 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	699a      	ldr	r2, [r3, #24]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	699a      	ldr	r2, [r3, #24]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	6999      	ldr	r1, [r3, #24]
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	021a      	lsls	r2, r3, #8
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	430a      	orrs	r2, r1
 8002f92:	619a      	str	r2, [r3, #24]
      break;
 8002f94:	e043      	b.n	800301e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	68b9      	ldr	r1, [r7, #8]
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f000 fabd 	bl	800351c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	69da      	ldr	r2, [r3, #28]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f042 0208 	orr.w	r2, r2, #8
 8002fb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	69da      	ldr	r2, [r3, #28]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f022 0204 	bic.w	r2, r2, #4
 8002fc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	69d9      	ldr	r1, [r3, #28]
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	691a      	ldr	r2, [r3, #16]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	430a      	orrs	r2, r1
 8002fd2:	61da      	str	r2, [r3, #28]
      break;
 8002fd4:	e023      	b.n	800301e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68b9      	ldr	r1, [r7, #8]
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f000 fb11 	bl	8003604 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	69da      	ldr	r2, [r3, #28]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ff0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	69da      	ldr	r2, [r3, #28]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003000:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	69d9      	ldr	r1, [r3, #28]
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	691b      	ldr	r3, [r3, #16]
 800300c:	021a      	lsls	r2, r3, #8
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	430a      	orrs	r2, r1
 8003014:	61da      	str	r2, [r3, #28]
      break;
 8003016:	e002      	b.n	800301e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	75fb      	strb	r3, [r7, #23]
      break;
 800301c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003026:	7dfb      	ldrb	r3, [r7, #23]
}
 8003028:	4618      	mov	r0, r3
 800302a:	3718      	adds	r7, #24
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800303a:	2300      	movs	r3, #0
 800303c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003044:	2b01      	cmp	r3, #1
 8003046:	d101      	bne.n	800304c <HAL_TIM_ConfigClockSource+0x1c>
 8003048:	2302      	movs	r3, #2
 800304a:	e0b4      	b.n	80031b6 <HAL_TIM_ConfigClockSource+0x186>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2202      	movs	r2, #2
 8003058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800306a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003072:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68ba      	ldr	r2, [r7, #8]
 800307a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003084:	d03e      	beq.n	8003104 <HAL_TIM_ConfigClockSource+0xd4>
 8003086:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800308a:	f200 8087 	bhi.w	800319c <HAL_TIM_ConfigClockSource+0x16c>
 800308e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003092:	f000 8086 	beq.w	80031a2 <HAL_TIM_ConfigClockSource+0x172>
 8003096:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800309a:	d87f      	bhi.n	800319c <HAL_TIM_ConfigClockSource+0x16c>
 800309c:	2b70      	cmp	r3, #112	; 0x70
 800309e:	d01a      	beq.n	80030d6 <HAL_TIM_ConfigClockSource+0xa6>
 80030a0:	2b70      	cmp	r3, #112	; 0x70
 80030a2:	d87b      	bhi.n	800319c <HAL_TIM_ConfigClockSource+0x16c>
 80030a4:	2b60      	cmp	r3, #96	; 0x60
 80030a6:	d050      	beq.n	800314a <HAL_TIM_ConfigClockSource+0x11a>
 80030a8:	2b60      	cmp	r3, #96	; 0x60
 80030aa:	d877      	bhi.n	800319c <HAL_TIM_ConfigClockSource+0x16c>
 80030ac:	2b50      	cmp	r3, #80	; 0x50
 80030ae:	d03c      	beq.n	800312a <HAL_TIM_ConfigClockSource+0xfa>
 80030b0:	2b50      	cmp	r3, #80	; 0x50
 80030b2:	d873      	bhi.n	800319c <HAL_TIM_ConfigClockSource+0x16c>
 80030b4:	2b40      	cmp	r3, #64	; 0x40
 80030b6:	d058      	beq.n	800316a <HAL_TIM_ConfigClockSource+0x13a>
 80030b8:	2b40      	cmp	r3, #64	; 0x40
 80030ba:	d86f      	bhi.n	800319c <HAL_TIM_ConfigClockSource+0x16c>
 80030bc:	2b30      	cmp	r3, #48	; 0x30
 80030be:	d064      	beq.n	800318a <HAL_TIM_ConfigClockSource+0x15a>
 80030c0:	2b30      	cmp	r3, #48	; 0x30
 80030c2:	d86b      	bhi.n	800319c <HAL_TIM_ConfigClockSource+0x16c>
 80030c4:	2b20      	cmp	r3, #32
 80030c6:	d060      	beq.n	800318a <HAL_TIM_ConfigClockSource+0x15a>
 80030c8:	2b20      	cmp	r3, #32
 80030ca:	d867      	bhi.n	800319c <HAL_TIM_ConfigClockSource+0x16c>
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d05c      	beq.n	800318a <HAL_TIM_ConfigClockSource+0x15a>
 80030d0:	2b10      	cmp	r3, #16
 80030d2:	d05a      	beq.n	800318a <HAL_TIM_ConfigClockSource+0x15a>
 80030d4:	e062      	b.n	800319c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6818      	ldr	r0, [r3, #0]
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	6899      	ldr	r1, [r3, #8]
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	685a      	ldr	r2, [r3, #4]
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	f000 fb5d 	bl	80037a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80030f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	68ba      	ldr	r2, [r7, #8]
 8003100:	609a      	str	r2, [r3, #8]
      break;
 8003102:	e04f      	b.n	80031a4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6818      	ldr	r0, [r3, #0]
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	6899      	ldr	r1, [r3, #8]
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	685a      	ldr	r2, [r3, #4]
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	f000 fb46 	bl	80037a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	689a      	ldr	r2, [r3, #8]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003126:	609a      	str	r2, [r3, #8]
      break;
 8003128:	e03c      	b.n	80031a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6818      	ldr	r0, [r3, #0]
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	6859      	ldr	r1, [r3, #4]
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	461a      	mov	r2, r3
 8003138:	f000 faba 	bl	80036b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2150      	movs	r1, #80	; 0x50
 8003142:	4618      	mov	r0, r3
 8003144:	f000 fb13 	bl	800376e <TIM_ITRx_SetConfig>
      break;
 8003148:	e02c      	b.n	80031a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6818      	ldr	r0, [r3, #0]
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	6859      	ldr	r1, [r3, #4]
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	461a      	mov	r2, r3
 8003158:	f000 fad9 	bl	800370e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2160      	movs	r1, #96	; 0x60
 8003162:	4618      	mov	r0, r3
 8003164:	f000 fb03 	bl	800376e <TIM_ITRx_SetConfig>
      break;
 8003168:	e01c      	b.n	80031a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6818      	ldr	r0, [r3, #0]
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	6859      	ldr	r1, [r3, #4]
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	461a      	mov	r2, r3
 8003178:	f000 fa9a 	bl	80036b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2140      	movs	r1, #64	; 0x40
 8003182:	4618      	mov	r0, r3
 8003184:	f000 faf3 	bl	800376e <TIM_ITRx_SetConfig>
      break;
 8003188:	e00c      	b.n	80031a4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4619      	mov	r1, r3
 8003194:	4610      	mov	r0, r2
 8003196:	f000 faea 	bl	800376e <TIM_ITRx_SetConfig>
      break;
 800319a:	e003      	b.n	80031a4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	73fb      	strb	r3, [r7, #15]
      break;
 80031a0:	e000      	b.n	80031a4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80031a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80031b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3710      	adds	r7, #16
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}

080031be <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031be:	b480      	push	{r7}
 80031c0:	b083      	sub	sp, #12
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80031c6:	bf00      	nop
 80031c8:	370c      	adds	r7, #12
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr

080031d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031d2:	b480      	push	{r7}
 80031d4:	b083      	sub	sp, #12
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031da:	bf00      	nop
 80031dc:	370c      	adds	r7, #12
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr

080031e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031e6:	b480      	push	{r7}
 80031e8:	b083      	sub	sp, #12
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031ee:	bf00      	nop
 80031f0:	370c      	adds	r7, #12
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr

080031fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031fa:	b480      	push	{r7}
 80031fc:	b083      	sub	sp, #12
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003202:	bf00      	nop
 8003204:	370c      	adds	r7, #12
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr
	...

08003210 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003210:	b480      	push	{r7}
 8003212:	b085      	sub	sp, #20
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	4a40      	ldr	r2, [pc, #256]	; (8003324 <TIM_Base_SetConfig+0x114>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d013      	beq.n	8003250 <TIM_Base_SetConfig+0x40>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800322e:	d00f      	beq.n	8003250 <TIM_Base_SetConfig+0x40>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	4a3d      	ldr	r2, [pc, #244]	; (8003328 <TIM_Base_SetConfig+0x118>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d00b      	beq.n	8003250 <TIM_Base_SetConfig+0x40>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	4a3c      	ldr	r2, [pc, #240]	; (800332c <TIM_Base_SetConfig+0x11c>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d007      	beq.n	8003250 <TIM_Base_SetConfig+0x40>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4a3b      	ldr	r2, [pc, #236]	; (8003330 <TIM_Base_SetConfig+0x120>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d003      	beq.n	8003250 <TIM_Base_SetConfig+0x40>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	4a3a      	ldr	r2, [pc, #232]	; (8003334 <TIM_Base_SetConfig+0x124>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d108      	bne.n	8003262 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003256:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	68fa      	ldr	r2, [r7, #12]
 800325e:	4313      	orrs	r3, r2
 8003260:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a2f      	ldr	r2, [pc, #188]	; (8003324 <TIM_Base_SetConfig+0x114>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d02b      	beq.n	80032c2 <TIM_Base_SetConfig+0xb2>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003270:	d027      	beq.n	80032c2 <TIM_Base_SetConfig+0xb2>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a2c      	ldr	r2, [pc, #176]	; (8003328 <TIM_Base_SetConfig+0x118>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d023      	beq.n	80032c2 <TIM_Base_SetConfig+0xb2>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a2b      	ldr	r2, [pc, #172]	; (800332c <TIM_Base_SetConfig+0x11c>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d01f      	beq.n	80032c2 <TIM_Base_SetConfig+0xb2>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a2a      	ldr	r2, [pc, #168]	; (8003330 <TIM_Base_SetConfig+0x120>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d01b      	beq.n	80032c2 <TIM_Base_SetConfig+0xb2>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a29      	ldr	r2, [pc, #164]	; (8003334 <TIM_Base_SetConfig+0x124>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d017      	beq.n	80032c2 <TIM_Base_SetConfig+0xb2>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a28      	ldr	r2, [pc, #160]	; (8003338 <TIM_Base_SetConfig+0x128>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d013      	beq.n	80032c2 <TIM_Base_SetConfig+0xb2>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a27      	ldr	r2, [pc, #156]	; (800333c <TIM_Base_SetConfig+0x12c>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d00f      	beq.n	80032c2 <TIM_Base_SetConfig+0xb2>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a26      	ldr	r2, [pc, #152]	; (8003340 <TIM_Base_SetConfig+0x130>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d00b      	beq.n	80032c2 <TIM_Base_SetConfig+0xb2>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a25      	ldr	r2, [pc, #148]	; (8003344 <TIM_Base_SetConfig+0x134>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d007      	beq.n	80032c2 <TIM_Base_SetConfig+0xb2>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a24      	ldr	r2, [pc, #144]	; (8003348 <TIM_Base_SetConfig+0x138>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d003      	beq.n	80032c2 <TIM_Base_SetConfig+0xb2>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a23      	ldr	r2, [pc, #140]	; (800334c <TIM_Base_SetConfig+0x13c>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d108      	bne.n	80032d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	68fa      	ldr	r2, [r7, #12]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	4313      	orrs	r3, r2
 80032e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	68fa      	ldr	r2, [r7, #12]
 80032e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	689a      	ldr	r2, [r3, #8]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4a0a      	ldr	r2, [pc, #40]	; (8003324 <TIM_Base_SetConfig+0x114>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d003      	beq.n	8003308 <TIM_Base_SetConfig+0xf8>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	4a0c      	ldr	r2, [pc, #48]	; (8003334 <TIM_Base_SetConfig+0x124>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d103      	bne.n	8003310 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	691a      	ldr	r2, [r3, #16]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	615a      	str	r2, [r3, #20]
}
 8003316:	bf00      	nop
 8003318:	3714      	adds	r7, #20
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr
 8003322:	bf00      	nop
 8003324:	40010000 	.word	0x40010000
 8003328:	40000400 	.word	0x40000400
 800332c:	40000800 	.word	0x40000800
 8003330:	40000c00 	.word	0x40000c00
 8003334:	40010400 	.word	0x40010400
 8003338:	40014000 	.word	0x40014000
 800333c:	40014400 	.word	0x40014400
 8003340:	40014800 	.word	0x40014800
 8003344:	40001800 	.word	0x40001800
 8003348:	40001c00 	.word	0x40001c00
 800334c:	40002000 	.word	0x40002000

08003350 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003350:	b480      	push	{r7}
 8003352:	b087      	sub	sp, #28
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a1b      	ldr	r3, [r3, #32]
 800335e:	f023 0201 	bic.w	r2, r3, #1
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a1b      	ldr	r3, [r3, #32]
 800336a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800337e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f023 0303 	bic.w	r3, r3, #3
 8003386:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	68fa      	ldr	r2, [r7, #12]
 800338e:	4313      	orrs	r3, r2
 8003390:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	f023 0302 	bic.w	r3, r3, #2
 8003398:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	697a      	ldr	r2, [r7, #20]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4a20      	ldr	r2, [pc, #128]	; (8003428 <TIM_OC1_SetConfig+0xd8>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d003      	beq.n	80033b4 <TIM_OC1_SetConfig+0x64>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4a1f      	ldr	r2, [pc, #124]	; (800342c <TIM_OC1_SetConfig+0xdc>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d10c      	bne.n	80033ce <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	f023 0308 	bic.w	r3, r3, #8
 80033ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	697a      	ldr	r2, [r7, #20]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	f023 0304 	bic.w	r3, r3, #4
 80033cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a15      	ldr	r2, [pc, #84]	; (8003428 <TIM_OC1_SetConfig+0xd8>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d003      	beq.n	80033de <TIM_OC1_SetConfig+0x8e>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a14      	ldr	r2, [pc, #80]	; (800342c <TIM_OC1_SetConfig+0xdc>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d111      	bne.n	8003402 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80033ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	695b      	ldr	r3, [r3, #20]
 80033f2:	693a      	ldr	r2, [r7, #16]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	699b      	ldr	r3, [r3, #24]
 80033fc:	693a      	ldr	r2, [r7, #16]
 80033fe:	4313      	orrs	r3, r2
 8003400:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	693a      	ldr	r2, [r7, #16]
 8003406:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	68fa      	ldr	r2, [r7, #12]
 800340c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	685a      	ldr	r2, [r3, #4]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	697a      	ldr	r2, [r7, #20]
 800341a:	621a      	str	r2, [r3, #32]
}
 800341c:	bf00      	nop
 800341e:	371c      	adds	r7, #28
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr
 8003428:	40010000 	.word	0x40010000
 800342c:	40010400 	.word	0x40010400

08003430 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003430:	b480      	push	{r7}
 8003432:	b087      	sub	sp, #28
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6a1b      	ldr	r3, [r3, #32]
 800343e:	f023 0210 	bic.w	r2, r3, #16
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a1b      	ldr	r3, [r3, #32]
 800344a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	699b      	ldr	r3, [r3, #24]
 8003456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800345e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003466:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	021b      	lsls	r3, r3, #8
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	4313      	orrs	r3, r2
 8003472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	f023 0320 	bic.w	r3, r3, #32
 800347a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	011b      	lsls	r3, r3, #4
 8003482:	697a      	ldr	r2, [r7, #20]
 8003484:	4313      	orrs	r3, r2
 8003486:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	4a22      	ldr	r2, [pc, #136]	; (8003514 <TIM_OC2_SetConfig+0xe4>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d003      	beq.n	8003498 <TIM_OC2_SetConfig+0x68>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	4a21      	ldr	r2, [pc, #132]	; (8003518 <TIM_OC2_SetConfig+0xe8>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d10d      	bne.n	80034b4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800349e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	011b      	lsls	r3, r3, #4
 80034a6:	697a      	ldr	r2, [r7, #20]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034b2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	4a17      	ldr	r2, [pc, #92]	; (8003514 <TIM_OC2_SetConfig+0xe4>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d003      	beq.n	80034c4 <TIM_OC2_SetConfig+0x94>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4a16      	ldr	r2, [pc, #88]	; (8003518 <TIM_OC2_SetConfig+0xe8>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d113      	bne.n	80034ec <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	695b      	ldr	r3, [r3, #20]
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	693a      	ldr	r2, [r7, #16]
 80034dc:	4313      	orrs	r3, r2
 80034de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	699b      	ldr	r3, [r3, #24]
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	693a      	ldr	r2, [r7, #16]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	693a      	ldr	r2, [r7, #16]
 80034f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	68fa      	ldr	r2, [r7, #12]
 80034f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	685a      	ldr	r2, [r3, #4]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	697a      	ldr	r2, [r7, #20]
 8003504:	621a      	str	r2, [r3, #32]
}
 8003506:	bf00      	nop
 8003508:	371c      	adds	r7, #28
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
 8003512:	bf00      	nop
 8003514:	40010000 	.word	0x40010000
 8003518:	40010400 	.word	0x40010400

0800351c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800351c:	b480      	push	{r7}
 800351e:	b087      	sub	sp, #28
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a1b      	ldr	r3, [r3, #32]
 800352a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6a1b      	ldr	r3, [r3, #32]
 8003536:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	69db      	ldr	r3, [r3, #28]
 8003542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800354a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f023 0303 	bic.w	r3, r3, #3
 8003552:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	68fa      	ldr	r2, [r7, #12]
 800355a:	4313      	orrs	r3, r2
 800355c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003564:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	021b      	lsls	r3, r3, #8
 800356c:	697a      	ldr	r2, [r7, #20]
 800356e:	4313      	orrs	r3, r2
 8003570:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a21      	ldr	r2, [pc, #132]	; (80035fc <TIM_OC3_SetConfig+0xe0>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d003      	beq.n	8003582 <TIM_OC3_SetConfig+0x66>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a20      	ldr	r2, [pc, #128]	; (8003600 <TIM_OC3_SetConfig+0xe4>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d10d      	bne.n	800359e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003588:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	021b      	lsls	r3, r3, #8
 8003590:	697a      	ldr	r2, [r7, #20]
 8003592:	4313      	orrs	r3, r2
 8003594:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800359c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a16      	ldr	r2, [pc, #88]	; (80035fc <TIM_OC3_SetConfig+0xe0>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d003      	beq.n	80035ae <TIM_OC3_SetConfig+0x92>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a15      	ldr	r2, [pc, #84]	; (8003600 <TIM_OC3_SetConfig+0xe4>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d113      	bne.n	80035d6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80035b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80035bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	695b      	ldr	r3, [r3, #20]
 80035c2:	011b      	lsls	r3, r3, #4
 80035c4:	693a      	ldr	r2, [r7, #16]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	699b      	ldr	r3, [r3, #24]
 80035ce:	011b      	lsls	r3, r3, #4
 80035d0:	693a      	ldr	r2, [r7, #16]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	693a      	ldr	r2, [r7, #16]
 80035da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	685a      	ldr	r2, [r3, #4]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	697a      	ldr	r2, [r7, #20]
 80035ee:	621a      	str	r2, [r3, #32]
}
 80035f0:	bf00      	nop
 80035f2:	371c      	adds	r7, #28
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr
 80035fc:	40010000 	.word	0x40010000
 8003600:	40010400 	.word	0x40010400

08003604 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003604:	b480      	push	{r7}
 8003606:	b087      	sub	sp, #28
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a1b      	ldr	r3, [r3, #32]
 8003612:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a1b      	ldr	r3, [r3, #32]
 800361e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	69db      	ldr	r3, [r3, #28]
 800362a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003632:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800363a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	021b      	lsls	r3, r3, #8
 8003642:	68fa      	ldr	r2, [r7, #12]
 8003644:	4313      	orrs	r3, r2
 8003646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800364e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	031b      	lsls	r3, r3, #12
 8003656:	693a      	ldr	r2, [r7, #16]
 8003658:	4313      	orrs	r3, r2
 800365a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	4a12      	ldr	r2, [pc, #72]	; (80036a8 <TIM_OC4_SetConfig+0xa4>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d003      	beq.n	800366c <TIM_OC4_SetConfig+0x68>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a11      	ldr	r2, [pc, #68]	; (80036ac <TIM_OC4_SetConfig+0xa8>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d109      	bne.n	8003680 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003672:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	695b      	ldr	r3, [r3, #20]
 8003678:	019b      	lsls	r3, r3, #6
 800367a:	697a      	ldr	r2, [r7, #20]
 800367c:	4313      	orrs	r3, r2
 800367e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	697a      	ldr	r2, [r7, #20]
 8003684:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	68fa      	ldr	r2, [r7, #12]
 800368a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	685a      	ldr	r2, [r3, #4]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	693a      	ldr	r2, [r7, #16]
 8003698:	621a      	str	r2, [r3, #32]
}
 800369a:	bf00      	nop
 800369c:	371c      	adds	r7, #28
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	40010000 	.word	0x40010000
 80036ac:	40010400 	.word	0x40010400

080036b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b087      	sub	sp, #28
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6a1b      	ldr	r3, [r3, #32]
 80036c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6a1b      	ldr	r3, [r3, #32]
 80036c6:	f023 0201 	bic.w	r2, r3, #1
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	011b      	lsls	r3, r3, #4
 80036e0:	693a      	ldr	r2, [r7, #16]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	f023 030a 	bic.w	r3, r3, #10
 80036ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80036ee:	697a      	ldr	r2, [r7, #20]
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	693a      	ldr	r2, [r7, #16]
 80036fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	697a      	ldr	r2, [r7, #20]
 8003700:	621a      	str	r2, [r3, #32]
}
 8003702:	bf00      	nop
 8003704:	371c      	adds	r7, #28
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr

0800370e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800370e:	b480      	push	{r7}
 8003710:	b087      	sub	sp, #28
 8003712:	af00      	add	r7, sp, #0
 8003714:	60f8      	str	r0, [r7, #12]
 8003716:	60b9      	str	r1, [r7, #8]
 8003718:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6a1b      	ldr	r3, [r3, #32]
 800371e:	f023 0210 	bic.w	r2, r3, #16
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6a1b      	ldr	r3, [r3, #32]
 8003730:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003738:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	031b      	lsls	r3, r3, #12
 800373e:	697a      	ldr	r2, [r7, #20]
 8003740:	4313      	orrs	r3, r2
 8003742:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800374a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	011b      	lsls	r3, r3, #4
 8003750:	693a      	ldr	r2, [r7, #16]
 8003752:	4313      	orrs	r3, r2
 8003754:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	697a      	ldr	r2, [r7, #20]
 800375a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	693a      	ldr	r2, [r7, #16]
 8003760:	621a      	str	r2, [r3, #32]
}
 8003762:	bf00      	nop
 8003764:	371c      	adds	r7, #28
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr

0800376e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800376e:	b480      	push	{r7}
 8003770:	b085      	sub	sp, #20
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
 8003776:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003784:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003786:	683a      	ldr	r2, [r7, #0]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	4313      	orrs	r3, r2
 800378c:	f043 0307 	orr.w	r3, r3, #7
 8003790:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	68fa      	ldr	r2, [r7, #12]
 8003796:	609a      	str	r2, [r3, #8]
}
 8003798:	bf00      	nop
 800379a:	3714      	adds	r7, #20
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b087      	sub	sp, #28
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	60f8      	str	r0, [r7, #12]
 80037ac:	60b9      	str	r1, [r7, #8]
 80037ae:	607a      	str	r2, [r7, #4]
 80037b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	021a      	lsls	r2, r3, #8
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	431a      	orrs	r2, r3
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	697a      	ldr	r2, [r7, #20]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	697a      	ldr	r2, [r7, #20]
 80037d6:	609a      	str	r2, [r3, #8]
}
 80037d8:	bf00      	nop
 80037da:	371c      	adds	r7, #28
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b087      	sub	sp, #28
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	60b9      	str	r1, [r7, #8]
 80037ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	f003 031f 	and.w	r3, r3, #31
 80037f6:	2201      	movs	r2, #1
 80037f8:	fa02 f303 	lsl.w	r3, r2, r3
 80037fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6a1a      	ldr	r2, [r3, #32]
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	43db      	mvns	r3, r3
 8003806:	401a      	ands	r2, r3
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6a1a      	ldr	r2, [r3, #32]
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	f003 031f 	and.w	r3, r3, #31
 8003816:	6879      	ldr	r1, [r7, #4]
 8003818:	fa01 f303 	lsl.w	r3, r1, r3
 800381c:	431a      	orrs	r2, r3
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	621a      	str	r2, [r3, #32]
}
 8003822:	bf00      	nop
 8003824:	371c      	adds	r7, #28
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr
	...

08003830 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003830:	b480      	push	{r7}
 8003832:	b085      	sub	sp, #20
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003840:	2b01      	cmp	r3, #1
 8003842:	d101      	bne.n	8003848 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003844:	2302      	movs	r3, #2
 8003846:	e05a      	b.n	80038fe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2202      	movs	r2, #2
 8003854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800386e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	68fa      	ldr	r2, [r7, #12]
 8003876:	4313      	orrs	r3, r2
 8003878:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68fa      	ldr	r2, [r7, #12]
 8003880:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a21      	ldr	r2, [pc, #132]	; (800390c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d022      	beq.n	80038d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003894:	d01d      	beq.n	80038d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a1d      	ldr	r2, [pc, #116]	; (8003910 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d018      	beq.n	80038d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a1b      	ldr	r2, [pc, #108]	; (8003914 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d013      	beq.n	80038d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a1a      	ldr	r2, [pc, #104]	; (8003918 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d00e      	beq.n	80038d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a18      	ldr	r2, [pc, #96]	; (800391c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d009      	beq.n	80038d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a17      	ldr	r2, [pc, #92]	; (8003920 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d004      	beq.n	80038d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a15      	ldr	r2, [pc, #84]	; (8003924 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d10c      	bne.n	80038ec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	68ba      	ldr	r2, [r7, #8]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	68ba      	ldr	r2, [r7, #8]
 80038ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038fc:	2300      	movs	r3, #0
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3714      	adds	r7, #20
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	40010000 	.word	0x40010000
 8003910:	40000400 	.word	0x40000400
 8003914:	40000800 	.word	0x40000800
 8003918:	40000c00 	.word	0x40000c00
 800391c:	40010400 	.word	0x40010400
 8003920:	40014000 	.word	0x40014000
 8003924:	40001800 	.word	0x40001800

08003928 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003930:	bf00      	nop
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003944:	bf00      	nop
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b082      	sub	sp, #8
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d101      	bne.n	8003962 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e03f      	b.n	80039e2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003968:	b2db      	uxtb	r3, r3
 800396a:	2b00      	cmp	r3, #0
 800396c:	d106      	bne.n	800397c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f7fd fc3a 	bl	80011f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2224      	movs	r2, #36	; 0x24
 8003980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	68da      	ldr	r2, [r3, #12]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003992:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f000 fddf 	bl	8004558 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	691a      	ldr	r2, [r3, #16]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	695a      	ldr	r2, [r3, #20]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	68da      	ldr	r2, [r3, #12]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2220      	movs	r2, #32
 80039d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2220      	movs	r2, #32
 80039dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3708      	adds	r7, #8
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}

080039ea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039ea:	b580      	push	{r7, lr}
 80039ec:	b08a      	sub	sp, #40	; 0x28
 80039ee:	af02      	add	r7, sp, #8
 80039f0:	60f8      	str	r0, [r7, #12]
 80039f2:	60b9      	str	r1, [r7, #8]
 80039f4:	603b      	str	r3, [r7, #0]
 80039f6:	4613      	mov	r3, r2
 80039f8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80039fa:	2300      	movs	r3, #0
 80039fc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	2b20      	cmp	r3, #32
 8003a08:	d17c      	bne.n	8003b04 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d002      	beq.n	8003a16 <HAL_UART_Transmit+0x2c>
 8003a10:	88fb      	ldrh	r3, [r7, #6]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d101      	bne.n	8003a1a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e075      	b.n	8003b06 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d101      	bne.n	8003a28 <HAL_UART_Transmit+0x3e>
 8003a24:	2302      	movs	r3, #2
 8003a26:	e06e      	b.n	8003b06 <HAL_UART_Transmit+0x11c>
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2200      	movs	r2, #0
 8003a34:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2221      	movs	r2, #33	; 0x21
 8003a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a3e:	f7fd fd51 	bl	80014e4 <HAL_GetTick>
 8003a42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	88fa      	ldrh	r2, [r7, #6]
 8003a48:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	88fa      	ldrh	r2, [r7, #6]
 8003a4e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a58:	d108      	bne.n	8003a6c <HAL_UART_Transmit+0x82>
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d104      	bne.n	8003a6c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003a62:	2300      	movs	r3, #0
 8003a64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	61bb      	str	r3, [r7, #24]
 8003a6a:	e003      	b.n	8003a74 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a70:	2300      	movs	r3, #0
 8003a72:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003a7c:	e02a      	b.n	8003ad4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	9300      	str	r3, [sp, #0]
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	2200      	movs	r2, #0
 8003a86:	2180      	movs	r1, #128	; 0x80
 8003a88:	68f8      	ldr	r0, [r7, #12]
 8003a8a:	f000 fb1f 	bl	80040cc <UART_WaitOnFlagUntilTimeout>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d001      	beq.n	8003a98 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003a94:	2303      	movs	r3, #3
 8003a96:	e036      	b.n	8003b06 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d10b      	bne.n	8003ab6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	881b      	ldrh	r3, [r3, #0]
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003aac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	3302      	adds	r3, #2
 8003ab2:	61bb      	str	r3, [r7, #24]
 8003ab4:	e007      	b.n	8003ac6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	781a      	ldrb	r2, [r3, #0]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	3b01      	subs	r3, #1
 8003ace:	b29a      	uxth	r2, r3
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d1cf      	bne.n	8003a7e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	9300      	str	r3, [sp, #0]
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	2140      	movs	r1, #64	; 0x40
 8003ae8:	68f8      	ldr	r0, [r7, #12]
 8003aea:	f000 faef 	bl	80040cc <UART_WaitOnFlagUntilTimeout>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d001      	beq.n	8003af8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e006      	b.n	8003b06 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2220      	movs	r2, #32
 8003afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003b00:	2300      	movs	r3, #0
 8003b02:	e000      	b.n	8003b06 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003b04:	2302      	movs	r3, #2
  }
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3720      	adds	r7, #32
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	b084      	sub	sp, #16
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	60f8      	str	r0, [r7, #12]
 8003b16:	60b9      	str	r1, [r7, #8]
 8003b18:	4613      	mov	r3, r2
 8003b1a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	2b20      	cmp	r3, #32
 8003b26:	d11d      	bne.n	8003b64 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d002      	beq.n	8003b34 <HAL_UART_Receive_IT+0x26>
 8003b2e:	88fb      	ldrh	r3, [r7, #6]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d101      	bne.n	8003b38 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e016      	b.n	8003b66 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d101      	bne.n	8003b46 <HAL_UART_Receive_IT+0x38>
 8003b42:	2302      	movs	r3, #2
 8003b44:	e00f      	b.n	8003b66 <HAL_UART_Receive_IT+0x58>
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2201      	movs	r2, #1
 8003b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2200      	movs	r2, #0
 8003b52:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003b54:	88fb      	ldrh	r3, [r7, #6]
 8003b56:	461a      	mov	r2, r3
 8003b58:	68b9      	ldr	r1, [r7, #8]
 8003b5a:	68f8      	ldr	r0, [r7, #12]
 8003b5c:	f000 fb24 	bl	80041a8 <UART_Start_Receive_IT>
 8003b60:	4603      	mov	r3, r0
 8003b62:	e000      	b.n	8003b66 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003b64:	2302      	movs	r3, #2
  }
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3710      	adds	r7, #16
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
	...

08003b70 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b0ba      	sub	sp, #232	; 0xe8
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	695b      	ldr	r3, [r3, #20]
 8003b92:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003b96:	2300      	movs	r3, #0
 8003b98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003ba2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ba6:	f003 030f 	and.w	r3, r3, #15
 8003baa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003bae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d10f      	bne.n	8003bd6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003bb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bba:	f003 0320 	and.w	r3, r3, #32
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d009      	beq.n	8003bd6 <HAL_UART_IRQHandler+0x66>
 8003bc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bc6:	f003 0320 	and.w	r3, r3, #32
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d003      	beq.n	8003bd6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f000 fc07 	bl	80043e2 <UART_Receive_IT>
      return;
 8003bd4:	e256      	b.n	8004084 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003bd6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	f000 80de 	beq.w	8003d9c <HAL_UART_IRQHandler+0x22c>
 8003be0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003be4:	f003 0301 	and.w	r3, r3, #1
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d106      	bne.n	8003bfa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003bec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bf0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	f000 80d1 	beq.w	8003d9c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003bfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d00b      	beq.n	8003c1e <HAL_UART_IRQHandler+0xae>
 8003c06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d005      	beq.n	8003c1e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c16:	f043 0201 	orr.w	r2, r3, #1
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c22:	f003 0304 	and.w	r3, r3, #4
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d00b      	beq.n	8003c42 <HAL_UART_IRQHandler+0xd2>
 8003c2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c2e:	f003 0301 	and.w	r3, r3, #1
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d005      	beq.n	8003c42 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3a:	f043 0202 	orr.w	r2, r3, #2
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c46:	f003 0302 	and.w	r3, r3, #2
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d00b      	beq.n	8003c66 <HAL_UART_IRQHandler+0xf6>
 8003c4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c52:	f003 0301 	and.w	r3, r3, #1
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d005      	beq.n	8003c66 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5e:	f043 0204 	orr.w	r2, r3, #4
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003c66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c6a:	f003 0308 	and.w	r3, r3, #8
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d011      	beq.n	8003c96 <HAL_UART_IRQHandler+0x126>
 8003c72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c76:	f003 0320 	and.w	r3, r3, #32
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d105      	bne.n	8003c8a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003c7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c82:	f003 0301 	and.w	r3, r3, #1
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d005      	beq.n	8003c96 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8e:	f043 0208 	orr.w	r2, r3, #8
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	f000 81ed 	beq.w	800407a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ca0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ca4:	f003 0320 	and.w	r3, r3, #32
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d008      	beq.n	8003cbe <HAL_UART_IRQHandler+0x14e>
 8003cac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cb0:	f003 0320 	and.w	r3, r3, #32
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d002      	beq.n	8003cbe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f000 fb92 	bl	80043e2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	695b      	ldr	r3, [r3, #20]
 8003cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cc8:	2b40      	cmp	r3, #64	; 0x40
 8003cca:	bf0c      	ite	eq
 8003ccc:	2301      	moveq	r3, #1
 8003cce:	2300      	movne	r3, #0
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cda:	f003 0308 	and.w	r3, r3, #8
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d103      	bne.n	8003cea <HAL_UART_IRQHandler+0x17a>
 8003ce2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d04f      	beq.n	8003d8a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f000 fa9a 	bl	8004224 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	695b      	ldr	r3, [r3, #20]
 8003cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cfa:	2b40      	cmp	r3, #64	; 0x40
 8003cfc:	d141      	bne.n	8003d82 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	3314      	adds	r3, #20
 8003d04:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d08:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003d0c:	e853 3f00 	ldrex	r3, [r3]
 8003d10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003d14:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003d18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	3314      	adds	r3, #20
 8003d26:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003d2a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003d2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d32:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003d36:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003d3a:	e841 2300 	strex	r3, r2, [r1]
 8003d3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003d42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d1d9      	bne.n	8003cfe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d013      	beq.n	8003d7a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d56:	4a7d      	ldr	r2, [pc, #500]	; (8003f4c <HAL_UART_IRQHandler+0x3dc>)
 8003d58:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f7fd fd4d 	bl	80017fe <HAL_DMA_Abort_IT>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d016      	beq.n	8003d98 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d74:	4610      	mov	r0, r2
 8003d76:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d78:	e00e      	b.n	8003d98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f000 f990 	bl	80040a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d80:	e00a      	b.n	8003d98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f000 f98c 	bl	80040a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d88:	e006      	b.n	8003d98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f000 f988 	bl	80040a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003d96:	e170      	b.n	800407a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d98:	bf00      	nop
    return;
 8003d9a:	e16e      	b.n	800407a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	f040 814a 	bne.w	800403a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003da6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003daa:	f003 0310 	and.w	r3, r3, #16
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	f000 8143 	beq.w	800403a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003db4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003db8:	f003 0310 	and.w	r3, r3, #16
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	f000 813c 	beq.w	800403a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	60bb      	str	r3, [r7, #8]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	60bb      	str	r3, [r7, #8]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	60bb      	str	r3, [r7, #8]
 8003dd6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	695b      	ldr	r3, [r3, #20]
 8003dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003de2:	2b40      	cmp	r3, #64	; 0x40
 8003de4:	f040 80b4 	bne.w	8003f50 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003df4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	f000 8140 	beq.w	800407e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e06:	429a      	cmp	r2, r3
 8003e08:	f080 8139 	bcs.w	800407e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e12:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e18:	69db      	ldr	r3, [r3, #28]
 8003e1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e1e:	f000 8088 	beq.w	8003f32 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	330c      	adds	r3, #12
 8003e28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e30:	e853 3f00 	ldrex	r3, [r3]
 8003e34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003e38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	330c      	adds	r3, #12
 8003e4a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003e4e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003e52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e56:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003e5a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003e5e:	e841 2300 	strex	r3, r2, [r1]
 8003e62:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003e66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d1d9      	bne.n	8003e22 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	3314      	adds	r3, #20
 8003e74:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e78:	e853 3f00 	ldrex	r3, [r3]
 8003e7c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003e7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e80:	f023 0301 	bic.w	r3, r3, #1
 8003e84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	3314      	adds	r3, #20
 8003e8e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003e92:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003e96:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e98:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003e9a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003e9e:	e841 2300 	strex	r3, r2, [r1]
 8003ea2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003ea4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d1e1      	bne.n	8003e6e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	3314      	adds	r3, #20
 8003eb0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003eb4:	e853 3f00 	ldrex	r3, [r3]
 8003eb8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003eba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ebc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ec0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	3314      	adds	r3, #20
 8003eca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003ece:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003ed0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003ed4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003ed6:	e841 2300 	strex	r3, r2, [r1]
 8003eda:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003edc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d1e3      	bne.n	8003eaa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2220      	movs	r2, #32
 8003ee6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	330c      	adds	r3, #12
 8003ef6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003efa:	e853 3f00 	ldrex	r3, [r3]
 8003efe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003f00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f02:	f023 0310 	bic.w	r3, r3, #16
 8003f06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	330c      	adds	r3, #12
 8003f10:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003f14:	65ba      	str	r2, [r7, #88]	; 0x58
 8003f16:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f18:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003f1a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003f1c:	e841 2300 	strex	r3, r2, [r1]
 8003f20:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003f22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d1e3      	bne.n	8003ef0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f7fd fbf6 	bl	800171e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	4619      	mov	r1, r3
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f000 f8b6 	bl	80040b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f48:	e099      	b.n	800407e <HAL_UART_IRQHandler+0x50e>
 8003f4a:	bf00      	nop
 8003f4c:	080042eb 	.word	0x080042eb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	f000 808b 	beq.w	8004082 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003f6c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	f000 8086 	beq.w	8004082 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	330c      	adds	r3, #12
 8003f7c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f80:	e853 3f00 	ldrex	r3, [r3]
 8003f84:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003f86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f88:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f8c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	330c      	adds	r3, #12
 8003f96:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003f9a:	647a      	str	r2, [r7, #68]	; 0x44
 8003f9c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f9e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003fa0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003fa2:	e841 2300 	strex	r3, r2, [r1]
 8003fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003fa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d1e3      	bne.n	8003f76 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	3314      	adds	r3, #20
 8003fb4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb8:	e853 3f00 	ldrex	r3, [r3]
 8003fbc:	623b      	str	r3, [r7, #32]
   return(result);
 8003fbe:	6a3b      	ldr	r3, [r7, #32]
 8003fc0:	f023 0301 	bic.w	r3, r3, #1
 8003fc4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	3314      	adds	r3, #20
 8003fce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003fd2:	633a      	str	r2, [r7, #48]	; 0x30
 8003fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003fd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fda:	e841 2300 	strex	r3, r2, [r1]
 8003fde:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d1e3      	bne.n	8003fae <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2220      	movs	r2, #32
 8003fea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	330c      	adds	r3, #12
 8003ffa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	e853 3f00 	ldrex	r3, [r3]
 8004002:	60fb      	str	r3, [r7, #12]
   return(result);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f023 0310 	bic.w	r3, r3, #16
 800400a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	330c      	adds	r3, #12
 8004014:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004018:	61fa      	str	r2, [r7, #28]
 800401a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800401c:	69b9      	ldr	r1, [r7, #24]
 800401e:	69fa      	ldr	r2, [r7, #28]
 8004020:	e841 2300 	strex	r3, r2, [r1]
 8004024:	617b      	str	r3, [r7, #20]
   return(result);
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d1e3      	bne.n	8003ff4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800402c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004030:	4619      	mov	r1, r3
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f000 f83e 	bl	80040b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004038:	e023      	b.n	8004082 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800403a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800403e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004042:	2b00      	cmp	r3, #0
 8004044:	d009      	beq.n	800405a <HAL_UART_IRQHandler+0x4ea>
 8004046:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800404a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800404e:	2b00      	cmp	r3, #0
 8004050:	d003      	beq.n	800405a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 f95d 	bl	8004312 <UART_Transmit_IT>
    return;
 8004058:	e014      	b.n	8004084 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800405a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800405e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004062:	2b00      	cmp	r3, #0
 8004064:	d00e      	beq.n	8004084 <HAL_UART_IRQHandler+0x514>
 8004066:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800406a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800406e:	2b00      	cmp	r3, #0
 8004070:	d008      	beq.n	8004084 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 f99d 	bl	80043b2 <UART_EndTransmit_IT>
    return;
 8004078:	e004      	b.n	8004084 <HAL_UART_IRQHandler+0x514>
    return;
 800407a:	bf00      	nop
 800407c:	e002      	b.n	8004084 <HAL_UART_IRQHandler+0x514>
      return;
 800407e:	bf00      	nop
 8004080:	e000      	b.n	8004084 <HAL_UART_IRQHandler+0x514>
      return;
 8004082:	bf00      	nop
  }
}
 8004084:	37e8      	adds	r7, #232	; 0xe8
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop

0800408c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800408c:	b480      	push	{r7}
 800408e:	b083      	sub	sp, #12
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004094:	bf00      	nop
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80040a8:	bf00      	nop
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	460b      	mov	r3, r1
 80040be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80040c0:	bf00      	nop
 80040c2:	370c      	adds	r7, #12
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr

080040cc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b090      	sub	sp, #64	; 0x40
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	60b9      	str	r1, [r7, #8]
 80040d6:	603b      	str	r3, [r7, #0]
 80040d8:	4613      	mov	r3, r2
 80040da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040dc:	e050      	b.n	8004180 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040e4:	d04c      	beq.n	8004180 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80040e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d007      	beq.n	80040fc <UART_WaitOnFlagUntilTimeout+0x30>
 80040ec:	f7fd f9fa 	bl	80014e4 <HAL_GetTick>
 80040f0:	4602      	mov	r2, r0
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d241      	bcs.n	8004180 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	330c      	adds	r3, #12
 8004102:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004106:	e853 3f00 	ldrex	r3, [r3]
 800410a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800410c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004112:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	330c      	adds	r3, #12
 800411a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800411c:	637a      	str	r2, [r7, #52]	; 0x34
 800411e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004120:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004122:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004124:	e841 2300 	strex	r3, r2, [r1]
 8004128:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800412a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800412c:	2b00      	cmp	r3, #0
 800412e:	d1e5      	bne.n	80040fc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	3314      	adds	r3, #20
 8004136:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	e853 3f00 	ldrex	r3, [r3]
 800413e:	613b      	str	r3, [r7, #16]
   return(result);
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	f023 0301 	bic.w	r3, r3, #1
 8004146:	63bb      	str	r3, [r7, #56]	; 0x38
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	3314      	adds	r3, #20
 800414e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004150:	623a      	str	r2, [r7, #32]
 8004152:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004154:	69f9      	ldr	r1, [r7, #28]
 8004156:	6a3a      	ldr	r2, [r7, #32]
 8004158:	e841 2300 	strex	r3, r2, [r1]
 800415c:	61bb      	str	r3, [r7, #24]
   return(result);
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d1e5      	bne.n	8004130 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2220      	movs	r2, #32
 8004168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2220      	movs	r2, #32
 8004170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2200      	movs	r2, #0
 8004178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800417c:	2303      	movs	r3, #3
 800417e:	e00f      	b.n	80041a0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	4013      	ands	r3, r2
 800418a:	68ba      	ldr	r2, [r7, #8]
 800418c:	429a      	cmp	r2, r3
 800418e:	bf0c      	ite	eq
 8004190:	2301      	moveq	r3, #1
 8004192:	2300      	movne	r3, #0
 8004194:	b2db      	uxtb	r3, r3
 8004196:	461a      	mov	r2, r3
 8004198:	79fb      	ldrb	r3, [r7, #7]
 800419a:	429a      	cmp	r2, r3
 800419c:	d09f      	beq.n	80040de <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800419e:	2300      	movs	r3, #0
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3740      	adds	r7, #64	; 0x40
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}

080041a8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b085      	sub	sp, #20
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	60b9      	str	r1, [r7, #8]
 80041b2:	4613      	mov	r3, r2
 80041b4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	68ba      	ldr	r2, [r7, #8]
 80041ba:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	88fa      	ldrh	r2, [r7, #6]
 80041c0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	88fa      	ldrh	r2, [r7, #6]
 80041c6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2200      	movs	r2, #0
 80041cc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2222      	movs	r2, #34	; 0x22
 80041d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d007      	beq.n	80041f6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68da      	ldr	r2, [r3, #12]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041f4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	695a      	ldr	r2, [r3, #20]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f042 0201 	orr.w	r2, r2, #1
 8004204:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68da      	ldr	r2, [r3, #12]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f042 0220 	orr.w	r2, r2, #32
 8004214:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004216:	2300      	movs	r3, #0
}
 8004218:	4618      	mov	r0, r3
 800421a:	3714      	adds	r7, #20
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr

08004224 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004224:	b480      	push	{r7}
 8004226:	b095      	sub	sp, #84	; 0x54
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	330c      	adds	r3, #12
 8004232:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004236:	e853 3f00 	ldrex	r3, [r3]
 800423a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800423c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800423e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004242:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	330c      	adds	r3, #12
 800424a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800424c:	643a      	str	r2, [r7, #64]	; 0x40
 800424e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004250:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004252:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004254:	e841 2300 	strex	r3, r2, [r1]
 8004258:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800425a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800425c:	2b00      	cmp	r3, #0
 800425e:	d1e5      	bne.n	800422c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	3314      	adds	r3, #20
 8004266:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004268:	6a3b      	ldr	r3, [r7, #32]
 800426a:	e853 3f00 	ldrex	r3, [r3]
 800426e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	f023 0301 	bic.w	r3, r3, #1
 8004276:	64bb      	str	r3, [r7, #72]	; 0x48
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	3314      	adds	r3, #20
 800427e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004280:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004282:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004284:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004286:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004288:	e841 2300 	strex	r3, r2, [r1]
 800428c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800428e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004290:	2b00      	cmp	r3, #0
 8004292:	d1e5      	bne.n	8004260 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004298:	2b01      	cmp	r3, #1
 800429a:	d119      	bne.n	80042d0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	330c      	adds	r3, #12
 80042a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	e853 3f00 	ldrex	r3, [r3]
 80042aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	f023 0310 	bic.w	r3, r3, #16
 80042b2:	647b      	str	r3, [r7, #68]	; 0x44
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	330c      	adds	r3, #12
 80042ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042bc:	61ba      	str	r2, [r7, #24]
 80042be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c0:	6979      	ldr	r1, [r7, #20]
 80042c2:	69ba      	ldr	r2, [r7, #24]
 80042c4:	e841 2300 	strex	r3, r2, [r1]
 80042c8:	613b      	str	r3, [r7, #16]
   return(result);
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d1e5      	bne.n	800429c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2220      	movs	r2, #32
 80042d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80042de:	bf00      	nop
 80042e0:	3754      	adds	r7, #84	; 0x54
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr

080042ea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80042ea:	b580      	push	{r7, lr}
 80042ec:	b084      	sub	sp, #16
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2200      	movs	r2, #0
 80042fc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2200      	movs	r2, #0
 8004302:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004304:	68f8      	ldr	r0, [r7, #12]
 8004306:	f7ff fecb 	bl	80040a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800430a:	bf00      	nop
 800430c:	3710      	adds	r7, #16
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}

08004312 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004312:	b480      	push	{r7}
 8004314:	b085      	sub	sp, #20
 8004316:	af00      	add	r7, sp, #0
 8004318:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004320:	b2db      	uxtb	r3, r3
 8004322:	2b21      	cmp	r3, #33	; 0x21
 8004324:	d13e      	bne.n	80043a4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800432e:	d114      	bne.n	800435a <UART_Transmit_IT+0x48>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	691b      	ldr	r3, [r3, #16]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d110      	bne.n	800435a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a1b      	ldr	r3, [r3, #32]
 800433c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	881b      	ldrh	r3, [r3, #0]
 8004342:	461a      	mov	r2, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800434c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a1b      	ldr	r3, [r3, #32]
 8004352:	1c9a      	adds	r2, r3, #2
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	621a      	str	r2, [r3, #32]
 8004358:	e008      	b.n	800436c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6a1b      	ldr	r3, [r3, #32]
 800435e:	1c59      	adds	r1, r3, #1
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	6211      	str	r1, [r2, #32]
 8004364:	781a      	ldrb	r2, [r3, #0]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004370:	b29b      	uxth	r3, r3
 8004372:	3b01      	subs	r3, #1
 8004374:	b29b      	uxth	r3, r3
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	4619      	mov	r1, r3
 800437a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800437c:	2b00      	cmp	r3, #0
 800437e:	d10f      	bne.n	80043a0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	68da      	ldr	r2, [r3, #12]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800438e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	68da      	ldr	r2, [r3, #12]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800439e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80043a0:	2300      	movs	r3, #0
 80043a2:	e000      	b.n	80043a6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80043a4:	2302      	movs	r3, #2
  }
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3714      	adds	r7, #20
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr

080043b2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80043b2:	b580      	push	{r7, lr}
 80043b4:	b082      	sub	sp, #8
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	68da      	ldr	r2, [r3, #12]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043c8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2220      	movs	r2, #32
 80043ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f7ff fe5a 	bl	800408c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80043d8:	2300      	movs	r3, #0
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3708      	adds	r7, #8
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}

080043e2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80043e2:	b580      	push	{r7, lr}
 80043e4:	b08c      	sub	sp, #48	; 0x30
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	2b22      	cmp	r3, #34	; 0x22
 80043f4:	f040 80ab 	bne.w	800454e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004400:	d117      	bne.n	8004432 <UART_Receive_IT+0x50>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d113      	bne.n	8004432 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800440a:	2300      	movs	r3, #0
 800440c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004412:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	b29b      	uxth	r3, r3
 800441c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004420:	b29a      	uxth	r2, r3
 8004422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004424:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800442a:	1c9a      	adds	r2, r3, #2
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	629a      	str	r2, [r3, #40]	; 0x28
 8004430:	e026      	b.n	8004480 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004436:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004438:	2300      	movs	r3, #0
 800443a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004444:	d007      	beq.n	8004456 <UART_Receive_IT+0x74>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d10a      	bne.n	8004464 <UART_Receive_IT+0x82>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d106      	bne.n	8004464 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	b2da      	uxtb	r2, r3
 800445e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004460:	701a      	strb	r2, [r3, #0]
 8004462:	e008      	b.n	8004476 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	b2db      	uxtb	r3, r3
 800446c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004470:	b2da      	uxtb	r2, r3
 8004472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004474:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800447a:	1c5a      	adds	r2, r3, #1
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004484:	b29b      	uxth	r3, r3
 8004486:	3b01      	subs	r3, #1
 8004488:	b29b      	uxth	r3, r3
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	4619      	mov	r1, r3
 800448e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004490:	2b00      	cmp	r3, #0
 8004492:	d15a      	bne.n	800454a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	68da      	ldr	r2, [r3, #12]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f022 0220 	bic.w	r2, r2, #32
 80044a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	68da      	ldr	r2, [r3, #12]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	695a      	ldr	r2, [r3, #20]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f022 0201 	bic.w	r2, r2, #1
 80044c2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2220      	movs	r2, #32
 80044c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d135      	bne.n	8004540 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	330c      	adds	r3, #12
 80044e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	e853 3f00 	ldrex	r3, [r3]
 80044e8:	613b      	str	r3, [r7, #16]
   return(result);
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	f023 0310 	bic.w	r3, r3, #16
 80044f0:	627b      	str	r3, [r7, #36]	; 0x24
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	330c      	adds	r3, #12
 80044f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044fa:	623a      	str	r2, [r7, #32]
 80044fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044fe:	69f9      	ldr	r1, [r7, #28]
 8004500:	6a3a      	ldr	r2, [r7, #32]
 8004502:	e841 2300 	strex	r3, r2, [r1]
 8004506:	61bb      	str	r3, [r7, #24]
   return(result);
 8004508:	69bb      	ldr	r3, [r7, #24]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d1e5      	bne.n	80044da <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 0310 	and.w	r3, r3, #16
 8004518:	2b10      	cmp	r3, #16
 800451a:	d10a      	bne.n	8004532 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800451c:	2300      	movs	r3, #0
 800451e:	60fb      	str	r3, [r7, #12]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	60fb      	str	r3, [r7, #12]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	60fb      	str	r3, [r7, #12]
 8004530:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004536:	4619      	mov	r1, r3
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f7ff fdbb 	bl	80040b4 <HAL_UARTEx_RxEventCallback>
 800453e:	e002      	b.n	8004546 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f7fc fb2b 	bl	8000b9c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004546:	2300      	movs	r3, #0
 8004548:	e002      	b.n	8004550 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800454a:	2300      	movs	r3, #0
 800454c:	e000      	b.n	8004550 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800454e:	2302      	movs	r3, #2
  }
}
 8004550:	4618      	mov	r0, r3
 8004552:	3730      	adds	r7, #48	; 0x30
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}

08004558 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004558:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800455c:	b0c0      	sub	sp, #256	; 0x100
 800455e:	af00      	add	r7, sp, #0
 8004560:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	691b      	ldr	r3, [r3, #16]
 800456c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004574:	68d9      	ldr	r1, [r3, #12]
 8004576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	ea40 0301 	orr.w	r3, r0, r1
 8004580:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004586:	689a      	ldr	r2, [r3, #8]
 8004588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800458c:	691b      	ldr	r3, [r3, #16]
 800458e:	431a      	orrs	r2, r3
 8004590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004594:	695b      	ldr	r3, [r3, #20]
 8004596:	431a      	orrs	r2, r3
 8004598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800459c:	69db      	ldr	r3, [r3, #28]
 800459e:	4313      	orrs	r3, r2
 80045a0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80045a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80045b0:	f021 010c 	bic.w	r1, r1, #12
 80045b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80045be:	430b      	orrs	r3, r1
 80045c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80045c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	695b      	ldr	r3, [r3, #20]
 80045ca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80045ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045d2:	6999      	ldr	r1, [r3, #24]
 80045d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	ea40 0301 	orr.w	r3, r0, r1
 80045de:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80045e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	4b8f      	ldr	r3, [pc, #572]	; (8004824 <UART_SetConfig+0x2cc>)
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d005      	beq.n	80045f8 <UART_SetConfig+0xa0>
 80045ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	4b8d      	ldr	r3, [pc, #564]	; (8004828 <UART_SetConfig+0x2d0>)
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d104      	bne.n	8004602 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80045f8:	f7fd fbf2 	bl	8001de0 <HAL_RCC_GetPCLK2Freq>
 80045fc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004600:	e003      	b.n	800460a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004602:	f7fd fbd9 	bl	8001db8 <HAL_RCC_GetPCLK1Freq>
 8004606:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800460a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800460e:	69db      	ldr	r3, [r3, #28]
 8004610:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004614:	f040 810c 	bne.w	8004830 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004618:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800461c:	2200      	movs	r2, #0
 800461e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004622:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004626:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800462a:	4622      	mov	r2, r4
 800462c:	462b      	mov	r3, r5
 800462e:	1891      	adds	r1, r2, r2
 8004630:	65b9      	str	r1, [r7, #88]	; 0x58
 8004632:	415b      	adcs	r3, r3
 8004634:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004636:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800463a:	4621      	mov	r1, r4
 800463c:	eb12 0801 	adds.w	r8, r2, r1
 8004640:	4629      	mov	r1, r5
 8004642:	eb43 0901 	adc.w	r9, r3, r1
 8004646:	f04f 0200 	mov.w	r2, #0
 800464a:	f04f 0300 	mov.w	r3, #0
 800464e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004652:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004656:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800465a:	4690      	mov	r8, r2
 800465c:	4699      	mov	r9, r3
 800465e:	4623      	mov	r3, r4
 8004660:	eb18 0303 	adds.w	r3, r8, r3
 8004664:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004668:	462b      	mov	r3, r5
 800466a:	eb49 0303 	adc.w	r3, r9, r3
 800466e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004672:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800467e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004682:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004686:	460b      	mov	r3, r1
 8004688:	18db      	adds	r3, r3, r3
 800468a:	653b      	str	r3, [r7, #80]	; 0x50
 800468c:	4613      	mov	r3, r2
 800468e:	eb42 0303 	adc.w	r3, r2, r3
 8004692:	657b      	str	r3, [r7, #84]	; 0x54
 8004694:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004698:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800469c:	f7fb fe20 	bl	80002e0 <__aeabi_uldivmod>
 80046a0:	4602      	mov	r2, r0
 80046a2:	460b      	mov	r3, r1
 80046a4:	4b61      	ldr	r3, [pc, #388]	; (800482c <UART_SetConfig+0x2d4>)
 80046a6:	fba3 2302 	umull	r2, r3, r3, r2
 80046aa:	095b      	lsrs	r3, r3, #5
 80046ac:	011c      	lsls	r4, r3, #4
 80046ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046b2:	2200      	movs	r2, #0
 80046b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80046b8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80046bc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80046c0:	4642      	mov	r2, r8
 80046c2:	464b      	mov	r3, r9
 80046c4:	1891      	adds	r1, r2, r2
 80046c6:	64b9      	str	r1, [r7, #72]	; 0x48
 80046c8:	415b      	adcs	r3, r3
 80046ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80046d0:	4641      	mov	r1, r8
 80046d2:	eb12 0a01 	adds.w	sl, r2, r1
 80046d6:	4649      	mov	r1, r9
 80046d8:	eb43 0b01 	adc.w	fp, r3, r1
 80046dc:	f04f 0200 	mov.w	r2, #0
 80046e0:	f04f 0300 	mov.w	r3, #0
 80046e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80046e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80046ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046f0:	4692      	mov	sl, r2
 80046f2:	469b      	mov	fp, r3
 80046f4:	4643      	mov	r3, r8
 80046f6:	eb1a 0303 	adds.w	r3, sl, r3
 80046fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80046fe:	464b      	mov	r3, r9
 8004700:	eb4b 0303 	adc.w	r3, fp, r3
 8004704:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004714:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004718:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800471c:	460b      	mov	r3, r1
 800471e:	18db      	adds	r3, r3, r3
 8004720:	643b      	str	r3, [r7, #64]	; 0x40
 8004722:	4613      	mov	r3, r2
 8004724:	eb42 0303 	adc.w	r3, r2, r3
 8004728:	647b      	str	r3, [r7, #68]	; 0x44
 800472a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800472e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004732:	f7fb fdd5 	bl	80002e0 <__aeabi_uldivmod>
 8004736:	4602      	mov	r2, r0
 8004738:	460b      	mov	r3, r1
 800473a:	4611      	mov	r1, r2
 800473c:	4b3b      	ldr	r3, [pc, #236]	; (800482c <UART_SetConfig+0x2d4>)
 800473e:	fba3 2301 	umull	r2, r3, r3, r1
 8004742:	095b      	lsrs	r3, r3, #5
 8004744:	2264      	movs	r2, #100	; 0x64
 8004746:	fb02 f303 	mul.w	r3, r2, r3
 800474a:	1acb      	subs	r3, r1, r3
 800474c:	00db      	lsls	r3, r3, #3
 800474e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004752:	4b36      	ldr	r3, [pc, #216]	; (800482c <UART_SetConfig+0x2d4>)
 8004754:	fba3 2302 	umull	r2, r3, r3, r2
 8004758:	095b      	lsrs	r3, r3, #5
 800475a:	005b      	lsls	r3, r3, #1
 800475c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004760:	441c      	add	r4, r3
 8004762:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004766:	2200      	movs	r2, #0
 8004768:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800476c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004770:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004774:	4642      	mov	r2, r8
 8004776:	464b      	mov	r3, r9
 8004778:	1891      	adds	r1, r2, r2
 800477a:	63b9      	str	r1, [r7, #56]	; 0x38
 800477c:	415b      	adcs	r3, r3
 800477e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004780:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004784:	4641      	mov	r1, r8
 8004786:	1851      	adds	r1, r2, r1
 8004788:	6339      	str	r1, [r7, #48]	; 0x30
 800478a:	4649      	mov	r1, r9
 800478c:	414b      	adcs	r3, r1
 800478e:	637b      	str	r3, [r7, #52]	; 0x34
 8004790:	f04f 0200 	mov.w	r2, #0
 8004794:	f04f 0300 	mov.w	r3, #0
 8004798:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800479c:	4659      	mov	r1, fp
 800479e:	00cb      	lsls	r3, r1, #3
 80047a0:	4651      	mov	r1, sl
 80047a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047a6:	4651      	mov	r1, sl
 80047a8:	00ca      	lsls	r2, r1, #3
 80047aa:	4610      	mov	r0, r2
 80047ac:	4619      	mov	r1, r3
 80047ae:	4603      	mov	r3, r0
 80047b0:	4642      	mov	r2, r8
 80047b2:	189b      	adds	r3, r3, r2
 80047b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80047b8:	464b      	mov	r3, r9
 80047ba:	460a      	mov	r2, r1
 80047bc:	eb42 0303 	adc.w	r3, r2, r3
 80047c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80047c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80047d0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80047d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80047d8:	460b      	mov	r3, r1
 80047da:	18db      	adds	r3, r3, r3
 80047dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80047de:	4613      	mov	r3, r2
 80047e0:	eb42 0303 	adc.w	r3, r2, r3
 80047e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80047ea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80047ee:	f7fb fd77 	bl	80002e0 <__aeabi_uldivmod>
 80047f2:	4602      	mov	r2, r0
 80047f4:	460b      	mov	r3, r1
 80047f6:	4b0d      	ldr	r3, [pc, #52]	; (800482c <UART_SetConfig+0x2d4>)
 80047f8:	fba3 1302 	umull	r1, r3, r3, r2
 80047fc:	095b      	lsrs	r3, r3, #5
 80047fe:	2164      	movs	r1, #100	; 0x64
 8004800:	fb01 f303 	mul.w	r3, r1, r3
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	00db      	lsls	r3, r3, #3
 8004808:	3332      	adds	r3, #50	; 0x32
 800480a:	4a08      	ldr	r2, [pc, #32]	; (800482c <UART_SetConfig+0x2d4>)
 800480c:	fba2 2303 	umull	r2, r3, r2, r3
 8004810:	095b      	lsrs	r3, r3, #5
 8004812:	f003 0207 	and.w	r2, r3, #7
 8004816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4422      	add	r2, r4
 800481e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004820:	e105      	b.n	8004a2e <UART_SetConfig+0x4d6>
 8004822:	bf00      	nop
 8004824:	40011000 	.word	0x40011000
 8004828:	40011400 	.word	0x40011400
 800482c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004830:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004834:	2200      	movs	r2, #0
 8004836:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800483a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800483e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004842:	4642      	mov	r2, r8
 8004844:	464b      	mov	r3, r9
 8004846:	1891      	adds	r1, r2, r2
 8004848:	6239      	str	r1, [r7, #32]
 800484a:	415b      	adcs	r3, r3
 800484c:	627b      	str	r3, [r7, #36]	; 0x24
 800484e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004852:	4641      	mov	r1, r8
 8004854:	1854      	adds	r4, r2, r1
 8004856:	4649      	mov	r1, r9
 8004858:	eb43 0501 	adc.w	r5, r3, r1
 800485c:	f04f 0200 	mov.w	r2, #0
 8004860:	f04f 0300 	mov.w	r3, #0
 8004864:	00eb      	lsls	r3, r5, #3
 8004866:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800486a:	00e2      	lsls	r2, r4, #3
 800486c:	4614      	mov	r4, r2
 800486e:	461d      	mov	r5, r3
 8004870:	4643      	mov	r3, r8
 8004872:	18e3      	adds	r3, r4, r3
 8004874:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004878:	464b      	mov	r3, r9
 800487a:	eb45 0303 	adc.w	r3, r5, r3
 800487e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800488e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004892:	f04f 0200 	mov.w	r2, #0
 8004896:	f04f 0300 	mov.w	r3, #0
 800489a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800489e:	4629      	mov	r1, r5
 80048a0:	008b      	lsls	r3, r1, #2
 80048a2:	4621      	mov	r1, r4
 80048a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048a8:	4621      	mov	r1, r4
 80048aa:	008a      	lsls	r2, r1, #2
 80048ac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80048b0:	f7fb fd16 	bl	80002e0 <__aeabi_uldivmod>
 80048b4:	4602      	mov	r2, r0
 80048b6:	460b      	mov	r3, r1
 80048b8:	4b60      	ldr	r3, [pc, #384]	; (8004a3c <UART_SetConfig+0x4e4>)
 80048ba:	fba3 2302 	umull	r2, r3, r3, r2
 80048be:	095b      	lsrs	r3, r3, #5
 80048c0:	011c      	lsls	r4, r3, #4
 80048c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048c6:	2200      	movs	r2, #0
 80048c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80048cc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80048d0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80048d4:	4642      	mov	r2, r8
 80048d6:	464b      	mov	r3, r9
 80048d8:	1891      	adds	r1, r2, r2
 80048da:	61b9      	str	r1, [r7, #24]
 80048dc:	415b      	adcs	r3, r3
 80048de:	61fb      	str	r3, [r7, #28]
 80048e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048e4:	4641      	mov	r1, r8
 80048e6:	1851      	adds	r1, r2, r1
 80048e8:	6139      	str	r1, [r7, #16]
 80048ea:	4649      	mov	r1, r9
 80048ec:	414b      	adcs	r3, r1
 80048ee:	617b      	str	r3, [r7, #20]
 80048f0:	f04f 0200 	mov.w	r2, #0
 80048f4:	f04f 0300 	mov.w	r3, #0
 80048f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80048fc:	4659      	mov	r1, fp
 80048fe:	00cb      	lsls	r3, r1, #3
 8004900:	4651      	mov	r1, sl
 8004902:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004906:	4651      	mov	r1, sl
 8004908:	00ca      	lsls	r2, r1, #3
 800490a:	4610      	mov	r0, r2
 800490c:	4619      	mov	r1, r3
 800490e:	4603      	mov	r3, r0
 8004910:	4642      	mov	r2, r8
 8004912:	189b      	adds	r3, r3, r2
 8004914:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004918:	464b      	mov	r3, r9
 800491a:	460a      	mov	r2, r1
 800491c:	eb42 0303 	adc.w	r3, r2, r3
 8004920:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	67bb      	str	r3, [r7, #120]	; 0x78
 800492e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004930:	f04f 0200 	mov.w	r2, #0
 8004934:	f04f 0300 	mov.w	r3, #0
 8004938:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800493c:	4649      	mov	r1, r9
 800493e:	008b      	lsls	r3, r1, #2
 8004940:	4641      	mov	r1, r8
 8004942:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004946:	4641      	mov	r1, r8
 8004948:	008a      	lsls	r2, r1, #2
 800494a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800494e:	f7fb fcc7 	bl	80002e0 <__aeabi_uldivmod>
 8004952:	4602      	mov	r2, r0
 8004954:	460b      	mov	r3, r1
 8004956:	4b39      	ldr	r3, [pc, #228]	; (8004a3c <UART_SetConfig+0x4e4>)
 8004958:	fba3 1302 	umull	r1, r3, r3, r2
 800495c:	095b      	lsrs	r3, r3, #5
 800495e:	2164      	movs	r1, #100	; 0x64
 8004960:	fb01 f303 	mul.w	r3, r1, r3
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	011b      	lsls	r3, r3, #4
 8004968:	3332      	adds	r3, #50	; 0x32
 800496a:	4a34      	ldr	r2, [pc, #208]	; (8004a3c <UART_SetConfig+0x4e4>)
 800496c:	fba2 2303 	umull	r2, r3, r2, r3
 8004970:	095b      	lsrs	r3, r3, #5
 8004972:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004976:	441c      	add	r4, r3
 8004978:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800497c:	2200      	movs	r2, #0
 800497e:	673b      	str	r3, [r7, #112]	; 0x70
 8004980:	677a      	str	r2, [r7, #116]	; 0x74
 8004982:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004986:	4642      	mov	r2, r8
 8004988:	464b      	mov	r3, r9
 800498a:	1891      	adds	r1, r2, r2
 800498c:	60b9      	str	r1, [r7, #8]
 800498e:	415b      	adcs	r3, r3
 8004990:	60fb      	str	r3, [r7, #12]
 8004992:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004996:	4641      	mov	r1, r8
 8004998:	1851      	adds	r1, r2, r1
 800499a:	6039      	str	r1, [r7, #0]
 800499c:	4649      	mov	r1, r9
 800499e:	414b      	adcs	r3, r1
 80049a0:	607b      	str	r3, [r7, #4]
 80049a2:	f04f 0200 	mov.w	r2, #0
 80049a6:	f04f 0300 	mov.w	r3, #0
 80049aa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80049ae:	4659      	mov	r1, fp
 80049b0:	00cb      	lsls	r3, r1, #3
 80049b2:	4651      	mov	r1, sl
 80049b4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049b8:	4651      	mov	r1, sl
 80049ba:	00ca      	lsls	r2, r1, #3
 80049bc:	4610      	mov	r0, r2
 80049be:	4619      	mov	r1, r3
 80049c0:	4603      	mov	r3, r0
 80049c2:	4642      	mov	r2, r8
 80049c4:	189b      	adds	r3, r3, r2
 80049c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80049c8:	464b      	mov	r3, r9
 80049ca:	460a      	mov	r2, r1
 80049cc:	eb42 0303 	adc.w	r3, r2, r3
 80049d0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80049d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	663b      	str	r3, [r7, #96]	; 0x60
 80049dc:	667a      	str	r2, [r7, #100]	; 0x64
 80049de:	f04f 0200 	mov.w	r2, #0
 80049e2:	f04f 0300 	mov.w	r3, #0
 80049e6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80049ea:	4649      	mov	r1, r9
 80049ec:	008b      	lsls	r3, r1, #2
 80049ee:	4641      	mov	r1, r8
 80049f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049f4:	4641      	mov	r1, r8
 80049f6:	008a      	lsls	r2, r1, #2
 80049f8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80049fc:	f7fb fc70 	bl	80002e0 <__aeabi_uldivmod>
 8004a00:	4602      	mov	r2, r0
 8004a02:	460b      	mov	r3, r1
 8004a04:	4b0d      	ldr	r3, [pc, #52]	; (8004a3c <UART_SetConfig+0x4e4>)
 8004a06:	fba3 1302 	umull	r1, r3, r3, r2
 8004a0a:	095b      	lsrs	r3, r3, #5
 8004a0c:	2164      	movs	r1, #100	; 0x64
 8004a0e:	fb01 f303 	mul.w	r3, r1, r3
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	011b      	lsls	r3, r3, #4
 8004a16:	3332      	adds	r3, #50	; 0x32
 8004a18:	4a08      	ldr	r2, [pc, #32]	; (8004a3c <UART_SetConfig+0x4e4>)
 8004a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a1e:	095b      	lsrs	r3, r3, #5
 8004a20:	f003 020f 	and.w	r2, r3, #15
 8004a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4422      	add	r2, r4
 8004a2c:	609a      	str	r2, [r3, #8]
}
 8004a2e:	bf00      	nop
 8004a30:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004a34:	46bd      	mov	sp, r7
 8004a36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a3a:	bf00      	nop
 8004a3c:	51eb851f 	.word	0x51eb851f

08004a40 <__errno>:
 8004a40:	4b01      	ldr	r3, [pc, #4]	; (8004a48 <__errno+0x8>)
 8004a42:	6818      	ldr	r0, [r3, #0]
 8004a44:	4770      	bx	lr
 8004a46:	bf00      	nop
 8004a48:	2000000c 	.word	0x2000000c

08004a4c <__libc_init_array>:
 8004a4c:	b570      	push	{r4, r5, r6, lr}
 8004a4e:	4d0d      	ldr	r5, [pc, #52]	; (8004a84 <__libc_init_array+0x38>)
 8004a50:	4c0d      	ldr	r4, [pc, #52]	; (8004a88 <__libc_init_array+0x3c>)
 8004a52:	1b64      	subs	r4, r4, r5
 8004a54:	10a4      	asrs	r4, r4, #2
 8004a56:	2600      	movs	r6, #0
 8004a58:	42a6      	cmp	r6, r4
 8004a5a:	d109      	bne.n	8004a70 <__libc_init_array+0x24>
 8004a5c:	4d0b      	ldr	r5, [pc, #44]	; (8004a8c <__libc_init_array+0x40>)
 8004a5e:	4c0c      	ldr	r4, [pc, #48]	; (8004a90 <__libc_init_array+0x44>)
 8004a60:	f000 fe20 	bl	80056a4 <_init>
 8004a64:	1b64      	subs	r4, r4, r5
 8004a66:	10a4      	asrs	r4, r4, #2
 8004a68:	2600      	movs	r6, #0
 8004a6a:	42a6      	cmp	r6, r4
 8004a6c:	d105      	bne.n	8004a7a <__libc_init_array+0x2e>
 8004a6e:	bd70      	pop	{r4, r5, r6, pc}
 8004a70:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a74:	4798      	blx	r3
 8004a76:	3601      	adds	r6, #1
 8004a78:	e7ee      	b.n	8004a58 <__libc_init_array+0xc>
 8004a7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a7e:	4798      	blx	r3
 8004a80:	3601      	adds	r6, #1
 8004a82:	e7f2      	b.n	8004a6a <__libc_init_array+0x1e>
 8004a84:	0800588c 	.word	0x0800588c
 8004a88:	0800588c 	.word	0x0800588c
 8004a8c:	0800588c 	.word	0x0800588c
 8004a90:	08005890 	.word	0x08005890

08004a94 <memset>:
 8004a94:	4402      	add	r2, r0
 8004a96:	4603      	mov	r3, r0
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d100      	bne.n	8004a9e <memset+0xa>
 8004a9c:	4770      	bx	lr
 8004a9e:	f803 1b01 	strb.w	r1, [r3], #1
 8004aa2:	e7f9      	b.n	8004a98 <memset+0x4>

08004aa4 <siscanf>:
 8004aa4:	b40e      	push	{r1, r2, r3}
 8004aa6:	b510      	push	{r4, lr}
 8004aa8:	b09f      	sub	sp, #124	; 0x7c
 8004aaa:	ac21      	add	r4, sp, #132	; 0x84
 8004aac:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004ab0:	f854 2b04 	ldr.w	r2, [r4], #4
 8004ab4:	9201      	str	r2, [sp, #4]
 8004ab6:	f8ad 101c 	strh.w	r1, [sp, #28]
 8004aba:	9004      	str	r0, [sp, #16]
 8004abc:	9008      	str	r0, [sp, #32]
 8004abe:	f7fb fbb1 	bl	8000224 <strlen>
 8004ac2:	4b0c      	ldr	r3, [pc, #48]	; (8004af4 <siscanf+0x50>)
 8004ac4:	9005      	str	r0, [sp, #20]
 8004ac6:	9009      	str	r0, [sp, #36]	; 0x24
 8004ac8:	930d      	str	r3, [sp, #52]	; 0x34
 8004aca:	480b      	ldr	r0, [pc, #44]	; (8004af8 <siscanf+0x54>)
 8004acc:	9a01      	ldr	r2, [sp, #4]
 8004ace:	6800      	ldr	r0, [r0, #0]
 8004ad0:	9403      	str	r4, [sp, #12]
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	9311      	str	r3, [sp, #68]	; 0x44
 8004ad6:	9316      	str	r3, [sp, #88]	; 0x58
 8004ad8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004adc:	f8ad 301e 	strh.w	r3, [sp, #30]
 8004ae0:	a904      	add	r1, sp, #16
 8004ae2:	4623      	mov	r3, r4
 8004ae4:	f000 f866 	bl	8004bb4 <__ssvfiscanf_r>
 8004ae8:	b01f      	add	sp, #124	; 0x7c
 8004aea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004aee:	b003      	add	sp, #12
 8004af0:	4770      	bx	lr
 8004af2:	bf00      	nop
 8004af4:	08004afd 	.word	0x08004afd
 8004af8:	2000000c 	.word	0x2000000c

08004afc <__seofread>:
 8004afc:	2000      	movs	r0, #0
 8004afe:	4770      	bx	lr

08004b00 <_sungetc_r>:
 8004b00:	b538      	push	{r3, r4, r5, lr}
 8004b02:	1c4b      	adds	r3, r1, #1
 8004b04:	4614      	mov	r4, r2
 8004b06:	d103      	bne.n	8004b10 <_sungetc_r+0x10>
 8004b08:	f04f 35ff 	mov.w	r5, #4294967295
 8004b0c:	4628      	mov	r0, r5
 8004b0e:	bd38      	pop	{r3, r4, r5, pc}
 8004b10:	8993      	ldrh	r3, [r2, #12]
 8004b12:	f023 0320 	bic.w	r3, r3, #32
 8004b16:	8193      	strh	r3, [r2, #12]
 8004b18:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004b1a:	6852      	ldr	r2, [r2, #4]
 8004b1c:	b2cd      	uxtb	r5, r1
 8004b1e:	b18b      	cbz	r3, 8004b44 <_sungetc_r+0x44>
 8004b20:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004b22:	4293      	cmp	r3, r2
 8004b24:	dd08      	ble.n	8004b38 <_sungetc_r+0x38>
 8004b26:	6823      	ldr	r3, [r4, #0]
 8004b28:	1e5a      	subs	r2, r3, #1
 8004b2a:	6022      	str	r2, [r4, #0]
 8004b2c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8004b30:	6863      	ldr	r3, [r4, #4]
 8004b32:	3301      	adds	r3, #1
 8004b34:	6063      	str	r3, [r4, #4]
 8004b36:	e7e9      	b.n	8004b0c <_sungetc_r+0xc>
 8004b38:	4621      	mov	r1, r4
 8004b3a:	f000 fc35 	bl	80053a8 <__submore>
 8004b3e:	2800      	cmp	r0, #0
 8004b40:	d0f1      	beq.n	8004b26 <_sungetc_r+0x26>
 8004b42:	e7e1      	b.n	8004b08 <_sungetc_r+0x8>
 8004b44:	6921      	ldr	r1, [r4, #16]
 8004b46:	6823      	ldr	r3, [r4, #0]
 8004b48:	b151      	cbz	r1, 8004b60 <_sungetc_r+0x60>
 8004b4a:	4299      	cmp	r1, r3
 8004b4c:	d208      	bcs.n	8004b60 <_sungetc_r+0x60>
 8004b4e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8004b52:	42a9      	cmp	r1, r5
 8004b54:	d104      	bne.n	8004b60 <_sungetc_r+0x60>
 8004b56:	3b01      	subs	r3, #1
 8004b58:	3201      	adds	r2, #1
 8004b5a:	6023      	str	r3, [r4, #0]
 8004b5c:	6062      	str	r2, [r4, #4]
 8004b5e:	e7d5      	b.n	8004b0c <_sungetc_r+0xc>
 8004b60:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8004b64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004b68:	6363      	str	r3, [r4, #52]	; 0x34
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	63a3      	str	r3, [r4, #56]	; 0x38
 8004b6e:	4623      	mov	r3, r4
 8004b70:	f803 5f46 	strb.w	r5, [r3, #70]!
 8004b74:	6023      	str	r3, [r4, #0]
 8004b76:	2301      	movs	r3, #1
 8004b78:	e7dc      	b.n	8004b34 <_sungetc_r+0x34>

08004b7a <__ssrefill_r>:
 8004b7a:	b510      	push	{r4, lr}
 8004b7c:	460c      	mov	r4, r1
 8004b7e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004b80:	b169      	cbz	r1, 8004b9e <__ssrefill_r+0x24>
 8004b82:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004b86:	4299      	cmp	r1, r3
 8004b88:	d001      	beq.n	8004b8e <__ssrefill_r+0x14>
 8004b8a:	f000 fc57 	bl	800543c <_free_r>
 8004b8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004b90:	6063      	str	r3, [r4, #4]
 8004b92:	2000      	movs	r0, #0
 8004b94:	6360      	str	r0, [r4, #52]	; 0x34
 8004b96:	b113      	cbz	r3, 8004b9e <__ssrefill_r+0x24>
 8004b98:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004b9a:	6023      	str	r3, [r4, #0]
 8004b9c:	bd10      	pop	{r4, pc}
 8004b9e:	6923      	ldr	r3, [r4, #16]
 8004ba0:	6023      	str	r3, [r4, #0]
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	6063      	str	r3, [r4, #4]
 8004ba6:	89a3      	ldrh	r3, [r4, #12]
 8004ba8:	f043 0320 	orr.w	r3, r3, #32
 8004bac:	81a3      	strh	r3, [r4, #12]
 8004bae:	f04f 30ff 	mov.w	r0, #4294967295
 8004bb2:	e7f3      	b.n	8004b9c <__ssrefill_r+0x22>

08004bb4 <__ssvfiscanf_r>:
 8004bb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bb8:	460c      	mov	r4, r1
 8004bba:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8004bbe:	2100      	movs	r1, #0
 8004bc0:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8004bc4:	49a6      	ldr	r1, [pc, #664]	; (8004e60 <__ssvfiscanf_r+0x2ac>)
 8004bc6:	91a0      	str	r1, [sp, #640]	; 0x280
 8004bc8:	f10d 0804 	add.w	r8, sp, #4
 8004bcc:	49a5      	ldr	r1, [pc, #660]	; (8004e64 <__ssvfiscanf_r+0x2b0>)
 8004bce:	4fa6      	ldr	r7, [pc, #664]	; (8004e68 <__ssvfiscanf_r+0x2b4>)
 8004bd0:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8004e6c <__ssvfiscanf_r+0x2b8>
 8004bd4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8004bd8:	4606      	mov	r6, r0
 8004bda:	91a1      	str	r1, [sp, #644]	; 0x284
 8004bdc:	9300      	str	r3, [sp, #0]
 8004bde:	7813      	ldrb	r3, [r2, #0]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	f000 815a 	beq.w	8004e9a <__ssvfiscanf_r+0x2e6>
 8004be6:	5dd9      	ldrb	r1, [r3, r7]
 8004be8:	f011 0108 	ands.w	r1, r1, #8
 8004bec:	f102 0501 	add.w	r5, r2, #1
 8004bf0:	d019      	beq.n	8004c26 <__ssvfiscanf_r+0x72>
 8004bf2:	6863      	ldr	r3, [r4, #4]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	dd0f      	ble.n	8004c18 <__ssvfiscanf_r+0x64>
 8004bf8:	6823      	ldr	r3, [r4, #0]
 8004bfa:	781a      	ldrb	r2, [r3, #0]
 8004bfc:	5cba      	ldrb	r2, [r7, r2]
 8004bfe:	0712      	lsls	r2, r2, #28
 8004c00:	d401      	bmi.n	8004c06 <__ssvfiscanf_r+0x52>
 8004c02:	462a      	mov	r2, r5
 8004c04:	e7eb      	b.n	8004bde <__ssvfiscanf_r+0x2a>
 8004c06:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004c08:	3201      	adds	r2, #1
 8004c0a:	9245      	str	r2, [sp, #276]	; 0x114
 8004c0c:	6862      	ldr	r2, [r4, #4]
 8004c0e:	3301      	adds	r3, #1
 8004c10:	3a01      	subs	r2, #1
 8004c12:	6062      	str	r2, [r4, #4]
 8004c14:	6023      	str	r3, [r4, #0]
 8004c16:	e7ec      	b.n	8004bf2 <__ssvfiscanf_r+0x3e>
 8004c18:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004c1a:	4621      	mov	r1, r4
 8004c1c:	4630      	mov	r0, r6
 8004c1e:	4798      	blx	r3
 8004c20:	2800      	cmp	r0, #0
 8004c22:	d0e9      	beq.n	8004bf8 <__ssvfiscanf_r+0x44>
 8004c24:	e7ed      	b.n	8004c02 <__ssvfiscanf_r+0x4e>
 8004c26:	2b25      	cmp	r3, #37	; 0x25
 8004c28:	d012      	beq.n	8004c50 <__ssvfiscanf_r+0x9c>
 8004c2a:	469a      	mov	sl, r3
 8004c2c:	6863      	ldr	r3, [r4, #4]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	f340 8091 	ble.w	8004d56 <__ssvfiscanf_r+0x1a2>
 8004c34:	6822      	ldr	r2, [r4, #0]
 8004c36:	7813      	ldrb	r3, [r2, #0]
 8004c38:	4553      	cmp	r3, sl
 8004c3a:	f040 812e 	bne.w	8004e9a <__ssvfiscanf_r+0x2e6>
 8004c3e:	6863      	ldr	r3, [r4, #4]
 8004c40:	3b01      	subs	r3, #1
 8004c42:	6063      	str	r3, [r4, #4]
 8004c44:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8004c46:	3201      	adds	r2, #1
 8004c48:	3301      	adds	r3, #1
 8004c4a:	6022      	str	r2, [r4, #0]
 8004c4c:	9345      	str	r3, [sp, #276]	; 0x114
 8004c4e:	e7d8      	b.n	8004c02 <__ssvfiscanf_r+0x4e>
 8004c50:	9141      	str	r1, [sp, #260]	; 0x104
 8004c52:	9143      	str	r1, [sp, #268]	; 0x10c
 8004c54:	7853      	ldrb	r3, [r2, #1]
 8004c56:	2b2a      	cmp	r3, #42	; 0x2a
 8004c58:	bf02      	ittt	eq
 8004c5a:	2310      	moveq	r3, #16
 8004c5c:	1c95      	addeq	r5, r2, #2
 8004c5e:	9341      	streq	r3, [sp, #260]	; 0x104
 8004c60:	220a      	movs	r2, #10
 8004c62:	46aa      	mov	sl, r5
 8004c64:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8004c68:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8004c6c:	2b09      	cmp	r3, #9
 8004c6e:	d91d      	bls.n	8004cac <__ssvfiscanf_r+0xf8>
 8004c70:	487e      	ldr	r0, [pc, #504]	; (8004e6c <__ssvfiscanf_r+0x2b8>)
 8004c72:	2203      	movs	r2, #3
 8004c74:	f7fb fae4 	bl	8000240 <memchr>
 8004c78:	b140      	cbz	r0, 8004c8c <__ssvfiscanf_r+0xd8>
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	eba0 0009 	sub.w	r0, r0, r9
 8004c80:	fa03 f000 	lsl.w	r0, r3, r0
 8004c84:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004c86:	4318      	orrs	r0, r3
 8004c88:	9041      	str	r0, [sp, #260]	; 0x104
 8004c8a:	4655      	mov	r5, sl
 8004c8c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004c90:	2b78      	cmp	r3, #120	; 0x78
 8004c92:	d806      	bhi.n	8004ca2 <__ssvfiscanf_r+0xee>
 8004c94:	2b57      	cmp	r3, #87	; 0x57
 8004c96:	d810      	bhi.n	8004cba <__ssvfiscanf_r+0x106>
 8004c98:	2b25      	cmp	r3, #37	; 0x25
 8004c9a:	d0c6      	beq.n	8004c2a <__ssvfiscanf_r+0x76>
 8004c9c:	d856      	bhi.n	8004d4c <__ssvfiscanf_r+0x198>
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d064      	beq.n	8004d6c <__ssvfiscanf_r+0x1b8>
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	9347      	str	r3, [sp, #284]	; 0x11c
 8004ca6:	230a      	movs	r3, #10
 8004ca8:	9342      	str	r3, [sp, #264]	; 0x108
 8004caa:	e071      	b.n	8004d90 <__ssvfiscanf_r+0x1dc>
 8004cac:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8004cae:	fb02 1103 	mla	r1, r2, r3, r1
 8004cb2:	3930      	subs	r1, #48	; 0x30
 8004cb4:	9143      	str	r1, [sp, #268]	; 0x10c
 8004cb6:	4655      	mov	r5, sl
 8004cb8:	e7d3      	b.n	8004c62 <__ssvfiscanf_r+0xae>
 8004cba:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8004cbe:	2a20      	cmp	r2, #32
 8004cc0:	d8ef      	bhi.n	8004ca2 <__ssvfiscanf_r+0xee>
 8004cc2:	a101      	add	r1, pc, #4	; (adr r1, 8004cc8 <__ssvfiscanf_r+0x114>)
 8004cc4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004cc8:	08004d7b 	.word	0x08004d7b
 8004ccc:	08004ca3 	.word	0x08004ca3
 8004cd0:	08004ca3 	.word	0x08004ca3
 8004cd4:	08004dd9 	.word	0x08004dd9
 8004cd8:	08004ca3 	.word	0x08004ca3
 8004cdc:	08004ca3 	.word	0x08004ca3
 8004ce0:	08004ca3 	.word	0x08004ca3
 8004ce4:	08004ca3 	.word	0x08004ca3
 8004ce8:	08004ca3 	.word	0x08004ca3
 8004cec:	08004ca3 	.word	0x08004ca3
 8004cf0:	08004ca3 	.word	0x08004ca3
 8004cf4:	08004def 	.word	0x08004def
 8004cf8:	08004dc5 	.word	0x08004dc5
 8004cfc:	08004d53 	.word	0x08004d53
 8004d00:	08004d53 	.word	0x08004d53
 8004d04:	08004d53 	.word	0x08004d53
 8004d08:	08004ca3 	.word	0x08004ca3
 8004d0c:	08004dc9 	.word	0x08004dc9
 8004d10:	08004ca3 	.word	0x08004ca3
 8004d14:	08004ca3 	.word	0x08004ca3
 8004d18:	08004ca3 	.word	0x08004ca3
 8004d1c:	08004ca3 	.word	0x08004ca3
 8004d20:	08004dff 	.word	0x08004dff
 8004d24:	08004dd1 	.word	0x08004dd1
 8004d28:	08004d73 	.word	0x08004d73
 8004d2c:	08004ca3 	.word	0x08004ca3
 8004d30:	08004ca3 	.word	0x08004ca3
 8004d34:	08004dfb 	.word	0x08004dfb
 8004d38:	08004ca3 	.word	0x08004ca3
 8004d3c:	08004dc5 	.word	0x08004dc5
 8004d40:	08004ca3 	.word	0x08004ca3
 8004d44:	08004ca3 	.word	0x08004ca3
 8004d48:	08004d7b 	.word	0x08004d7b
 8004d4c:	3b45      	subs	r3, #69	; 0x45
 8004d4e:	2b02      	cmp	r3, #2
 8004d50:	d8a7      	bhi.n	8004ca2 <__ssvfiscanf_r+0xee>
 8004d52:	2305      	movs	r3, #5
 8004d54:	e01b      	b.n	8004d8e <__ssvfiscanf_r+0x1da>
 8004d56:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004d58:	4621      	mov	r1, r4
 8004d5a:	4630      	mov	r0, r6
 8004d5c:	4798      	blx	r3
 8004d5e:	2800      	cmp	r0, #0
 8004d60:	f43f af68 	beq.w	8004c34 <__ssvfiscanf_r+0x80>
 8004d64:	9844      	ldr	r0, [sp, #272]	; 0x110
 8004d66:	2800      	cmp	r0, #0
 8004d68:	f040 808d 	bne.w	8004e86 <__ssvfiscanf_r+0x2d2>
 8004d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d70:	e08f      	b.n	8004e92 <__ssvfiscanf_r+0x2de>
 8004d72:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8004d74:	f042 0220 	orr.w	r2, r2, #32
 8004d78:	9241      	str	r2, [sp, #260]	; 0x104
 8004d7a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8004d7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d80:	9241      	str	r2, [sp, #260]	; 0x104
 8004d82:	2210      	movs	r2, #16
 8004d84:	2b6f      	cmp	r3, #111	; 0x6f
 8004d86:	9242      	str	r2, [sp, #264]	; 0x108
 8004d88:	bf34      	ite	cc
 8004d8a:	2303      	movcc	r3, #3
 8004d8c:	2304      	movcs	r3, #4
 8004d8e:	9347      	str	r3, [sp, #284]	; 0x11c
 8004d90:	6863      	ldr	r3, [r4, #4]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	dd42      	ble.n	8004e1c <__ssvfiscanf_r+0x268>
 8004d96:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004d98:	0659      	lsls	r1, r3, #25
 8004d9a:	d404      	bmi.n	8004da6 <__ssvfiscanf_r+0x1f2>
 8004d9c:	6823      	ldr	r3, [r4, #0]
 8004d9e:	781a      	ldrb	r2, [r3, #0]
 8004da0:	5cba      	ldrb	r2, [r7, r2]
 8004da2:	0712      	lsls	r2, r2, #28
 8004da4:	d441      	bmi.n	8004e2a <__ssvfiscanf_r+0x276>
 8004da6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8004da8:	2b02      	cmp	r3, #2
 8004daa:	dc50      	bgt.n	8004e4e <__ssvfiscanf_r+0x29a>
 8004dac:	466b      	mov	r3, sp
 8004dae:	4622      	mov	r2, r4
 8004db0:	a941      	add	r1, sp, #260	; 0x104
 8004db2:	4630      	mov	r0, r6
 8004db4:	f000 f876 	bl	8004ea4 <_scanf_chars>
 8004db8:	2801      	cmp	r0, #1
 8004dba:	d06e      	beq.n	8004e9a <__ssvfiscanf_r+0x2e6>
 8004dbc:	2802      	cmp	r0, #2
 8004dbe:	f47f af20 	bne.w	8004c02 <__ssvfiscanf_r+0x4e>
 8004dc2:	e7cf      	b.n	8004d64 <__ssvfiscanf_r+0x1b0>
 8004dc4:	220a      	movs	r2, #10
 8004dc6:	e7dd      	b.n	8004d84 <__ssvfiscanf_r+0x1d0>
 8004dc8:	2300      	movs	r3, #0
 8004dca:	9342      	str	r3, [sp, #264]	; 0x108
 8004dcc:	2303      	movs	r3, #3
 8004dce:	e7de      	b.n	8004d8e <__ssvfiscanf_r+0x1da>
 8004dd0:	2308      	movs	r3, #8
 8004dd2:	9342      	str	r3, [sp, #264]	; 0x108
 8004dd4:	2304      	movs	r3, #4
 8004dd6:	e7da      	b.n	8004d8e <__ssvfiscanf_r+0x1da>
 8004dd8:	4629      	mov	r1, r5
 8004dda:	4640      	mov	r0, r8
 8004ddc:	f000 f9b4 	bl	8005148 <__sccl>
 8004de0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004de2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004de6:	9341      	str	r3, [sp, #260]	; 0x104
 8004de8:	4605      	mov	r5, r0
 8004dea:	2301      	movs	r3, #1
 8004dec:	e7cf      	b.n	8004d8e <__ssvfiscanf_r+0x1da>
 8004dee:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004df0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004df4:	9341      	str	r3, [sp, #260]	; 0x104
 8004df6:	2300      	movs	r3, #0
 8004df8:	e7c9      	b.n	8004d8e <__ssvfiscanf_r+0x1da>
 8004dfa:	2302      	movs	r3, #2
 8004dfc:	e7c7      	b.n	8004d8e <__ssvfiscanf_r+0x1da>
 8004dfe:	9841      	ldr	r0, [sp, #260]	; 0x104
 8004e00:	06c3      	lsls	r3, r0, #27
 8004e02:	f53f aefe 	bmi.w	8004c02 <__ssvfiscanf_r+0x4e>
 8004e06:	9b00      	ldr	r3, [sp, #0]
 8004e08:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004e0a:	1d19      	adds	r1, r3, #4
 8004e0c:	9100      	str	r1, [sp, #0]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f010 0f01 	tst.w	r0, #1
 8004e14:	bf14      	ite	ne
 8004e16:	801a      	strhne	r2, [r3, #0]
 8004e18:	601a      	streq	r2, [r3, #0]
 8004e1a:	e6f2      	b.n	8004c02 <__ssvfiscanf_r+0x4e>
 8004e1c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004e1e:	4621      	mov	r1, r4
 8004e20:	4630      	mov	r0, r6
 8004e22:	4798      	blx	r3
 8004e24:	2800      	cmp	r0, #0
 8004e26:	d0b6      	beq.n	8004d96 <__ssvfiscanf_r+0x1e2>
 8004e28:	e79c      	b.n	8004d64 <__ssvfiscanf_r+0x1b0>
 8004e2a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004e2c:	3201      	adds	r2, #1
 8004e2e:	9245      	str	r2, [sp, #276]	; 0x114
 8004e30:	6862      	ldr	r2, [r4, #4]
 8004e32:	3a01      	subs	r2, #1
 8004e34:	2a00      	cmp	r2, #0
 8004e36:	6062      	str	r2, [r4, #4]
 8004e38:	dd02      	ble.n	8004e40 <__ssvfiscanf_r+0x28c>
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	6023      	str	r3, [r4, #0]
 8004e3e:	e7ad      	b.n	8004d9c <__ssvfiscanf_r+0x1e8>
 8004e40:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004e42:	4621      	mov	r1, r4
 8004e44:	4630      	mov	r0, r6
 8004e46:	4798      	blx	r3
 8004e48:	2800      	cmp	r0, #0
 8004e4a:	d0a7      	beq.n	8004d9c <__ssvfiscanf_r+0x1e8>
 8004e4c:	e78a      	b.n	8004d64 <__ssvfiscanf_r+0x1b0>
 8004e4e:	2b04      	cmp	r3, #4
 8004e50:	dc0e      	bgt.n	8004e70 <__ssvfiscanf_r+0x2bc>
 8004e52:	466b      	mov	r3, sp
 8004e54:	4622      	mov	r2, r4
 8004e56:	a941      	add	r1, sp, #260	; 0x104
 8004e58:	4630      	mov	r0, r6
 8004e5a:	f000 f87d 	bl	8004f58 <_scanf_i>
 8004e5e:	e7ab      	b.n	8004db8 <__ssvfiscanf_r+0x204>
 8004e60:	08004b01 	.word	0x08004b01
 8004e64:	08004b7b 	.word	0x08004b7b
 8004e68:	08005724 	.word	0x08005724
 8004e6c:	08005704 	.word	0x08005704
 8004e70:	4b0b      	ldr	r3, [pc, #44]	; (8004ea0 <__ssvfiscanf_r+0x2ec>)
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	f43f aec5 	beq.w	8004c02 <__ssvfiscanf_r+0x4e>
 8004e78:	466b      	mov	r3, sp
 8004e7a:	4622      	mov	r2, r4
 8004e7c:	a941      	add	r1, sp, #260	; 0x104
 8004e7e:	4630      	mov	r0, r6
 8004e80:	f3af 8000 	nop.w
 8004e84:	e798      	b.n	8004db8 <__ssvfiscanf_r+0x204>
 8004e86:	89a3      	ldrh	r3, [r4, #12]
 8004e88:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004e8c:	bf18      	it	ne
 8004e8e:	f04f 30ff 	movne.w	r0, #4294967295
 8004e92:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8004e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e9a:	9844      	ldr	r0, [sp, #272]	; 0x110
 8004e9c:	e7f9      	b.n	8004e92 <__ssvfiscanf_r+0x2de>
 8004e9e:	bf00      	nop
 8004ea0:	00000000 	.word	0x00000000

08004ea4 <_scanf_chars>:
 8004ea4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ea8:	4615      	mov	r5, r2
 8004eaa:	688a      	ldr	r2, [r1, #8]
 8004eac:	4680      	mov	r8, r0
 8004eae:	460c      	mov	r4, r1
 8004eb0:	b932      	cbnz	r2, 8004ec0 <_scanf_chars+0x1c>
 8004eb2:	698a      	ldr	r2, [r1, #24]
 8004eb4:	2a00      	cmp	r2, #0
 8004eb6:	bf0c      	ite	eq
 8004eb8:	2201      	moveq	r2, #1
 8004eba:	f04f 32ff 	movne.w	r2, #4294967295
 8004ebe:	608a      	str	r2, [r1, #8]
 8004ec0:	6822      	ldr	r2, [r4, #0]
 8004ec2:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8004f54 <_scanf_chars+0xb0>
 8004ec6:	06d1      	lsls	r1, r2, #27
 8004ec8:	bf5f      	itttt	pl
 8004eca:	681a      	ldrpl	r2, [r3, #0]
 8004ecc:	1d11      	addpl	r1, r2, #4
 8004ece:	6019      	strpl	r1, [r3, #0]
 8004ed0:	6816      	ldrpl	r6, [r2, #0]
 8004ed2:	2700      	movs	r7, #0
 8004ed4:	69a0      	ldr	r0, [r4, #24]
 8004ed6:	b188      	cbz	r0, 8004efc <_scanf_chars+0x58>
 8004ed8:	2801      	cmp	r0, #1
 8004eda:	d107      	bne.n	8004eec <_scanf_chars+0x48>
 8004edc:	682a      	ldr	r2, [r5, #0]
 8004ede:	7811      	ldrb	r1, [r2, #0]
 8004ee0:	6962      	ldr	r2, [r4, #20]
 8004ee2:	5c52      	ldrb	r2, [r2, r1]
 8004ee4:	b952      	cbnz	r2, 8004efc <_scanf_chars+0x58>
 8004ee6:	2f00      	cmp	r7, #0
 8004ee8:	d031      	beq.n	8004f4e <_scanf_chars+0xaa>
 8004eea:	e022      	b.n	8004f32 <_scanf_chars+0x8e>
 8004eec:	2802      	cmp	r0, #2
 8004eee:	d120      	bne.n	8004f32 <_scanf_chars+0x8e>
 8004ef0:	682b      	ldr	r3, [r5, #0]
 8004ef2:	781b      	ldrb	r3, [r3, #0]
 8004ef4:	f813 3009 	ldrb.w	r3, [r3, r9]
 8004ef8:	071b      	lsls	r3, r3, #28
 8004efa:	d41a      	bmi.n	8004f32 <_scanf_chars+0x8e>
 8004efc:	6823      	ldr	r3, [r4, #0]
 8004efe:	06da      	lsls	r2, r3, #27
 8004f00:	bf5e      	ittt	pl
 8004f02:	682b      	ldrpl	r3, [r5, #0]
 8004f04:	781b      	ldrbpl	r3, [r3, #0]
 8004f06:	f806 3b01 	strbpl.w	r3, [r6], #1
 8004f0a:	682a      	ldr	r2, [r5, #0]
 8004f0c:	686b      	ldr	r3, [r5, #4]
 8004f0e:	3201      	adds	r2, #1
 8004f10:	602a      	str	r2, [r5, #0]
 8004f12:	68a2      	ldr	r2, [r4, #8]
 8004f14:	3b01      	subs	r3, #1
 8004f16:	3a01      	subs	r2, #1
 8004f18:	606b      	str	r3, [r5, #4]
 8004f1a:	3701      	adds	r7, #1
 8004f1c:	60a2      	str	r2, [r4, #8]
 8004f1e:	b142      	cbz	r2, 8004f32 <_scanf_chars+0x8e>
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	dcd7      	bgt.n	8004ed4 <_scanf_chars+0x30>
 8004f24:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004f28:	4629      	mov	r1, r5
 8004f2a:	4640      	mov	r0, r8
 8004f2c:	4798      	blx	r3
 8004f2e:	2800      	cmp	r0, #0
 8004f30:	d0d0      	beq.n	8004ed4 <_scanf_chars+0x30>
 8004f32:	6823      	ldr	r3, [r4, #0]
 8004f34:	f013 0310 	ands.w	r3, r3, #16
 8004f38:	d105      	bne.n	8004f46 <_scanf_chars+0xa2>
 8004f3a:	68e2      	ldr	r2, [r4, #12]
 8004f3c:	3201      	adds	r2, #1
 8004f3e:	60e2      	str	r2, [r4, #12]
 8004f40:	69a2      	ldr	r2, [r4, #24]
 8004f42:	b102      	cbz	r2, 8004f46 <_scanf_chars+0xa2>
 8004f44:	7033      	strb	r3, [r6, #0]
 8004f46:	6923      	ldr	r3, [r4, #16]
 8004f48:	443b      	add	r3, r7
 8004f4a:	6123      	str	r3, [r4, #16]
 8004f4c:	2000      	movs	r0, #0
 8004f4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f52:	bf00      	nop
 8004f54:	08005724 	.word	0x08005724

08004f58 <_scanf_i>:
 8004f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f5c:	4698      	mov	r8, r3
 8004f5e:	4b76      	ldr	r3, [pc, #472]	; (8005138 <_scanf_i+0x1e0>)
 8004f60:	460c      	mov	r4, r1
 8004f62:	4682      	mov	sl, r0
 8004f64:	4616      	mov	r6, r2
 8004f66:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004f6a:	b087      	sub	sp, #28
 8004f6c:	ab03      	add	r3, sp, #12
 8004f6e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004f72:	4b72      	ldr	r3, [pc, #456]	; (800513c <_scanf_i+0x1e4>)
 8004f74:	69a1      	ldr	r1, [r4, #24]
 8004f76:	4a72      	ldr	r2, [pc, #456]	; (8005140 <_scanf_i+0x1e8>)
 8004f78:	2903      	cmp	r1, #3
 8004f7a:	bf18      	it	ne
 8004f7c:	461a      	movne	r2, r3
 8004f7e:	68a3      	ldr	r3, [r4, #8]
 8004f80:	9201      	str	r2, [sp, #4]
 8004f82:	1e5a      	subs	r2, r3, #1
 8004f84:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004f88:	bf88      	it	hi
 8004f8a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004f8e:	4627      	mov	r7, r4
 8004f90:	bf82      	ittt	hi
 8004f92:	eb03 0905 	addhi.w	r9, r3, r5
 8004f96:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004f9a:	60a3      	strhi	r3, [r4, #8]
 8004f9c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8004fa0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8004fa4:	bf98      	it	ls
 8004fa6:	f04f 0900 	movls.w	r9, #0
 8004faa:	6023      	str	r3, [r4, #0]
 8004fac:	463d      	mov	r5, r7
 8004fae:	f04f 0b00 	mov.w	fp, #0
 8004fb2:	6831      	ldr	r1, [r6, #0]
 8004fb4:	ab03      	add	r3, sp, #12
 8004fb6:	7809      	ldrb	r1, [r1, #0]
 8004fb8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8004fbc:	2202      	movs	r2, #2
 8004fbe:	f7fb f93f 	bl	8000240 <memchr>
 8004fc2:	b328      	cbz	r0, 8005010 <_scanf_i+0xb8>
 8004fc4:	f1bb 0f01 	cmp.w	fp, #1
 8004fc8:	d159      	bne.n	800507e <_scanf_i+0x126>
 8004fca:	6862      	ldr	r2, [r4, #4]
 8004fcc:	b92a      	cbnz	r2, 8004fda <_scanf_i+0x82>
 8004fce:	6822      	ldr	r2, [r4, #0]
 8004fd0:	2308      	movs	r3, #8
 8004fd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fd6:	6063      	str	r3, [r4, #4]
 8004fd8:	6022      	str	r2, [r4, #0]
 8004fda:	6822      	ldr	r2, [r4, #0]
 8004fdc:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8004fe0:	6022      	str	r2, [r4, #0]
 8004fe2:	68a2      	ldr	r2, [r4, #8]
 8004fe4:	1e51      	subs	r1, r2, #1
 8004fe6:	60a1      	str	r1, [r4, #8]
 8004fe8:	b192      	cbz	r2, 8005010 <_scanf_i+0xb8>
 8004fea:	6832      	ldr	r2, [r6, #0]
 8004fec:	1c51      	adds	r1, r2, #1
 8004fee:	6031      	str	r1, [r6, #0]
 8004ff0:	7812      	ldrb	r2, [r2, #0]
 8004ff2:	f805 2b01 	strb.w	r2, [r5], #1
 8004ff6:	6872      	ldr	r2, [r6, #4]
 8004ff8:	3a01      	subs	r2, #1
 8004ffa:	2a00      	cmp	r2, #0
 8004ffc:	6072      	str	r2, [r6, #4]
 8004ffe:	dc07      	bgt.n	8005010 <_scanf_i+0xb8>
 8005000:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8005004:	4631      	mov	r1, r6
 8005006:	4650      	mov	r0, sl
 8005008:	4790      	blx	r2
 800500a:	2800      	cmp	r0, #0
 800500c:	f040 8085 	bne.w	800511a <_scanf_i+0x1c2>
 8005010:	f10b 0b01 	add.w	fp, fp, #1
 8005014:	f1bb 0f03 	cmp.w	fp, #3
 8005018:	d1cb      	bne.n	8004fb2 <_scanf_i+0x5a>
 800501a:	6863      	ldr	r3, [r4, #4]
 800501c:	b90b      	cbnz	r3, 8005022 <_scanf_i+0xca>
 800501e:	230a      	movs	r3, #10
 8005020:	6063      	str	r3, [r4, #4]
 8005022:	6863      	ldr	r3, [r4, #4]
 8005024:	4947      	ldr	r1, [pc, #284]	; (8005144 <_scanf_i+0x1ec>)
 8005026:	6960      	ldr	r0, [r4, #20]
 8005028:	1ac9      	subs	r1, r1, r3
 800502a:	f000 f88d 	bl	8005148 <__sccl>
 800502e:	f04f 0b00 	mov.w	fp, #0
 8005032:	68a3      	ldr	r3, [r4, #8]
 8005034:	6822      	ldr	r2, [r4, #0]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d03d      	beq.n	80050b6 <_scanf_i+0x15e>
 800503a:	6831      	ldr	r1, [r6, #0]
 800503c:	6960      	ldr	r0, [r4, #20]
 800503e:	f891 c000 	ldrb.w	ip, [r1]
 8005042:	f810 000c 	ldrb.w	r0, [r0, ip]
 8005046:	2800      	cmp	r0, #0
 8005048:	d035      	beq.n	80050b6 <_scanf_i+0x15e>
 800504a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800504e:	d124      	bne.n	800509a <_scanf_i+0x142>
 8005050:	0510      	lsls	r0, r2, #20
 8005052:	d522      	bpl.n	800509a <_scanf_i+0x142>
 8005054:	f10b 0b01 	add.w	fp, fp, #1
 8005058:	f1b9 0f00 	cmp.w	r9, #0
 800505c:	d003      	beq.n	8005066 <_scanf_i+0x10e>
 800505e:	3301      	adds	r3, #1
 8005060:	f109 39ff 	add.w	r9, r9, #4294967295
 8005064:	60a3      	str	r3, [r4, #8]
 8005066:	6873      	ldr	r3, [r6, #4]
 8005068:	3b01      	subs	r3, #1
 800506a:	2b00      	cmp	r3, #0
 800506c:	6073      	str	r3, [r6, #4]
 800506e:	dd1b      	ble.n	80050a8 <_scanf_i+0x150>
 8005070:	6833      	ldr	r3, [r6, #0]
 8005072:	3301      	adds	r3, #1
 8005074:	6033      	str	r3, [r6, #0]
 8005076:	68a3      	ldr	r3, [r4, #8]
 8005078:	3b01      	subs	r3, #1
 800507a:	60a3      	str	r3, [r4, #8]
 800507c:	e7d9      	b.n	8005032 <_scanf_i+0xda>
 800507e:	f1bb 0f02 	cmp.w	fp, #2
 8005082:	d1ae      	bne.n	8004fe2 <_scanf_i+0x8a>
 8005084:	6822      	ldr	r2, [r4, #0]
 8005086:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800508a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800508e:	d1bf      	bne.n	8005010 <_scanf_i+0xb8>
 8005090:	2310      	movs	r3, #16
 8005092:	6063      	str	r3, [r4, #4]
 8005094:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005098:	e7a2      	b.n	8004fe0 <_scanf_i+0x88>
 800509a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800509e:	6022      	str	r2, [r4, #0]
 80050a0:	780b      	ldrb	r3, [r1, #0]
 80050a2:	f805 3b01 	strb.w	r3, [r5], #1
 80050a6:	e7de      	b.n	8005066 <_scanf_i+0x10e>
 80050a8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80050ac:	4631      	mov	r1, r6
 80050ae:	4650      	mov	r0, sl
 80050b0:	4798      	blx	r3
 80050b2:	2800      	cmp	r0, #0
 80050b4:	d0df      	beq.n	8005076 <_scanf_i+0x11e>
 80050b6:	6823      	ldr	r3, [r4, #0]
 80050b8:	05db      	lsls	r3, r3, #23
 80050ba:	d50d      	bpl.n	80050d8 <_scanf_i+0x180>
 80050bc:	42bd      	cmp	r5, r7
 80050be:	d909      	bls.n	80050d4 <_scanf_i+0x17c>
 80050c0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80050c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80050c8:	4632      	mov	r2, r6
 80050ca:	4650      	mov	r0, sl
 80050cc:	4798      	blx	r3
 80050ce:	f105 39ff 	add.w	r9, r5, #4294967295
 80050d2:	464d      	mov	r5, r9
 80050d4:	42bd      	cmp	r5, r7
 80050d6:	d02d      	beq.n	8005134 <_scanf_i+0x1dc>
 80050d8:	6822      	ldr	r2, [r4, #0]
 80050da:	f012 0210 	ands.w	r2, r2, #16
 80050de:	d113      	bne.n	8005108 <_scanf_i+0x1b0>
 80050e0:	702a      	strb	r2, [r5, #0]
 80050e2:	6863      	ldr	r3, [r4, #4]
 80050e4:	9e01      	ldr	r6, [sp, #4]
 80050e6:	4639      	mov	r1, r7
 80050e8:	4650      	mov	r0, sl
 80050ea:	47b0      	blx	r6
 80050ec:	6821      	ldr	r1, [r4, #0]
 80050ee:	f8d8 3000 	ldr.w	r3, [r8]
 80050f2:	f011 0f20 	tst.w	r1, #32
 80050f6:	d013      	beq.n	8005120 <_scanf_i+0x1c8>
 80050f8:	1d1a      	adds	r2, r3, #4
 80050fa:	f8c8 2000 	str.w	r2, [r8]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	6018      	str	r0, [r3, #0]
 8005102:	68e3      	ldr	r3, [r4, #12]
 8005104:	3301      	adds	r3, #1
 8005106:	60e3      	str	r3, [r4, #12]
 8005108:	1bed      	subs	r5, r5, r7
 800510a:	44ab      	add	fp, r5
 800510c:	6925      	ldr	r5, [r4, #16]
 800510e:	445d      	add	r5, fp
 8005110:	6125      	str	r5, [r4, #16]
 8005112:	2000      	movs	r0, #0
 8005114:	b007      	add	sp, #28
 8005116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800511a:	f04f 0b00 	mov.w	fp, #0
 800511e:	e7ca      	b.n	80050b6 <_scanf_i+0x15e>
 8005120:	1d1a      	adds	r2, r3, #4
 8005122:	f8c8 2000 	str.w	r2, [r8]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f011 0f01 	tst.w	r1, #1
 800512c:	bf14      	ite	ne
 800512e:	8018      	strhne	r0, [r3, #0]
 8005130:	6018      	streq	r0, [r3, #0]
 8005132:	e7e6      	b.n	8005102 <_scanf_i+0x1aa>
 8005134:	2001      	movs	r0, #1
 8005136:	e7ed      	b.n	8005114 <_scanf_i+0x1bc>
 8005138:	080056e0 	.word	0x080056e0
 800513c:	080053a5 	.word	0x080053a5
 8005140:	080052bd 	.word	0x080052bd
 8005144:	08005721 	.word	0x08005721

08005148 <__sccl>:
 8005148:	b570      	push	{r4, r5, r6, lr}
 800514a:	780b      	ldrb	r3, [r1, #0]
 800514c:	4604      	mov	r4, r0
 800514e:	2b5e      	cmp	r3, #94	; 0x5e
 8005150:	bf0b      	itete	eq
 8005152:	784b      	ldrbeq	r3, [r1, #1]
 8005154:	1c48      	addne	r0, r1, #1
 8005156:	1c88      	addeq	r0, r1, #2
 8005158:	2200      	movne	r2, #0
 800515a:	bf08      	it	eq
 800515c:	2201      	moveq	r2, #1
 800515e:	1e61      	subs	r1, r4, #1
 8005160:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8005164:	f801 2f01 	strb.w	r2, [r1, #1]!
 8005168:	42a9      	cmp	r1, r5
 800516a:	d1fb      	bne.n	8005164 <__sccl+0x1c>
 800516c:	b90b      	cbnz	r3, 8005172 <__sccl+0x2a>
 800516e:	3801      	subs	r0, #1
 8005170:	bd70      	pop	{r4, r5, r6, pc}
 8005172:	f082 0201 	eor.w	r2, r2, #1
 8005176:	54e2      	strb	r2, [r4, r3]
 8005178:	4605      	mov	r5, r0
 800517a:	4628      	mov	r0, r5
 800517c:	f810 1b01 	ldrb.w	r1, [r0], #1
 8005180:	292d      	cmp	r1, #45	; 0x2d
 8005182:	d006      	beq.n	8005192 <__sccl+0x4a>
 8005184:	295d      	cmp	r1, #93	; 0x5d
 8005186:	d0f3      	beq.n	8005170 <__sccl+0x28>
 8005188:	b909      	cbnz	r1, 800518e <__sccl+0x46>
 800518a:	4628      	mov	r0, r5
 800518c:	e7f0      	b.n	8005170 <__sccl+0x28>
 800518e:	460b      	mov	r3, r1
 8005190:	e7f1      	b.n	8005176 <__sccl+0x2e>
 8005192:	786e      	ldrb	r6, [r5, #1]
 8005194:	2e5d      	cmp	r6, #93	; 0x5d
 8005196:	d0fa      	beq.n	800518e <__sccl+0x46>
 8005198:	42b3      	cmp	r3, r6
 800519a:	dcf8      	bgt.n	800518e <__sccl+0x46>
 800519c:	3502      	adds	r5, #2
 800519e:	4619      	mov	r1, r3
 80051a0:	3101      	adds	r1, #1
 80051a2:	428e      	cmp	r6, r1
 80051a4:	5462      	strb	r2, [r4, r1]
 80051a6:	dcfb      	bgt.n	80051a0 <__sccl+0x58>
 80051a8:	1af1      	subs	r1, r6, r3
 80051aa:	3901      	subs	r1, #1
 80051ac:	1c58      	adds	r0, r3, #1
 80051ae:	42b3      	cmp	r3, r6
 80051b0:	bfa8      	it	ge
 80051b2:	2100      	movge	r1, #0
 80051b4:	1843      	adds	r3, r0, r1
 80051b6:	e7e0      	b.n	800517a <__sccl+0x32>

080051b8 <_strtol_l.constprop.0>:
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051be:	d001      	beq.n	80051c4 <_strtol_l.constprop.0+0xc>
 80051c0:	2b24      	cmp	r3, #36	; 0x24
 80051c2:	d906      	bls.n	80051d2 <_strtol_l.constprop.0+0x1a>
 80051c4:	f7ff fc3c 	bl	8004a40 <__errno>
 80051c8:	2316      	movs	r3, #22
 80051ca:	6003      	str	r3, [r0, #0]
 80051cc:	2000      	movs	r0, #0
 80051ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051d2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80052b8 <_strtol_l.constprop.0+0x100>
 80051d6:	460d      	mov	r5, r1
 80051d8:	462e      	mov	r6, r5
 80051da:	f815 4b01 	ldrb.w	r4, [r5], #1
 80051de:	f814 700c 	ldrb.w	r7, [r4, ip]
 80051e2:	f017 0708 	ands.w	r7, r7, #8
 80051e6:	d1f7      	bne.n	80051d8 <_strtol_l.constprop.0+0x20>
 80051e8:	2c2d      	cmp	r4, #45	; 0x2d
 80051ea:	d132      	bne.n	8005252 <_strtol_l.constprop.0+0x9a>
 80051ec:	782c      	ldrb	r4, [r5, #0]
 80051ee:	2701      	movs	r7, #1
 80051f0:	1cb5      	adds	r5, r6, #2
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d05b      	beq.n	80052ae <_strtol_l.constprop.0+0xf6>
 80051f6:	2b10      	cmp	r3, #16
 80051f8:	d109      	bne.n	800520e <_strtol_l.constprop.0+0x56>
 80051fa:	2c30      	cmp	r4, #48	; 0x30
 80051fc:	d107      	bne.n	800520e <_strtol_l.constprop.0+0x56>
 80051fe:	782c      	ldrb	r4, [r5, #0]
 8005200:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005204:	2c58      	cmp	r4, #88	; 0x58
 8005206:	d14d      	bne.n	80052a4 <_strtol_l.constprop.0+0xec>
 8005208:	786c      	ldrb	r4, [r5, #1]
 800520a:	2310      	movs	r3, #16
 800520c:	3502      	adds	r5, #2
 800520e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8005212:	f108 38ff 	add.w	r8, r8, #4294967295
 8005216:	f04f 0c00 	mov.w	ip, #0
 800521a:	fbb8 f9f3 	udiv	r9, r8, r3
 800521e:	4666      	mov	r6, ip
 8005220:	fb03 8a19 	mls	sl, r3, r9, r8
 8005224:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8005228:	f1be 0f09 	cmp.w	lr, #9
 800522c:	d816      	bhi.n	800525c <_strtol_l.constprop.0+0xa4>
 800522e:	4674      	mov	r4, lr
 8005230:	42a3      	cmp	r3, r4
 8005232:	dd24      	ble.n	800527e <_strtol_l.constprop.0+0xc6>
 8005234:	f1bc 0f00 	cmp.w	ip, #0
 8005238:	db1e      	blt.n	8005278 <_strtol_l.constprop.0+0xc0>
 800523a:	45b1      	cmp	r9, r6
 800523c:	d31c      	bcc.n	8005278 <_strtol_l.constprop.0+0xc0>
 800523e:	d101      	bne.n	8005244 <_strtol_l.constprop.0+0x8c>
 8005240:	45a2      	cmp	sl, r4
 8005242:	db19      	blt.n	8005278 <_strtol_l.constprop.0+0xc0>
 8005244:	fb06 4603 	mla	r6, r6, r3, r4
 8005248:	f04f 0c01 	mov.w	ip, #1
 800524c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005250:	e7e8      	b.n	8005224 <_strtol_l.constprop.0+0x6c>
 8005252:	2c2b      	cmp	r4, #43	; 0x2b
 8005254:	bf04      	itt	eq
 8005256:	782c      	ldrbeq	r4, [r5, #0]
 8005258:	1cb5      	addeq	r5, r6, #2
 800525a:	e7ca      	b.n	80051f2 <_strtol_l.constprop.0+0x3a>
 800525c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8005260:	f1be 0f19 	cmp.w	lr, #25
 8005264:	d801      	bhi.n	800526a <_strtol_l.constprop.0+0xb2>
 8005266:	3c37      	subs	r4, #55	; 0x37
 8005268:	e7e2      	b.n	8005230 <_strtol_l.constprop.0+0x78>
 800526a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800526e:	f1be 0f19 	cmp.w	lr, #25
 8005272:	d804      	bhi.n	800527e <_strtol_l.constprop.0+0xc6>
 8005274:	3c57      	subs	r4, #87	; 0x57
 8005276:	e7db      	b.n	8005230 <_strtol_l.constprop.0+0x78>
 8005278:	f04f 3cff 	mov.w	ip, #4294967295
 800527c:	e7e6      	b.n	800524c <_strtol_l.constprop.0+0x94>
 800527e:	f1bc 0f00 	cmp.w	ip, #0
 8005282:	da05      	bge.n	8005290 <_strtol_l.constprop.0+0xd8>
 8005284:	2322      	movs	r3, #34	; 0x22
 8005286:	6003      	str	r3, [r0, #0]
 8005288:	4646      	mov	r6, r8
 800528a:	b942      	cbnz	r2, 800529e <_strtol_l.constprop.0+0xe6>
 800528c:	4630      	mov	r0, r6
 800528e:	e79e      	b.n	80051ce <_strtol_l.constprop.0+0x16>
 8005290:	b107      	cbz	r7, 8005294 <_strtol_l.constprop.0+0xdc>
 8005292:	4276      	negs	r6, r6
 8005294:	2a00      	cmp	r2, #0
 8005296:	d0f9      	beq.n	800528c <_strtol_l.constprop.0+0xd4>
 8005298:	f1bc 0f00 	cmp.w	ip, #0
 800529c:	d000      	beq.n	80052a0 <_strtol_l.constprop.0+0xe8>
 800529e:	1e69      	subs	r1, r5, #1
 80052a0:	6011      	str	r1, [r2, #0]
 80052a2:	e7f3      	b.n	800528c <_strtol_l.constprop.0+0xd4>
 80052a4:	2430      	movs	r4, #48	; 0x30
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d1b1      	bne.n	800520e <_strtol_l.constprop.0+0x56>
 80052aa:	2308      	movs	r3, #8
 80052ac:	e7af      	b.n	800520e <_strtol_l.constprop.0+0x56>
 80052ae:	2c30      	cmp	r4, #48	; 0x30
 80052b0:	d0a5      	beq.n	80051fe <_strtol_l.constprop.0+0x46>
 80052b2:	230a      	movs	r3, #10
 80052b4:	e7ab      	b.n	800520e <_strtol_l.constprop.0+0x56>
 80052b6:	bf00      	nop
 80052b8:	08005724 	.word	0x08005724

080052bc <_strtol_r>:
 80052bc:	f7ff bf7c 	b.w	80051b8 <_strtol_l.constprop.0>

080052c0 <_strtoul_l.constprop.0>:
 80052c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80052c4:	4f36      	ldr	r7, [pc, #216]	; (80053a0 <_strtoul_l.constprop.0+0xe0>)
 80052c6:	4686      	mov	lr, r0
 80052c8:	460d      	mov	r5, r1
 80052ca:	4628      	mov	r0, r5
 80052cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80052d0:	5de6      	ldrb	r6, [r4, r7]
 80052d2:	f016 0608 	ands.w	r6, r6, #8
 80052d6:	d1f8      	bne.n	80052ca <_strtoul_l.constprop.0+0xa>
 80052d8:	2c2d      	cmp	r4, #45	; 0x2d
 80052da:	d12f      	bne.n	800533c <_strtoul_l.constprop.0+0x7c>
 80052dc:	782c      	ldrb	r4, [r5, #0]
 80052de:	2601      	movs	r6, #1
 80052e0:	1c85      	adds	r5, r0, #2
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d057      	beq.n	8005396 <_strtoul_l.constprop.0+0xd6>
 80052e6:	2b10      	cmp	r3, #16
 80052e8:	d109      	bne.n	80052fe <_strtoul_l.constprop.0+0x3e>
 80052ea:	2c30      	cmp	r4, #48	; 0x30
 80052ec:	d107      	bne.n	80052fe <_strtoul_l.constprop.0+0x3e>
 80052ee:	7828      	ldrb	r0, [r5, #0]
 80052f0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80052f4:	2858      	cmp	r0, #88	; 0x58
 80052f6:	d149      	bne.n	800538c <_strtoul_l.constprop.0+0xcc>
 80052f8:	786c      	ldrb	r4, [r5, #1]
 80052fa:	2310      	movs	r3, #16
 80052fc:	3502      	adds	r5, #2
 80052fe:	f04f 38ff 	mov.w	r8, #4294967295
 8005302:	2700      	movs	r7, #0
 8005304:	fbb8 f8f3 	udiv	r8, r8, r3
 8005308:	fb03 f908 	mul.w	r9, r3, r8
 800530c:	ea6f 0909 	mvn.w	r9, r9
 8005310:	4638      	mov	r0, r7
 8005312:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005316:	f1bc 0f09 	cmp.w	ip, #9
 800531a:	d814      	bhi.n	8005346 <_strtoul_l.constprop.0+0x86>
 800531c:	4664      	mov	r4, ip
 800531e:	42a3      	cmp	r3, r4
 8005320:	dd22      	ble.n	8005368 <_strtoul_l.constprop.0+0xa8>
 8005322:	2f00      	cmp	r7, #0
 8005324:	db1d      	blt.n	8005362 <_strtoul_l.constprop.0+0xa2>
 8005326:	4580      	cmp	r8, r0
 8005328:	d31b      	bcc.n	8005362 <_strtoul_l.constprop.0+0xa2>
 800532a:	d101      	bne.n	8005330 <_strtoul_l.constprop.0+0x70>
 800532c:	45a1      	cmp	r9, r4
 800532e:	db18      	blt.n	8005362 <_strtoul_l.constprop.0+0xa2>
 8005330:	fb00 4003 	mla	r0, r0, r3, r4
 8005334:	2701      	movs	r7, #1
 8005336:	f815 4b01 	ldrb.w	r4, [r5], #1
 800533a:	e7ea      	b.n	8005312 <_strtoul_l.constprop.0+0x52>
 800533c:	2c2b      	cmp	r4, #43	; 0x2b
 800533e:	bf04      	itt	eq
 8005340:	782c      	ldrbeq	r4, [r5, #0]
 8005342:	1c85      	addeq	r5, r0, #2
 8005344:	e7cd      	b.n	80052e2 <_strtoul_l.constprop.0+0x22>
 8005346:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800534a:	f1bc 0f19 	cmp.w	ip, #25
 800534e:	d801      	bhi.n	8005354 <_strtoul_l.constprop.0+0x94>
 8005350:	3c37      	subs	r4, #55	; 0x37
 8005352:	e7e4      	b.n	800531e <_strtoul_l.constprop.0+0x5e>
 8005354:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8005358:	f1bc 0f19 	cmp.w	ip, #25
 800535c:	d804      	bhi.n	8005368 <_strtoul_l.constprop.0+0xa8>
 800535e:	3c57      	subs	r4, #87	; 0x57
 8005360:	e7dd      	b.n	800531e <_strtoul_l.constprop.0+0x5e>
 8005362:	f04f 37ff 	mov.w	r7, #4294967295
 8005366:	e7e6      	b.n	8005336 <_strtoul_l.constprop.0+0x76>
 8005368:	2f00      	cmp	r7, #0
 800536a:	da07      	bge.n	800537c <_strtoul_l.constprop.0+0xbc>
 800536c:	2322      	movs	r3, #34	; 0x22
 800536e:	f8ce 3000 	str.w	r3, [lr]
 8005372:	f04f 30ff 	mov.w	r0, #4294967295
 8005376:	b932      	cbnz	r2, 8005386 <_strtoul_l.constprop.0+0xc6>
 8005378:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800537c:	b106      	cbz	r6, 8005380 <_strtoul_l.constprop.0+0xc0>
 800537e:	4240      	negs	r0, r0
 8005380:	2a00      	cmp	r2, #0
 8005382:	d0f9      	beq.n	8005378 <_strtoul_l.constprop.0+0xb8>
 8005384:	b107      	cbz	r7, 8005388 <_strtoul_l.constprop.0+0xc8>
 8005386:	1e69      	subs	r1, r5, #1
 8005388:	6011      	str	r1, [r2, #0]
 800538a:	e7f5      	b.n	8005378 <_strtoul_l.constprop.0+0xb8>
 800538c:	2430      	movs	r4, #48	; 0x30
 800538e:	2b00      	cmp	r3, #0
 8005390:	d1b5      	bne.n	80052fe <_strtoul_l.constprop.0+0x3e>
 8005392:	2308      	movs	r3, #8
 8005394:	e7b3      	b.n	80052fe <_strtoul_l.constprop.0+0x3e>
 8005396:	2c30      	cmp	r4, #48	; 0x30
 8005398:	d0a9      	beq.n	80052ee <_strtoul_l.constprop.0+0x2e>
 800539a:	230a      	movs	r3, #10
 800539c:	e7af      	b.n	80052fe <_strtoul_l.constprop.0+0x3e>
 800539e:	bf00      	nop
 80053a0:	08005724 	.word	0x08005724

080053a4 <_strtoul_r>:
 80053a4:	f7ff bf8c 	b.w	80052c0 <_strtoul_l.constprop.0>

080053a8 <__submore>:
 80053a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053ac:	460c      	mov	r4, r1
 80053ae:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80053b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80053b4:	4299      	cmp	r1, r3
 80053b6:	d11d      	bne.n	80053f4 <__submore+0x4c>
 80053b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80053bc:	f000 f8aa 	bl	8005514 <_malloc_r>
 80053c0:	b918      	cbnz	r0, 80053ca <__submore+0x22>
 80053c2:	f04f 30ff 	mov.w	r0, #4294967295
 80053c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80053ce:	63a3      	str	r3, [r4, #56]	; 0x38
 80053d0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80053d4:	6360      	str	r0, [r4, #52]	; 0x34
 80053d6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80053da:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80053de:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80053e2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80053e6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80053ea:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80053ee:	6020      	str	r0, [r4, #0]
 80053f0:	2000      	movs	r0, #0
 80053f2:	e7e8      	b.n	80053c6 <__submore+0x1e>
 80053f4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80053f6:	0077      	lsls	r7, r6, #1
 80053f8:	463a      	mov	r2, r7
 80053fa:	f000 f8ff 	bl	80055fc <_realloc_r>
 80053fe:	4605      	mov	r5, r0
 8005400:	2800      	cmp	r0, #0
 8005402:	d0de      	beq.n	80053c2 <__submore+0x1a>
 8005404:	eb00 0806 	add.w	r8, r0, r6
 8005408:	4601      	mov	r1, r0
 800540a:	4632      	mov	r2, r6
 800540c:	4640      	mov	r0, r8
 800540e:	f000 f807 	bl	8005420 <memcpy>
 8005412:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8005416:	f8c4 8000 	str.w	r8, [r4]
 800541a:	e7e9      	b.n	80053f0 <__submore+0x48>

0800541c <__retarget_lock_acquire_recursive>:
 800541c:	4770      	bx	lr

0800541e <__retarget_lock_release_recursive>:
 800541e:	4770      	bx	lr

08005420 <memcpy>:
 8005420:	440a      	add	r2, r1
 8005422:	4291      	cmp	r1, r2
 8005424:	f100 33ff 	add.w	r3, r0, #4294967295
 8005428:	d100      	bne.n	800542c <memcpy+0xc>
 800542a:	4770      	bx	lr
 800542c:	b510      	push	{r4, lr}
 800542e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005432:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005436:	4291      	cmp	r1, r2
 8005438:	d1f9      	bne.n	800542e <memcpy+0xe>
 800543a:	bd10      	pop	{r4, pc}

0800543c <_free_r>:
 800543c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800543e:	2900      	cmp	r1, #0
 8005440:	d044      	beq.n	80054cc <_free_r+0x90>
 8005442:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005446:	9001      	str	r0, [sp, #4]
 8005448:	2b00      	cmp	r3, #0
 800544a:	f1a1 0404 	sub.w	r4, r1, #4
 800544e:	bfb8      	it	lt
 8005450:	18e4      	addlt	r4, r4, r3
 8005452:	f000 f913 	bl	800567c <__malloc_lock>
 8005456:	4a1e      	ldr	r2, [pc, #120]	; (80054d0 <_free_r+0x94>)
 8005458:	9801      	ldr	r0, [sp, #4]
 800545a:	6813      	ldr	r3, [r2, #0]
 800545c:	b933      	cbnz	r3, 800546c <_free_r+0x30>
 800545e:	6063      	str	r3, [r4, #4]
 8005460:	6014      	str	r4, [r2, #0]
 8005462:	b003      	add	sp, #12
 8005464:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005468:	f000 b90e 	b.w	8005688 <__malloc_unlock>
 800546c:	42a3      	cmp	r3, r4
 800546e:	d908      	bls.n	8005482 <_free_r+0x46>
 8005470:	6825      	ldr	r5, [r4, #0]
 8005472:	1961      	adds	r1, r4, r5
 8005474:	428b      	cmp	r3, r1
 8005476:	bf01      	itttt	eq
 8005478:	6819      	ldreq	r1, [r3, #0]
 800547a:	685b      	ldreq	r3, [r3, #4]
 800547c:	1949      	addeq	r1, r1, r5
 800547e:	6021      	streq	r1, [r4, #0]
 8005480:	e7ed      	b.n	800545e <_free_r+0x22>
 8005482:	461a      	mov	r2, r3
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	b10b      	cbz	r3, 800548c <_free_r+0x50>
 8005488:	42a3      	cmp	r3, r4
 800548a:	d9fa      	bls.n	8005482 <_free_r+0x46>
 800548c:	6811      	ldr	r1, [r2, #0]
 800548e:	1855      	adds	r5, r2, r1
 8005490:	42a5      	cmp	r5, r4
 8005492:	d10b      	bne.n	80054ac <_free_r+0x70>
 8005494:	6824      	ldr	r4, [r4, #0]
 8005496:	4421      	add	r1, r4
 8005498:	1854      	adds	r4, r2, r1
 800549a:	42a3      	cmp	r3, r4
 800549c:	6011      	str	r1, [r2, #0]
 800549e:	d1e0      	bne.n	8005462 <_free_r+0x26>
 80054a0:	681c      	ldr	r4, [r3, #0]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	6053      	str	r3, [r2, #4]
 80054a6:	4421      	add	r1, r4
 80054a8:	6011      	str	r1, [r2, #0]
 80054aa:	e7da      	b.n	8005462 <_free_r+0x26>
 80054ac:	d902      	bls.n	80054b4 <_free_r+0x78>
 80054ae:	230c      	movs	r3, #12
 80054b0:	6003      	str	r3, [r0, #0]
 80054b2:	e7d6      	b.n	8005462 <_free_r+0x26>
 80054b4:	6825      	ldr	r5, [r4, #0]
 80054b6:	1961      	adds	r1, r4, r5
 80054b8:	428b      	cmp	r3, r1
 80054ba:	bf04      	itt	eq
 80054bc:	6819      	ldreq	r1, [r3, #0]
 80054be:	685b      	ldreq	r3, [r3, #4]
 80054c0:	6063      	str	r3, [r4, #4]
 80054c2:	bf04      	itt	eq
 80054c4:	1949      	addeq	r1, r1, r5
 80054c6:	6021      	streq	r1, [r4, #0]
 80054c8:	6054      	str	r4, [r2, #4]
 80054ca:	e7ca      	b.n	8005462 <_free_r+0x26>
 80054cc:	b003      	add	sp, #12
 80054ce:	bd30      	pop	{r4, r5, pc}
 80054d0:	20000234 	.word	0x20000234

080054d4 <sbrk_aligned>:
 80054d4:	b570      	push	{r4, r5, r6, lr}
 80054d6:	4e0e      	ldr	r6, [pc, #56]	; (8005510 <sbrk_aligned+0x3c>)
 80054d8:	460c      	mov	r4, r1
 80054da:	6831      	ldr	r1, [r6, #0]
 80054dc:	4605      	mov	r5, r0
 80054de:	b911      	cbnz	r1, 80054e6 <sbrk_aligned+0x12>
 80054e0:	f000 f8bc 	bl	800565c <_sbrk_r>
 80054e4:	6030      	str	r0, [r6, #0]
 80054e6:	4621      	mov	r1, r4
 80054e8:	4628      	mov	r0, r5
 80054ea:	f000 f8b7 	bl	800565c <_sbrk_r>
 80054ee:	1c43      	adds	r3, r0, #1
 80054f0:	d00a      	beq.n	8005508 <sbrk_aligned+0x34>
 80054f2:	1cc4      	adds	r4, r0, #3
 80054f4:	f024 0403 	bic.w	r4, r4, #3
 80054f8:	42a0      	cmp	r0, r4
 80054fa:	d007      	beq.n	800550c <sbrk_aligned+0x38>
 80054fc:	1a21      	subs	r1, r4, r0
 80054fe:	4628      	mov	r0, r5
 8005500:	f000 f8ac 	bl	800565c <_sbrk_r>
 8005504:	3001      	adds	r0, #1
 8005506:	d101      	bne.n	800550c <sbrk_aligned+0x38>
 8005508:	f04f 34ff 	mov.w	r4, #4294967295
 800550c:	4620      	mov	r0, r4
 800550e:	bd70      	pop	{r4, r5, r6, pc}
 8005510:	20000238 	.word	0x20000238

08005514 <_malloc_r>:
 8005514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005518:	1ccd      	adds	r5, r1, #3
 800551a:	f025 0503 	bic.w	r5, r5, #3
 800551e:	3508      	adds	r5, #8
 8005520:	2d0c      	cmp	r5, #12
 8005522:	bf38      	it	cc
 8005524:	250c      	movcc	r5, #12
 8005526:	2d00      	cmp	r5, #0
 8005528:	4607      	mov	r7, r0
 800552a:	db01      	blt.n	8005530 <_malloc_r+0x1c>
 800552c:	42a9      	cmp	r1, r5
 800552e:	d905      	bls.n	800553c <_malloc_r+0x28>
 8005530:	230c      	movs	r3, #12
 8005532:	603b      	str	r3, [r7, #0]
 8005534:	2600      	movs	r6, #0
 8005536:	4630      	mov	r0, r6
 8005538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800553c:	4e2e      	ldr	r6, [pc, #184]	; (80055f8 <_malloc_r+0xe4>)
 800553e:	f000 f89d 	bl	800567c <__malloc_lock>
 8005542:	6833      	ldr	r3, [r6, #0]
 8005544:	461c      	mov	r4, r3
 8005546:	bb34      	cbnz	r4, 8005596 <_malloc_r+0x82>
 8005548:	4629      	mov	r1, r5
 800554a:	4638      	mov	r0, r7
 800554c:	f7ff ffc2 	bl	80054d4 <sbrk_aligned>
 8005550:	1c43      	adds	r3, r0, #1
 8005552:	4604      	mov	r4, r0
 8005554:	d14d      	bne.n	80055f2 <_malloc_r+0xde>
 8005556:	6834      	ldr	r4, [r6, #0]
 8005558:	4626      	mov	r6, r4
 800555a:	2e00      	cmp	r6, #0
 800555c:	d140      	bne.n	80055e0 <_malloc_r+0xcc>
 800555e:	6823      	ldr	r3, [r4, #0]
 8005560:	4631      	mov	r1, r6
 8005562:	4638      	mov	r0, r7
 8005564:	eb04 0803 	add.w	r8, r4, r3
 8005568:	f000 f878 	bl	800565c <_sbrk_r>
 800556c:	4580      	cmp	r8, r0
 800556e:	d13a      	bne.n	80055e6 <_malloc_r+0xd2>
 8005570:	6821      	ldr	r1, [r4, #0]
 8005572:	3503      	adds	r5, #3
 8005574:	1a6d      	subs	r5, r5, r1
 8005576:	f025 0503 	bic.w	r5, r5, #3
 800557a:	3508      	adds	r5, #8
 800557c:	2d0c      	cmp	r5, #12
 800557e:	bf38      	it	cc
 8005580:	250c      	movcc	r5, #12
 8005582:	4629      	mov	r1, r5
 8005584:	4638      	mov	r0, r7
 8005586:	f7ff ffa5 	bl	80054d4 <sbrk_aligned>
 800558a:	3001      	adds	r0, #1
 800558c:	d02b      	beq.n	80055e6 <_malloc_r+0xd2>
 800558e:	6823      	ldr	r3, [r4, #0]
 8005590:	442b      	add	r3, r5
 8005592:	6023      	str	r3, [r4, #0]
 8005594:	e00e      	b.n	80055b4 <_malloc_r+0xa0>
 8005596:	6822      	ldr	r2, [r4, #0]
 8005598:	1b52      	subs	r2, r2, r5
 800559a:	d41e      	bmi.n	80055da <_malloc_r+0xc6>
 800559c:	2a0b      	cmp	r2, #11
 800559e:	d916      	bls.n	80055ce <_malloc_r+0xba>
 80055a0:	1961      	adds	r1, r4, r5
 80055a2:	42a3      	cmp	r3, r4
 80055a4:	6025      	str	r5, [r4, #0]
 80055a6:	bf18      	it	ne
 80055a8:	6059      	strne	r1, [r3, #4]
 80055aa:	6863      	ldr	r3, [r4, #4]
 80055ac:	bf08      	it	eq
 80055ae:	6031      	streq	r1, [r6, #0]
 80055b0:	5162      	str	r2, [r4, r5]
 80055b2:	604b      	str	r3, [r1, #4]
 80055b4:	4638      	mov	r0, r7
 80055b6:	f104 060b 	add.w	r6, r4, #11
 80055ba:	f000 f865 	bl	8005688 <__malloc_unlock>
 80055be:	f026 0607 	bic.w	r6, r6, #7
 80055c2:	1d23      	adds	r3, r4, #4
 80055c4:	1af2      	subs	r2, r6, r3
 80055c6:	d0b6      	beq.n	8005536 <_malloc_r+0x22>
 80055c8:	1b9b      	subs	r3, r3, r6
 80055ca:	50a3      	str	r3, [r4, r2]
 80055cc:	e7b3      	b.n	8005536 <_malloc_r+0x22>
 80055ce:	6862      	ldr	r2, [r4, #4]
 80055d0:	42a3      	cmp	r3, r4
 80055d2:	bf0c      	ite	eq
 80055d4:	6032      	streq	r2, [r6, #0]
 80055d6:	605a      	strne	r2, [r3, #4]
 80055d8:	e7ec      	b.n	80055b4 <_malloc_r+0xa0>
 80055da:	4623      	mov	r3, r4
 80055dc:	6864      	ldr	r4, [r4, #4]
 80055de:	e7b2      	b.n	8005546 <_malloc_r+0x32>
 80055e0:	4634      	mov	r4, r6
 80055e2:	6876      	ldr	r6, [r6, #4]
 80055e4:	e7b9      	b.n	800555a <_malloc_r+0x46>
 80055e6:	230c      	movs	r3, #12
 80055e8:	603b      	str	r3, [r7, #0]
 80055ea:	4638      	mov	r0, r7
 80055ec:	f000 f84c 	bl	8005688 <__malloc_unlock>
 80055f0:	e7a1      	b.n	8005536 <_malloc_r+0x22>
 80055f2:	6025      	str	r5, [r4, #0]
 80055f4:	e7de      	b.n	80055b4 <_malloc_r+0xa0>
 80055f6:	bf00      	nop
 80055f8:	20000234 	.word	0x20000234

080055fc <_realloc_r>:
 80055fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005600:	4680      	mov	r8, r0
 8005602:	4614      	mov	r4, r2
 8005604:	460e      	mov	r6, r1
 8005606:	b921      	cbnz	r1, 8005612 <_realloc_r+0x16>
 8005608:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800560c:	4611      	mov	r1, r2
 800560e:	f7ff bf81 	b.w	8005514 <_malloc_r>
 8005612:	b92a      	cbnz	r2, 8005620 <_realloc_r+0x24>
 8005614:	f7ff ff12 	bl	800543c <_free_r>
 8005618:	4625      	mov	r5, r4
 800561a:	4628      	mov	r0, r5
 800561c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005620:	f000 f838 	bl	8005694 <_malloc_usable_size_r>
 8005624:	4284      	cmp	r4, r0
 8005626:	4607      	mov	r7, r0
 8005628:	d802      	bhi.n	8005630 <_realloc_r+0x34>
 800562a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800562e:	d812      	bhi.n	8005656 <_realloc_r+0x5a>
 8005630:	4621      	mov	r1, r4
 8005632:	4640      	mov	r0, r8
 8005634:	f7ff ff6e 	bl	8005514 <_malloc_r>
 8005638:	4605      	mov	r5, r0
 800563a:	2800      	cmp	r0, #0
 800563c:	d0ed      	beq.n	800561a <_realloc_r+0x1e>
 800563e:	42bc      	cmp	r4, r7
 8005640:	4622      	mov	r2, r4
 8005642:	4631      	mov	r1, r6
 8005644:	bf28      	it	cs
 8005646:	463a      	movcs	r2, r7
 8005648:	f7ff feea 	bl	8005420 <memcpy>
 800564c:	4631      	mov	r1, r6
 800564e:	4640      	mov	r0, r8
 8005650:	f7ff fef4 	bl	800543c <_free_r>
 8005654:	e7e1      	b.n	800561a <_realloc_r+0x1e>
 8005656:	4635      	mov	r5, r6
 8005658:	e7df      	b.n	800561a <_realloc_r+0x1e>
	...

0800565c <_sbrk_r>:
 800565c:	b538      	push	{r3, r4, r5, lr}
 800565e:	4d06      	ldr	r5, [pc, #24]	; (8005678 <_sbrk_r+0x1c>)
 8005660:	2300      	movs	r3, #0
 8005662:	4604      	mov	r4, r0
 8005664:	4608      	mov	r0, r1
 8005666:	602b      	str	r3, [r5, #0]
 8005668:	f7fb fe64 	bl	8001334 <_sbrk>
 800566c:	1c43      	adds	r3, r0, #1
 800566e:	d102      	bne.n	8005676 <_sbrk_r+0x1a>
 8005670:	682b      	ldr	r3, [r5, #0]
 8005672:	b103      	cbz	r3, 8005676 <_sbrk_r+0x1a>
 8005674:	6023      	str	r3, [r4, #0]
 8005676:	bd38      	pop	{r3, r4, r5, pc}
 8005678:	2000022c 	.word	0x2000022c

0800567c <__malloc_lock>:
 800567c:	4801      	ldr	r0, [pc, #4]	; (8005684 <__malloc_lock+0x8>)
 800567e:	f7ff becd 	b.w	800541c <__retarget_lock_acquire_recursive>
 8005682:	bf00      	nop
 8005684:	20000230 	.word	0x20000230

08005688 <__malloc_unlock>:
 8005688:	4801      	ldr	r0, [pc, #4]	; (8005690 <__malloc_unlock+0x8>)
 800568a:	f7ff bec8 	b.w	800541e <__retarget_lock_release_recursive>
 800568e:	bf00      	nop
 8005690:	20000230 	.word	0x20000230

08005694 <_malloc_usable_size_r>:
 8005694:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005698:	1f18      	subs	r0, r3, #4
 800569a:	2b00      	cmp	r3, #0
 800569c:	bfbc      	itt	lt
 800569e:	580b      	ldrlt	r3, [r1, r0]
 80056a0:	18c0      	addlt	r0, r0, r3
 80056a2:	4770      	bx	lr

080056a4 <_init>:
 80056a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056a6:	bf00      	nop
 80056a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056aa:	bc08      	pop	{r3}
 80056ac:	469e      	mov	lr, r3
 80056ae:	4770      	bx	lr

080056b0 <_fini>:
 80056b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056b2:	bf00      	nop
 80056b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056b6:	bc08      	pop	{r3}
 80056b8:	469e      	mov	lr, r3
 80056ba:	4770      	bx	lr
