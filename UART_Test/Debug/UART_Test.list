
UART_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005470  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  08005640  08005640  00015640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005838  08005838  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08005838  08005838  00015838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005840  08005840  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005840  08005840  00015840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005844  08005844  00015844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08005848  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  20000088  080058d0  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000254  080058d0  00020254  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e6a2  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001de8  00000000  00000000  0002e75a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc8  00000000  00000000  00030548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c10  00000000  00000000  00031210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000220c9  00000000  00000000  00031e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f5b3  00000000  00000000  00053ee9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d105b  00000000  00000000  0006349c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001344f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cc0  00000000  00000000  00134548  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000088 	.word	0x20000088
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005628 	.word	0x08005628

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000008c 	.word	0x2000008c
 800020c:	08005628 	.word	0x08005628

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e8:	f000 fef2 	bl	80013d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ec:	f000 f84a 	bl	8000684 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f0:	f000 fa66 	bl	8000ac0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005f4:	f000 fa3a 	bl	8000a6c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80005f8:	f000 f8b2 	bl	8000760 <MX_TIM2_Init>
  MX_TIM3_Init();
 80005fc:	f000 f932 	bl	8000864 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000600:	f000 f9b2 	bl	8000968 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  // start UART:
  HAL_UART_Receive_IT(&huart2, rx_data, 1); // interrupt based UART receive
 8000604:	2201      	movs	r2, #1
 8000606:	491a      	ldr	r1, [pc, #104]	; (8000670 <main+0x8c>)
 8000608:	481a      	ldr	r0, [pc, #104]	; (8000674 <main+0x90>)
 800060a:	f003 fa42 	bl	8003a92 <HAL_UART_Receive_IT>
  // start interrupt-based PWM timers:
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
 800060e:	2100      	movs	r1, #0
 8000610:	4819      	ldr	r0, [pc, #100]	; (8000678 <main+0x94>)
 8000612:	f002 f931 	bl	8002878 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_2);
 8000616:	2104      	movs	r1, #4
 8000618:	4817      	ldr	r0, [pc, #92]	; (8000678 <main+0x94>)
 800061a:	f002 f92d 	bl	8002878 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 800061e:	2100      	movs	r1, #0
 8000620:	4816      	ldr	r0, [pc, #88]	; (800067c <main+0x98>)
 8000622:	f002 f929 	bl	8002878 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_2);
 8000626:	2104      	movs	r1, #4
 8000628:	4814      	ldr	r0, [pc, #80]	; (800067c <main+0x98>)
 800062a:	f002 f925 	bl	8002878 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_1);
 800062e:	2100      	movs	r1, #0
 8000630:	4813      	ldr	r0, [pc, #76]	; (8000680 <main+0x9c>)
 8000632:	f002 f921 	bl	8002878 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_2);
 8000636:	2104      	movs	r1, #4
 8000638:	4811      	ldr	r0, [pc, #68]	; (8000680 <main+0x9c>)
 800063a:	f002 f91d 	bl	8002878 <HAL_TIM_PWM_Start_IT>

  // set duty cycles:
  htim2.Instance->CCR1 = 100;
 800063e:	4b0e      	ldr	r3, [pc, #56]	; (8000678 <main+0x94>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	2264      	movs	r2, #100	; 0x64
 8000644:	635a      	str	r2, [r3, #52]	; 0x34
  htim2.Instance->CCR2 = 80;
 8000646:	4b0c      	ldr	r3, [pc, #48]	; (8000678 <main+0x94>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	2250      	movs	r2, #80	; 0x50
 800064c:	639a      	str	r2, [r3, #56]	; 0x38
  htim3.Instance->CCR1 = 60;
 800064e:	4b0b      	ldr	r3, [pc, #44]	; (800067c <main+0x98>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	223c      	movs	r2, #60	; 0x3c
 8000654:	635a      	str	r2, [r3, #52]	; 0x34
  htim3.Instance->CCR2 = 40;
 8000656:	4b09      	ldr	r3, [pc, #36]	; (800067c <main+0x98>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	2228      	movs	r2, #40	; 0x28
 800065c:	639a      	str	r2, [r3, #56]	; 0x38
  htim4.Instance->CCR1 = 20;
 800065e:	4b08      	ldr	r3, [pc, #32]	; (8000680 <main+0x9c>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	2214      	movs	r2, #20
 8000664:	635a      	str	r2, [r3, #52]	; 0x34
  htim4.Instance->CCR2 = 10;
 8000666:	4b06      	ldr	r3, [pc, #24]	; (8000680 <main+0x9c>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	220a      	movs	r2, #10
 800066c:	639a      	str	r2, [r3, #56]	; 0x38

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800066e:	e7fe      	b.n	800066e <main+0x8a>
 8000670:	200001c4 	.word	0x200001c4
 8000674:	2000017c 	.word	0x2000017c
 8000678:	200000a4 	.word	0x200000a4
 800067c:	200000ec 	.word	0x200000ec
 8000680:	20000134 	.word	0x20000134

08000684 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b094      	sub	sp, #80	; 0x50
 8000688:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068a:	f107 031c 	add.w	r3, r7, #28
 800068e:	2234      	movs	r2, #52	; 0x34
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f004 f9c0 	bl	8004a18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000698:	f107 0308 	add.w	r3, r7, #8
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a8:	2300      	movs	r3, #0
 80006aa:	607b      	str	r3, [r7, #4]
 80006ac:	4b2a      	ldr	r3, [pc, #168]	; (8000758 <SystemClock_Config+0xd4>)
 80006ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b0:	4a29      	ldr	r2, [pc, #164]	; (8000758 <SystemClock_Config+0xd4>)
 80006b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006b6:	6413      	str	r3, [r2, #64]	; 0x40
 80006b8:	4b27      	ldr	r3, [pc, #156]	; (8000758 <SystemClock_Config+0xd4>)
 80006ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c0:	607b      	str	r3, [r7, #4]
 80006c2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006c4:	2300      	movs	r3, #0
 80006c6:	603b      	str	r3, [r7, #0]
 80006c8:	4b24      	ldr	r3, [pc, #144]	; (800075c <SystemClock_Config+0xd8>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006d0:	4a22      	ldr	r2, [pc, #136]	; (800075c <SystemClock_Config+0xd8>)
 80006d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006d6:	6013      	str	r3, [r2, #0]
 80006d8:	4b20      	ldr	r3, [pc, #128]	; (800075c <SystemClock_Config+0xd8>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006e0:	603b      	str	r3, [r7, #0]
 80006e2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006e4:	2302      	movs	r3, #2
 80006e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e8:	2301      	movs	r3, #1
 80006ea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ec:	2310      	movs	r3, #16
 80006ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f0:	2302      	movs	r3, #2
 80006f2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006f4:	2300      	movs	r3, #0
 80006f6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006f8:	2310      	movs	r3, #16
 80006fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006fc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000700:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000702:	2304      	movs	r3, #4
 8000704:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000706:	2302      	movs	r3, #2
 8000708:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800070a:	2302      	movs	r3, #2
 800070c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070e:	f107 031c 	add.w	r3, r7, #28
 8000712:	4618      	mov	r0, r3
 8000714:	f001 fd6a 	bl	80021ec <HAL_RCC_OscConfig>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800071e:	f000 fc2d 	bl	8000f7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000722:	230f      	movs	r3, #15
 8000724:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000726:	2302      	movs	r3, #2
 8000728:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800072a:	2300      	movs	r3, #0
 800072c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800072e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000732:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000734:	2300      	movs	r3, #0
 8000736:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000738:	f107 0308 	add.w	r3, r7, #8
 800073c:	2102      	movs	r1, #2
 800073e:	4618      	mov	r0, r3
 8000740:	f001 fa0a 	bl	8001b58 <HAL_RCC_ClockConfig>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800074a:	f000 fc17 	bl	8000f7c <Error_Handler>
  }
}
 800074e:	bf00      	nop
 8000750:	3750      	adds	r7, #80	; 0x50
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40023800 	.word	0x40023800
 800075c:	40007000 	.word	0x40007000

08000760 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b08e      	sub	sp, #56	; 0x38
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000766:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
 8000772:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000774:	f107 0320 	add.w	r3, r7, #32
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800077e:	1d3b      	adds	r3, r7, #4
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
 8000786:	609a      	str	r2, [r3, #8]
 8000788:	60da      	str	r2, [r3, #12]
 800078a:	611a      	str	r2, [r3, #16]
 800078c:	615a      	str	r2, [r3, #20]
 800078e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000790:	4b33      	ldr	r3, [pc, #204]	; (8000860 <MX_TIM2_Init+0x100>)
 8000792:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000796:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000798:	4b31      	ldr	r3, [pc, #196]	; (8000860 <MX_TIM2_Init+0x100>)
 800079a:	2200      	movs	r2, #0
 800079c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800079e:	4b30      	ldr	r3, [pc, #192]	; (8000860 <MX_TIM2_Init+0x100>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 80007a4:	4b2e      	ldr	r3, [pc, #184]	; (8000860 <MX_TIM2_Init+0x100>)
 80007a6:	2264      	movs	r2, #100	; 0x64
 80007a8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007aa:	4b2d      	ldr	r3, [pc, #180]	; (8000860 <MX_TIM2_Init+0x100>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007b0:	4b2b      	ldr	r3, [pc, #172]	; (8000860 <MX_TIM2_Init+0x100>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007b6:	482a      	ldr	r0, [pc, #168]	; (8000860 <MX_TIM2_Init+0x100>)
 80007b8:	f001 ffb6 	bl	8002728 <HAL_TIM_Base_Init>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80007c2:	f000 fbdb 	bl	8000f7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ca:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007d0:	4619      	mov	r1, r3
 80007d2:	4823      	ldr	r0, [pc, #140]	; (8000860 <MX_TIM2_Init+0x100>)
 80007d4:	f002 fbee 	bl	8002fb4 <HAL_TIM_ConfigClockSource>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80007de:	f000 fbcd 	bl	8000f7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80007e2:	481f      	ldr	r0, [pc, #124]	; (8000860 <MX_TIM2_Init+0x100>)
 80007e4:	f001 ffef 	bl	80027c6 <HAL_TIM_PWM_Init>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80007ee:	f000 fbc5 	bl	8000f7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007f2:	2300      	movs	r3, #0
 80007f4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007f6:	2300      	movs	r3, #0
 80007f8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007fa:	f107 0320 	add.w	r3, r7, #32
 80007fe:	4619      	mov	r1, r3
 8000800:	4817      	ldr	r0, [pc, #92]	; (8000860 <MX_TIM2_Init+0x100>)
 8000802:	f002 ffd7 	bl	80037b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 800080c:	f000 fbb6 	bl	8000f7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000810:	2360      	movs	r3, #96	; 0x60
 8000812:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1;
 8000814:	2301      	movs	r3, #1
 8000816:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000818:	2300      	movs	r3, #0
 800081a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800081c:	2300      	movs	r3, #0
 800081e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000820:	1d3b      	adds	r3, r7, #4
 8000822:	2200      	movs	r2, #0
 8000824:	4619      	mov	r1, r3
 8000826:	480e      	ldr	r0, [pc, #56]	; (8000860 <MX_TIM2_Init+0x100>)
 8000828:	f002 fb02 	bl	8002e30 <HAL_TIM_PWM_ConfigChannel>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000832:	f000 fba3 	bl	8000f7c <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000836:	2300      	movs	r3, #0
 8000838:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800083a:	1d3b      	adds	r3, r7, #4
 800083c:	2204      	movs	r2, #4
 800083e:	4619      	mov	r1, r3
 8000840:	4807      	ldr	r0, [pc, #28]	; (8000860 <MX_TIM2_Init+0x100>)
 8000842:	f002 faf5 	bl	8002e30 <HAL_TIM_PWM_ConfigChannel>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 800084c:	f000 fb96 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000850:	4803      	ldr	r0, [pc, #12]	; (8000860 <MX_TIM2_Init+0x100>)
 8000852:	f000 fc23 	bl	800109c <HAL_TIM_MspPostInit>

}
 8000856:	bf00      	nop
 8000858:	3738      	adds	r7, #56	; 0x38
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	200000a4 	.word	0x200000a4

08000864 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b08e      	sub	sp, #56	; 0x38
 8000868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800086a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]
 8000874:	609a      	str	r2, [r3, #8]
 8000876:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000878:	f107 0320 	add.w	r3, r7, #32
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000882:	1d3b      	adds	r3, r7, #4
 8000884:	2200      	movs	r2, #0
 8000886:	601a      	str	r2, [r3, #0]
 8000888:	605a      	str	r2, [r3, #4]
 800088a:	609a      	str	r2, [r3, #8]
 800088c:	60da      	str	r2, [r3, #12]
 800088e:	611a      	str	r2, [r3, #16]
 8000890:	615a      	str	r2, [r3, #20]
 8000892:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000894:	4b32      	ldr	r3, [pc, #200]	; (8000960 <MX_TIM3_Init+0xfc>)
 8000896:	4a33      	ldr	r2, [pc, #204]	; (8000964 <MX_TIM3_Init+0x100>)
 8000898:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800089a:	4b31      	ldr	r3, [pc, #196]	; (8000960 <MX_TIM3_Init+0xfc>)
 800089c:	2200      	movs	r2, #0
 800089e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008a0:	4b2f      	ldr	r3, [pc, #188]	; (8000960 <MX_TIM3_Init+0xfc>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 80008a6:	4b2e      	ldr	r3, [pc, #184]	; (8000960 <MX_TIM3_Init+0xfc>)
 80008a8:	2264      	movs	r2, #100	; 0x64
 80008aa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ac:	4b2c      	ldr	r3, [pc, #176]	; (8000960 <MX_TIM3_Init+0xfc>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008b2:	4b2b      	ldr	r3, [pc, #172]	; (8000960 <MX_TIM3_Init+0xfc>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008b8:	4829      	ldr	r0, [pc, #164]	; (8000960 <MX_TIM3_Init+0xfc>)
 80008ba:	f001 ff35 	bl	8002728 <HAL_TIM_Base_Init>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 80008c4:	f000 fb5a 	bl	8000f7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008cc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80008ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008d2:	4619      	mov	r1, r3
 80008d4:	4822      	ldr	r0, [pc, #136]	; (8000960 <MX_TIM3_Init+0xfc>)
 80008d6:	f002 fb6d 	bl	8002fb4 <HAL_TIM_ConfigClockSource>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80008e0:	f000 fb4c 	bl	8000f7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80008e4:	481e      	ldr	r0, [pc, #120]	; (8000960 <MX_TIM3_Init+0xfc>)
 80008e6:	f001 ff6e 	bl	80027c6 <HAL_TIM_PWM_Init>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80008f0:	f000 fb44 	bl	8000f7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008f4:	2300      	movs	r3, #0
 80008f6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008f8:	2300      	movs	r3, #0
 80008fa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008fc:	f107 0320 	add.w	r3, r7, #32
 8000900:	4619      	mov	r1, r3
 8000902:	4817      	ldr	r0, [pc, #92]	; (8000960 <MX_TIM3_Init+0xfc>)
 8000904:	f002 ff56 	bl	80037b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800090e:	f000 fb35 	bl	8000f7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000912:	2360      	movs	r3, #96	; 0x60
 8000914:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1;
 8000916:	2301      	movs	r3, #1
 8000918:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800091a:	2300      	movs	r3, #0
 800091c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800091e:	2300      	movs	r3, #0
 8000920:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000922:	1d3b      	adds	r3, r7, #4
 8000924:	2200      	movs	r2, #0
 8000926:	4619      	mov	r1, r3
 8000928:	480d      	ldr	r0, [pc, #52]	; (8000960 <MX_TIM3_Init+0xfc>)
 800092a:	f002 fa81 	bl	8002e30 <HAL_TIM_PWM_ConfigChannel>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8000934:	f000 fb22 	bl	8000f7c <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000938:	2300      	movs	r3, #0
 800093a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800093c:	1d3b      	adds	r3, r7, #4
 800093e:	2204      	movs	r2, #4
 8000940:	4619      	mov	r1, r3
 8000942:	4807      	ldr	r0, [pc, #28]	; (8000960 <MX_TIM3_Init+0xfc>)
 8000944:	f002 fa74 	bl	8002e30 <HAL_TIM_PWM_ConfigChannel>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 800094e:	f000 fb15 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000952:	4803      	ldr	r0, [pc, #12]	; (8000960 <MX_TIM3_Init+0xfc>)
 8000954:	f000 fba2 	bl	800109c <HAL_TIM_MspPostInit>

}
 8000958:	bf00      	nop
 800095a:	3738      	adds	r7, #56	; 0x38
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	200000ec 	.word	0x200000ec
 8000964:	40000400 	.word	0x40000400

08000968 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b08e      	sub	sp, #56	; 0x38
 800096c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800096e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000972:	2200      	movs	r2, #0
 8000974:	601a      	str	r2, [r3, #0]
 8000976:	605a      	str	r2, [r3, #4]
 8000978:	609a      	str	r2, [r3, #8]
 800097a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800097c:	f107 0320 	add.w	r3, r7, #32
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000986:	1d3b      	adds	r3, r7, #4
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
 8000992:	611a      	str	r2, [r3, #16]
 8000994:	615a      	str	r2, [r3, #20]
 8000996:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000998:	4b32      	ldr	r3, [pc, #200]	; (8000a64 <MX_TIM4_Init+0xfc>)
 800099a:	4a33      	ldr	r2, [pc, #204]	; (8000a68 <MX_TIM4_Init+0x100>)
 800099c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800099e:	4b31      	ldr	r3, [pc, #196]	; (8000a64 <MX_TIM4_Init+0xfc>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009a4:	4b2f      	ldr	r3, [pc, #188]	; (8000a64 <MX_TIM4_Init+0xfc>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 80009aa:	4b2e      	ldr	r3, [pc, #184]	; (8000a64 <MX_TIM4_Init+0xfc>)
 80009ac:	2264      	movs	r2, #100	; 0x64
 80009ae:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009b0:	4b2c      	ldr	r3, [pc, #176]	; (8000a64 <MX_TIM4_Init+0xfc>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009b6:	4b2b      	ldr	r3, [pc, #172]	; (8000a64 <MX_TIM4_Init+0xfc>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80009bc:	4829      	ldr	r0, [pc, #164]	; (8000a64 <MX_TIM4_Init+0xfc>)
 80009be:	f001 feb3 	bl	8002728 <HAL_TIM_Base_Init>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 80009c8:	f000 fad8 	bl	8000f7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009d0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80009d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009d6:	4619      	mov	r1, r3
 80009d8:	4822      	ldr	r0, [pc, #136]	; (8000a64 <MX_TIM4_Init+0xfc>)
 80009da:	f002 faeb 	bl	8002fb4 <HAL_TIM_ConfigClockSource>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 80009e4:	f000 faca 	bl	8000f7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80009e8:	481e      	ldr	r0, [pc, #120]	; (8000a64 <MX_TIM4_Init+0xfc>)
 80009ea:	f001 feec 	bl	80027c6 <HAL_TIM_PWM_Init>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 80009f4:	f000 fac2 	bl	8000f7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009f8:	2300      	movs	r3, #0
 80009fa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009fc:	2300      	movs	r3, #0
 80009fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a00:	f107 0320 	add.w	r3, r7, #32
 8000a04:	4619      	mov	r1, r3
 8000a06:	4817      	ldr	r0, [pc, #92]	; (8000a64 <MX_TIM4_Init+0xfc>)
 8000a08:	f002 fed4 	bl	80037b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8000a12:	f000 fab3 	bl	8000f7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a16:	2360      	movs	r3, #96	; 0x60
 8000a18:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a22:	2300      	movs	r3, #0
 8000a24:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a26:	1d3b      	adds	r3, r7, #4
 8000a28:	2200      	movs	r2, #0
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	480d      	ldr	r0, [pc, #52]	; (8000a64 <MX_TIM4_Init+0xfc>)
 8000a2e:	f002 f9ff 	bl	8002e30 <HAL_TIM_PWM_ConfigChannel>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8000a38:	f000 faa0 	bl	8000f7c <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a40:	1d3b      	adds	r3, r7, #4
 8000a42:	2204      	movs	r2, #4
 8000a44:	4619      	mov	r1, r3
 8000a46:	4807      	ldr	r0, [pc, #28]	; (8000a64 <MX_TIM4_Init+0xfc>)
 8000a48:	f002 f9f2 	bl	8002e30 <HAL_TIM_PWM_ConfigChannel>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 8000a52:	f000 fa93 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000a56:	4803      	ldr	r0, [pc, #12]	; (8000a64 <MX_TIM4_Init+0xfc>)
 8000a58:	f000 fb20 	bl	800109c <HAL_TIM_MspPostInit>

}
 8000a5c:	bf00      	nop
 8000a5e:	3738      	adds	r7, #56	; 0x38
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	20000134 	.word	0x20000134
 8000a68:	40000800 	.word	0x40000800

08000a6c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a70:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <MX_USART2_UART_Init+0x4c>)
 8000a72:	4a12      	ldr	r2, [pc, #72]	; (8000abc <MX_USART2_UART_Init+0x50>)
 8000a74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a76:	4b10      	ldr	r3, [pc, #64]	; (8000ab8 <MX_USART2_UART_Init+0x4c>)
 8000a78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a7e:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <MX_USART2_UART_Init+0x4c>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a84:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <MX_USART2_UART_Init+0x4c>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a8a:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <MX_USART2_UART_Init+0x4c>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a90:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <MX_USART2_UART_Init+0x4c>)
 8000a92:	220c      	movs	r2, #12
 8000a94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a96:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <MX_USART2_UART_Init+0x4c>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a9c:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <MX_USART2_UART_Init+0x4c>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000aa2:	4805      	ldr	r0, [pc, #20]	; (8000ab8 <MX_USART2_UART_Init+0x4c>)
 8000aa4:	f002 ff16 	bl	80038d4 <HAL_UART_Init>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000aae:	f000 fa65 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	2000017c 	.word	0x2000017c
 8000abc:	40004400 	.word	0x40004400

08000ac0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b08a      	sub	sp, #40	; 0x28
 8000ac4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac6:	f107 0314 	add.w	r3, r7, #20
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	605a      	str	r2, [r3, #4]
 8000ad0:	609a      	str	r2, [r3, #8]
 8000ad2:	60da      	str	r2, [r3, #12]
 8000ad4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	613b      	str	r3, [r7, #16]
 8000ada:	4b2d      	ldr	r3, [pc, #180]	; (8000b90 <MX_GPIO_Init+0xd0>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	4a2c      	ldr	r2, [pc, #176]	; (8000b90 <MX_GPIO_Init+0xd0>)
 8000ae0:	f043 0304 	orr.w	r3, r3, #4
 8000ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae6:	4b2a      	ldr	r3, [pc, #168]	; (8000b90 <MX_GPIO_Init+0xd0>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	f003 0304 	and.w	r3, r3, #4
 8000aee:	613b      	str	r3, [r7, #16]
 8000af0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	60fb      	str	r3, [r7, #12]
 8000af6:	4b26      	ldr	r3, [pc, #152]	; (8000b90 <MX_GPIO_Init+0xd0>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	4a25      	ldr	r2, [pc, #148]	; (8000b90 <MX_GPIO_Init+0xd0>)
 8000afc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b00:	6313      	str	r3, [r2, #48]	; 0x30
 8000b02:	4b23      	ldr	r3, [pc, #140]	; (8000b90 <MX_GPIO_Init+0xd0>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b0a:	60fb      	str	r3, [r7, #12]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	60bb      	str	r3, [r7, #8]
 8000b12:	4b1f      	ldr	r3, [pc, #124]	; (8000b90 <MX_GPIO_Init+0xd0>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	4a1e      	ldr	r2, [pc, #120]	; (8000b90 <MX_GPIO_Init+0xd0>)
 8000b18:	f043 0301 	orr.w	r3, r3, #1
 8000b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1e:	4b1c      	ldr	r3, [pc, #112]	; (8000b90 <MX_GPIO_Init+0xd0>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	60bb      	str	r3, [r7, #8]
 8000b28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	607b      	str	r3, [r7, #4]
 8000b2e:	4b18      	ldr	r3, [pc, #96]	; (8000b90 <MX_GPIO_Init+0xd0>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	4a17      	ldr	r2, [pc, #92]	; (8000b90 <MX_GPIO_Init+0xd0>)
 8000b34:	f043 0302 	orr.w	r3, r3, #2
 8000b38:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3a:	4b15      	ldr	r3, [pc, #84]	; (8000b90 <MX_GPIO_Init+0xd0>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	f003 0302 	and.w	r3, r3, #2
 8000b42:	607b      	str	r3, [r7, #4]
 8000b44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000b46:	2200      	movs	r2, #0
 8000b48:	2120      	movs	r1, #32
 8000b4a:	4812      	ldr	r0, [pc, #72]	; (8000b94 <MX_GPIO_Init+0xd4>)
 8000b4c:	f000 ffea 	bl	8001b24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b56:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b60:	f107 0314 	add.w	r3, r7, #20
 8000b64:	4619      	mov	r1, r3
 8000b66:	480c      	ldr	r0, [pc, #48]	; (8000b98 <MX_GPIO_Init+0xd8>)
 8000b68:	f000 fe48 	bl	80017fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000b6c:	2320      	movs	r3, #32
 8000b6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b70:	2301      	movs	r3, #1
 8000b72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7c:	f107 0314 	add.w	r3, r7, #20
 8000b80:	4619      	mov	r1, r3
 8000b82:	4804      	ldr	r0, [pc, #16]	; (8000b94 <MX_GPIO_Init+0xd4>)
 8000b84:	f000 fe3a 	bl	80017fc <HAL_GPIO_Init>

}
 8000b88:	bf00      	nop
 8000b8a:	3728      	adds	r7, #40	; 0x28
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	40023800 	.word	0x40023800
 8000b94:	40020000 	.word	0x40020000
 8000b98:	40020800 	.word	0x40020800

08000b9c <HAL_UART_RxCpltCallback>:

// we come to this function after a successful receive
// huart = the uart that was configured for this receive

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b086      	sub	sp, #24
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
  uint8_t i;
  if (huart->Instance == USART2) { // make sure we're working with our correct instance of UART (PA2-3 = USART2 TX/RX)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a5f      	ldr	r2, [pc, #380]	; (8000d28 <HAL_UART_RxCpltCallback+0x18c>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	f040 80b8 	bne.w	8000d20 <HAL_UART_RxCpltCallback+0x184>

	  if (rx_indx == 0) {
 8000bb0:	4b5e      	ldr	r3, [pc, #376]	; (8000d2c <HAL_UART_RxCpltCallback+0x190>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d10c      	bne.n	8000bd2 <HAL_UART_RxCpltCallback+0x36>
		  for (i = 0; i < 100; i++) {
 8000bb8:	2300      	movs	r3, #0
 8000bba:	75fb      	strb	r3, [r7, #23]
 8000bbc:	e006      	b.n	8000bcc <HAL_UART_RxCpltCallback+0x30>
			  rx_buffer[i] = 0; // clear the buffer for a new message once the user clicked enter
 8000bbe:	7dfb      	ldrb	r3, [r7, #23]
 8000bc0:	4a5b      	ldr	r2, [pc, #364]	; (8000d30 <HAL_UART_RxCpltCallback+0x194>)
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	54d1      	strb	r1, [r2, r3]
		  for (i = 0; i < 100; i++) {
 8000bc6:	7dfb      	ldrb	r3, [r7, #23]
 8000bc8:	3301      	adds	r3, #1
 8000bca:	75fb      	strb	r3, [r7, #23]
 8000bcc:	7dfb      	ldrb	r3, [r7, #23]
 8000bce:	2b63      	cmp	r3, #99	; 0x63
 8000bd0:	d9f5      	bls.n	8000bbe <HAL_UART_RxCpltCallback+0x22>
		  }
	  }

	  if (rx_data[0] != 13) { // enter button = ascii 13
 8000bd2:	4b58      	ldr	r3, [pc, #352]	; (8000d34 <HAL_UART_RxCpltCallback+0x198>)
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	2b0d      	cmp	r3, #13
 8000bd8:	d00b      	beq.n	8000bf2 <HAL_UART_RxCpltCallback+0x56>
		  rx_buffer[rx_indx++] = rx_data[0]; // reading a byte at a time in our RX buffer
 8000bda:	4b54      	ldr	r3, [pc, #336]	; (8000d2c <HAL_UART_RxCpltCallback+0x190>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	1c5a      	adds	r2, r3, #1
 8000be0:	b2d1      	uxtb	r1, r2
 8000be2:	4a52      	ldr	r2, [pc, #328]	; (8000d2c <HAL_UART_RxCpltCallback+0x190>)
 8000be4:	7011      	strb	r1, [r2, #0]
 8000be6:	461a      	mov	r2, r3
 8000be8:	4b52      	ldr	r3, [pc, #328]	; (8000d34 <HAL_UART_RxCpltCallback+0x198>)
 8000bea:	7819      	ldrb	r1, [r3, #0]
 8000bec:	4b50      	ldr	r3, [pc, #320]	; (8000d30 <HAL_UART_RxCpltCallback+0x194>)
 8000bee:	5499      	strb	r1, [r3, r2]
 8000bf0:	e087      	b.n	8000d02 <HAL_UART_RxCpltCallback+0x166>
	  } else {
		  rx_indx = 0; // if user has clicked the enter button, compare our rx_buffer with desired string, then clear the buffer for next message
 8000bf2:	4b4e      	ldr	r3, [pc, #312]	; (8000d2c <HAL_UART_RxCpltCallback+0x190>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	701a      	strb	r2, [r3, #0]
		  transfer_cplt = 1; // set flag
 8000bf8:	4b4f      	ldr	r3, [pc, #316]	; (8000d38 <HAL_UART_RxCpltCallback+0x19c>)
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart2, (uint8_t *)"\n\r", 2, 100);
 8000bfe:	2364      	movs	r3, #100	; 0x64
 8000c00:	2202      	movs	r2, #2
 8000c02:	494e      	ldr	r1, [pc, #312]	; (8000d3c <HAL_UART_RxCpltCallback+0x1a0>)
 8000c04:	484e      	ldr	r0, [pc, #312]	; (8000d40 <HAL_UART_RxCpltCallback+0x1a4>)
 8000c06:	f002 feb2 	bl	800396e <HAL_UART_Transmit>

		  char motorIdentifier[10]; // which motor is it that we are driving?
		  int motorValue; // how many steps will we be sending the motor?

		  if (sscanf((char *)rx_buffer, "%s %d", motorIdentifier, &motorValue) == 2) {
 8000c0a:	f107 0308 	add.w	r3, r7, #8
 8000c0e:	f107 020c 	add.w	r2, r7, #12
 8000c12:	494c      	ldr	r1, [pc, #304]	; (8000d44 <HAL_UART_RxCpltCallback+0x1a8>)
 8000c14:	4846      	ldr	r0, [pc, #280]	; (8000d30 <HAL_UART_RxCpltCallback+0x194>)
 8000c16:	f003 ff07 	bl	8004a28 <siscanf>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b02      	cmp	r3, #2
 8000c1e:	d170      	bne.n	8000d02 <HAL_UART_RxCpltCallback+0x166>
			  if (!strcmp(motorIdentifier, "MOTOR1")) {
 8000c20:	f107 030c 	add.w	r3, r7, #12
 8000c24:	4948      	ldr	r1, [pc, #288]	; (8000d48 <HAL_UART_RxCpltCallback+0x1ac>)
 8000c26:	4618      	mov	r0, r3
 8000c28:	f7ff faf2 	bl	8000210 <strcmp>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d10e      	bne.n	8000c50 <HAL_UART_RxCpltCallback+0xb4>
				  motor1_steps = motorValue;
 8000c32:	68bb      	ldr	r3, [r7, #8]
 8000c34:	b29a      	uxth	r2, r3
 8000c36:	4b45      	ldr	r3, [pc, #276]	; (8000d4c <HAL_UART_RxCpltCallback+0x1b0>)
 8000c38:	801a      	strh	r2, [r3, #0]
				  // __HAL_TIM_ENABLE(&htim1);
				  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	4844      	ldr	r0, [pc, #272]	; (8000d50 <HAL_UART_RxCpltCallback+0x1b4>)
 8000c3e:	f001 fe1b 	bl	8002878 <HAL_TIM_PWM_Start_IT>
				  HAL_UART_Transmit(&huart2, tx_buffer, 23, 10); // we get here when we type
 8000c42:	230a      	movs	r3, #10
 8000c44:	2217      	movs	r2, #23
 8000c46:	4943      	ldr	r1, [pc, #268]	; (8000d54 <HAL_UART_RxCpltCallback+0x1b8>)
 8000c48:	483d      	ldr	r0, [pc, #244]	; (8000d40 <HAL_UART_RxCpltCallback+0x1a4>)
 8000c4a:	f002 fe90 	bl	800396e <HAL_UART_Transmit>
 8000c4e:	e058      	b.n	8000d02 <HAL_UART_RxCpltCallback+0x166>
			  } else if (!strcmp(motorIdentifier, "MOTOR2")) {
 8000c50:	f107 030c 	add.w	r3, r7, #12
 8000c54:	4940      	ldr	r1, [pc, #256]	; (8000d58 <HAL_UART_RxCpltCallback+0x1bc>)
 8000c56:	4618      	mov	r0, r3
 8000c58:	f7ff fada 	bl	8000210 <strcmp>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d108      	bne.n	8000c74 <HAL_UART_RxCpltCallback+0xd8>
				  motor2_steps = motorValue;
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	b29a      	uxth	r2, r3
 8000c66:	4b3d      	ldr	r3, [pc, #244]	; (8000d5c <HAL_UART_RxCpltCallback+0x1c0>)
 8000c68:	801a      	strh	r2, [r3, #0]
				  // __HAL_TIM_ENABLE(&htim2);
				  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_2);
 8000c6a:	2104      	movs	r1, #4
 8000c6c:	4838      	ldr	r0, [pc, #224]	; (8000d50 <HAL_UART_RxCpltCallback+0x1b4>)
 8000c6e:	f001 fe03 	bl	8002878 <HAL_TIM_PWM_Start_IT>
 8000c72:	e046      	b.n	8000d02 <HAL_UART_RxCpltCallback+0x166>
			  } else if (!strcmp(motorIdentifier, "MOTOR3")) {
 8000c74:	f107 030c 	add.w	r3, r7, #12
 8000c78:	4939      	ldr	r1, [pc, #228]	; (8000d60 <HAL_UART_RxCpltCallback+0x1c4>)
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f7ff fac8 	bl	8000210 <strcmp>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d108      	bne.n	8000c98 <HAL_UART_RxCpltCallback+0xfc>
				  motor3_steps = motorValue;
 8000c86:	68bb      	ldr	r3, [r7, #8]
 8000c88:	b29a      	uxth	r2, r3
 8000c8a:	4b36      	ldr	r3, [pc, #216]	; (8000d64 <HAL_UART_RxCpltCallback+0x1c8>)
 8000c8c:	801a      	strh	r2, [r3, #0]
				  // __HAL_TIM_ENABLE(&htim3);
				  HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 8000c8e:	2100      	movs	r1, #0
 8000c90:	4835      	ldr	r0, [pc, #212]	; (8000d68 <HAL_UART_RxCpltCallback+0x1cc>)
 8000c92:	f001 fdf1 	bl	8002878 <HAL_TIM_PWM_Start_IT>
 8000c96:	e034      	b.n	8000d02 <HAL_UART_RxCpltCallback+0x166>
			  } else if (!strcmp(motorIdentifier, "MOTOR4")) {
 8000c98:	f107 030c 	add.w	r3, r7, #12
 8000c9c:	4933      	ldr	r1, [pc, #204]	; (8000d6c <HAL_UART_RxCpltCallback+0x1d0>)
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f7ff fab6 	bl	8000210 <strcmp>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d108      	bne.n	8000cbc <HAL_UART_RxCpltCallback+0x120>
				  motor4_steps = motorValue;
 8000caa:	68bb      	ldr	r3, [r7, #8]
 8000cac:	b29a      	uxth	r2, r3
 8000cae:	4b30      	ldr	r3, [pc, #192]	; (8000d70 <HAL_UART_RxCpltCallback+0x1d4>)
 8000cb0:	801a      	strh	r2, [r3, #0]
				  // __HAL_TIM_ENABLE(&htim4);
				  HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_2);
 8000cb2:	2104      	movs	r1, #4
 8000cb4:	482c      	ldr	r0, [pc, #176]	; (8000d68 <HAL_UART_RxCpltCallback+0x1cc>)
 8000cb6:	f001 fddf 	bl	8002878 <HAL_TIM_PWM_Start_IT>
 8000cba:	e022      	b.n	8000d02 <HAL_UART_RxCpltCallback+0x166>
			  } else if (!strcmp(motorIdentifier, "MOTOR5")) {
 8000cbc:	f107 030c 	add.w	r3, r7, #12
 8000cc0:	492c      	ldr	r1, [pc, #176]	; (8000d74 <HAL_UART_RxCpltCallback+0x1d8>)
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f7ff faa4 	bl	8000210 <strcmp>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d108      	bne.n	8000ce0 <HAL_UART_RxCpltCallback+0x144>
				  motor5_steps = motorValue;
 8000cce:	68bb      	ldr	r3, [r7, #8]
 8000cd0:	b29a      	uxth	r2, r3
 8000cd2:	4b29      	ldr	r3, [pc, #164]	; (8000d78 <HAL_UART_RxCpltCallback+0x1dc>)
 8000cd4:	801a      	strh	r2, [r3, #0]
				  // __HAL_TIM_ENABLE(&htim8);
				  HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_1);
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	4828      	ldr	r0, [pc, #160]	; (8000d7c <HAL_UART_RxCpltCallback+0x1e0>)
 8000cda:	f001 fdcd 	bl	8002878 <HAL_TIM_PWM_Start_IT>
 8000cde:	e010      	b.n	8000d02 <HAL_UART_RxCpltCallback+0x166>
			  } else if (!strcmp(motorIdentifier, "MOTOR6")) {
 8000ce0:	f107 030c 	add.w	r3, r7, #12
 8000ce4:	4926      	ldr	r1, [pc, #152]	; (8000d80 <HAL_UART_RxCpltCallback+0x1e4>)
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff fa92 	bl	8000210 <strcmp>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d107      	bne.n	8000d02 <HAL_UART_RxCpltCallback+0x166>
				  motor6_steps = motorValue;
 8000cf2:	68bb      	ldr	r3, [r7, #8]
 8000cf4:	b29a      	uxth	r2, r3
 8000cf6:	4b23      	ldr	r3, [pc, #140]	; (8000d84 <HAL_UART_RxCpltCallback+0x1e8>)
 8000cf8:	801a      	strh	r2, [r3, #0]
				  // __HAL_TIM_ENABLE(&htim12);
				  HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_2);
 8000cfa:	2104      	movs	r1, #4
 8000cfc:	481f      	ldr	r0, [pc, #124]	; (8000d7c <HAL_UART_RxCpltCallback+0x1e0>)
 8000cfe:	f001 fdbb 	bl	8002878 <HAL_TIM_PWM_Start_IT>
			  }
		  }

	  }

	  HAL_UART_Receive_IT(&huart2, rx_data, 1); // initialize to interrupt based receive
 8000d02:	2201      	movs	r2, #1
 8000d04:	490b      	ldr	r1, [pc, #44]	; (8000d34 <HAL_UART_RxCpltCallback+0x198>)
 8000d06:	480e      	ldr	r0, [pc, #56]	; (8000d40 <HAL_UART_RxCpltCallback+0x1a4>)
 8000d08:	f002 fec3 	bl	8003a92 <HAL_UART_Receive_IT>
	  HAL_UART_Transmit(&huart2, rx_data, strlen((char *)rx_data), 100); // initialize to transmit as we write new data to the rx_data byte(s)
 8000d0c:	4809      	ldr	r0, [pc, #36]	; (8000d34 <HAL_UART_RxCpltCallback+0x198>)
 8000d0e:	f7ff fa89 	bl	8000224 <strlen>
 8000d12:	4603      	mov	r3, r0
 8000d14:	b29a      	uxth	r2, r3
 8000d16:	2364      	movs	r3, #100	; 0x64
 8000d18:	4906      	ldr	r1, [pc, #24]	; (8000d34 <HAL_UART_RxCpltCallback+0x198>)
 8000d1a:	4809      	ldr	r0, [pc, #36]	; (8000d40 <HAL_UART_RxCpltCallback+0x1a4>)
 8000d1c:	f002 fe27 	bl	800396e <HAL_UART_Transmit>

  }
}
 8000d20:	bf00      	nop
 8000d22:	3718      	adds	r7, #24
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	40004400 	.word	0x40004400
 8000d2c:	200001c0 	.word	0x200001c0
 8000d30:	200001c8 	.word	0x200001c8
 8000d34:	200001c4 	.word	0x200001c4
 8000d38:	2000022c 	.word	0x2000022c
 8000d3c:	08005640 	.word	0x08005640
 8000d40:	2000017c 	.word	0x2000017c
 8000d44:	08005644 	.word	0x08005644
 8000d48:	0800564c 	.word	0x0800564c
 8000d4c:	2000022e 	.word	0x2000022e
 8000d50:	200000a4 	.word	0x200000a4
 8000d54:	20000000 	.word	0x20000000
 8000d58:	08005654 	.word	0x08005654
 8000d5c:	20000230 	.word	0x20000230
 8000d60:	0800565c 	.word	0x0800565c
 8000d64:	20000232 	.word	0x20000232
 8000d68:	200000ec 	.word	0x200000ec
 8000d6c:	08005664 	.word	0x08005664
 8000d70:	20000234 	.word	0x20000234
 8000d74:	0800566c 	.word	0x0800566c
 8000d78:	20000236 	.word	0x20000236
 8000d7c:	20000134 	.word	0x20000134
 8000d80:	08005674 	.word	0x08005674
 8000d84:	20000238 	.word	0x20000238

08000d88 <HAL_TIM_PWM_PulseFinishedCallback>:

// this function gets called every time that *some* PWM timer sends a pulse
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
	// HAL_UART_Transmit(&huart2, "hello", 5, 10);
	// TIM_TypeDef timer_instance = htim->Instance;
	// HAL_TIM_ActiveChannel timer_channel = htim->Channel;
	if (htim->Instance == TIM2 &&  htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d98:	d11d      	bne.n	8000dd6 <HAL_TIM_PWM_PulseFinishedCallback+0x4e>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	7f1b      	ldrb	r3, [r3, #28]
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d119      	bne.n	8000dd6 <HAL_TIM_PWM_PulseFinishedCallback+0x4e>
		// --global_motor_flag;
		if (motor1_steps != 0) --motor1_steps;
 8000da2:	4b64      	ldr	r3, [pc, #400]	; (8000f34 <HAL_TIM_PWM_PulseFinishedCallback+0x1ac>)
 8000da4:	881b      	ldrh	r3, [r3, #0]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d005      	beq.n	8000db6 <HAL_TIM_PWM_PulseFinishedCallback+0x2e>
 8000daa:	4b62      	ldr	r3, [pc, #392]	; (8000f34 <HAL_TIM_PWM_PulseFinishedCallback+0x1ac>)
 8000dac:	881b      	ldrh	r3, [r3, #0]
 8000dae:	3b01      	subs	r3, #1
 8000db0:	b29a      	uxth	r2, r3
 8000db2:	4b60      	ldr	r3, [pc, #384]	; (8000f34 <HAL_TIM_PWM_PulseFinishedCallback+0x1ac>)
 8000db4:	801a      	strh	r2, [r3, #0]
		// if (global motor flag == 0) {disable interrupt, motherfucker!};
		if (motor1_steps == 0) {
 8000db6:	4b5f      	ldr	r3, [pc, #380]	; (8000f34 <HAL_TIM_PWM_PulseFinishedCallback+0x1ac>)
 8000db8:	881b      	ldrh	r3, [r3, #0]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	f040 80b6 	bne.w	8000f2c <HAL_TIM_PWM_PulseFinishedCallback+0x1a4>
			// __HAL_TIM_DISABLE(&htim1);
			HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_1);
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	485d      	ldr	r0, [pc, #372]	; (8000f38 <HAL_TIM_PWM_PulseFinishedCallback+0x1b0>)
 8000dc4:	f001 fe6e 	bl	8002aa4 <HAL_TIM_PWM_Stop_IT>
			HAL_UART_Transmit(&huart2, "1\n", 3, 10);
 8000dc8:	230a      	movs	r3, #10
 8000dca:	2203      	movs	r2, #3
 8000dcc:	495b      	ldr	r1, [pc, #364]	; (8000f3c <HAL_TIM_PWM_PulseFinishedCallback+0x1b4>)
 8000dce:	485c      	ldr	r0, [pc, #368]	; (8000f40 <HAL_TIM_PWM_PulseFinishedCallback+0x1b8>)
 8000dd0:	f002 fdcd 	bl	800396e <HAL_UART_Transmit>
		if (motor1_steps == 0) {
 8000dd4:	e0aa      	b.n	8000f2c <HAL_TIM_PWM_PulseFinishedCallback+0x1a4>
		}
		// HAL_UART_Transmit(&huart2, "1\n", 3, 10);
	}
	else if (htim->Instance == TIM2 &&  htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000dde:	d11d      	bne.n	8000e1c <HAL_TIM_PWM_PulseFinishedCallback+0x94>
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	7f1b      	ldrb	r3, [r3, #28]
 8000de4:	2b02      	cmp	r3, #2
 8000de6:	d119      	bne.n	8000e1c <HAL_TIM_PWM_PulseFinishedCallback+0x94>
		// --global_motor_flag;
		if (motor2_steps != 0) --motor2_steps;
 8000de8:	4b56      	ldr	r3, [pc, #344]	; (8000f44 <HAL_TIM_PWM_PulseFinishedCallback+0x1bc>)
 8000dea:	881b      	ldrh	r3, [r3, #0]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d005      	beq.n	8000dfc <HAL_TIM_PWM_PulseFinishedCallback+0x74>
 8000df0:	4b54      	ldr	r3, [pc, #336]	; (8000f44 <HAL_TIM_PWM_PulseFinishedCallback+0x1bc>)
 8000df2:	881b      	ldrh	r3, [r3, #0]
 8000df4:	3b01      	subs	r3, #1
 8000df6:	b29a      	uxth	r2, r3
 8000df8:	4b52      	ldr	r3, [pc, #328]	; (8000f44 <HAL_TIM_PWM_PulseFinishedCallback+0x1bc>)
 8000dfa:	801a      	strh	r2, [r3, #0]
		// if (global motor flag == 0) {disable interrupt, motherfucker!};
		if (motor2_steps == 0) {
 8000dfc:	4b51      	ldr	r3, [pc, #324]	; (8000f44 <HAL_TIM_PWM_PulseFinishedCallback+0x1bc>)
 8000dfe:	881b      	ldrh	r3, [r3, #0]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	f040 8093 	bne.w	8000f2c <HAL_TIM_PWM_PulseFinishedCallback+0x1a4>
			// __HAL_TIM_DISABLE(&htim2);
			HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_2);
 8000e06:	2104      	movs	r1, #4
 8000e08:	484b      	ldr	r0, [pc, #300]	; (8000f38 <HAL_TIM_PWM_PulseFinishedCallback+0x1b0>)
 8000e0a:	f001 fe4b 	bl	8002aa4 <HAL_TIM_PWM_Stop_IT>
			HAL_UART_Transmit(&huart2, "2\n", 3, 10);
 8000e0e:	230a      	movs	r3, #10
 8000e10:	2203      	movs	r2, #3
 8000e12:	494d      	ldr	r1, [pc, #308]	; (8000f48 <HAL_TIM_PWM_PulseFinishedCallback+0x1c0>)
 8000e14:	484a      	ldr	r0, [pc, #296]	; (8000f40 <HAL_TIM_PWM_PulseFinishedCallback+0x1b8>)
 8000e16:	f002 fdaa 	bl	800396e <HAL_UART_Transmit>
		if (motor2_steps == 0) {
 8000e1a:	e087      	b.n	8000f2c <HAL_TIM_PWM_PulseFinishedCallback+0x1a4>
		}
		// HAL_UART_Transmit(&huart2, "2\n", 3, 10);
	}
	else if (htim->Instance == TIM3 &&  htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a4a      	ldr	r2, [pc, #296]	; (8000f4c <HAL_TIM_PWM_PulseFinishedCallback+0x1c4>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d11c      	bne.n	8000e60 <HAL_TIM_PWM_PulseFinishedCallback+0xd8>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	7f1b      	ldrb	r3, [r3, #28]
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d118      	bne.n	8000e60 <HAL_TIM_PWM_PulseFinishedCallback+0xd8>
    {
    	// --global_motor_flag;
		if (motor3_steps != 0) --motor3_steps;
 8000e2e:	4b48      	ldr	r3, [pc, #288]	; (8000f50 <HAL_TIM_PWM_PulseFinishedCallback+0x1c8>)
 8000e30:	881b      	ldrh	r3, [r3, #0]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d005      	beq.n	8000e42 <HAL_TIM_PWM_PulseFinishedCallback+0xba>
 8000e36:	4b46      	ldr	r3, [pc, #280]	; (8000f50 <HAL_TIM_PWM_PulseFinishedCallback+0x1c8>)
 8000e38:	881b      	ldrh	r3, [r3, #0]
 8000e3a:	3b01      	subs	r3, #1
 8000e3c:	b29a      	uxth	r2, r3
 8000e3e:	4b44      	ldr	r3, [pc, #272]	; (8000f50 <HAL_TIM_PWM_PulseFinishedCallback+0x1c8>)
 8000e40:	801a      	strh	r2, [r3, #0]
		// if (global motor flag == 0) {disable interrupt, motherfucker!};
		if (motor3_steps == 0) {
 8000e42:	4b43      	ldr	r3, [pc, #268]	; (8000f50 <HAL_TIM_PWM_PulseFinishedCallback+0x1c8>)
 8000e44:	881b      	ldrh	r3, [r3, #0]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d170      	bne.n	8000f2c <HAL_TIM_PWM_PulseFinishedCallback+0x1a4>
			// __HAL_TIM_DISABLE(&htim3);
			HAL_TIM_PWM_Stop_IT(&htim3, TIM_CHANNEL_1);
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	4841      	ldr	r0, [pc, #260]	; (8000f54 <HAL_TIM_PWM_PulseFinishedCallback+0x1cc>)
 8000e4e:	f001 fe29 	bl	8002aa4 <HAL_TIM_PWM_Stop_IT>
			HAL_UART_Transmit(&huart2, "3\n", 3, 10);
 8000e52:	230a      	movs	r3, #10
 8000e54:	2203      	movs	r2, #3
 8000e56:	4940      	ldr	r1, [pc, #256]	; (8000f58 <HAL_TIM_PWM_PulseFinishedCallback+0x1d0>)
 8000e58:	4839      	ldr	r0, [pc, #228]	; (8000f40 <HAL_TIM_PWM_PulseFinishedCallback+0x1b8>)
 8000e5a:	f002 fd88 	bl	800396e <HAL_UART_Transmit>
		if (motor3_steps == 0) {
 8000e5e:	e065      	b.n	8000f2c <HAL_TIM_PWM_PulseFinishedCallback+0x1a4>
		}
		// HAL_UART_Transmit(&huart2, "3\n", 3, 10);
    }
	else if (htim->Instance == TIM3 &&  htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a39      	ldr	r2, [pc, #228]	; (8000f4c <HAL_TIM_PWM_PulseFinishedCallback+0x1c4>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d11c      	bne.n	8000ea4 <HAL_TIM_PWM_PulseFinishedCallback+0x11c>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	7f1b      	ldrb	r3, [r3, #28]
 8000e6e:	2b02      	cmp	r3, #2
 8000e70:	d118      	bne.n	8000ea4 <HAL_TIM_PWM_PulseFinishedCallback+0x11c>
    	// --global_motor_flag;
		if (motor4_steps != 0) --motor4_steps;
 8000e72:	4b3a      	ldr	r3, [pc, #232]	; (8000f5c <HAL_TIM_PWM_PulseFinishedCallback+0x1d4>)
 8000e74:	881b      	ldrh	r3, [r3, #0]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d005      	beq.n	8000e86 <HAL_TIM_PWM_PulseFinishedCallback+0xfe>
 8000e7a:	4b38      	ldr	r3, [pc, #224]	; (8000f5c <HAL_TIM_PWM_PulseFinishedCallback+0x1d4>)
 8000e7c:	881b      	ldrh	r3, [r3, #0]
 8000e7e:	3b01      	subs	r3, #1
 8000e80:	b29a      	uxth	r2, r3
 8000e82:	4b36      	ldr	r3, [pc, #216]	; (8000f5c <HAL_TIM_PWM_PulseFinishedCallback+0x1d4>)
 8000e84:	801a      	strh	r2, [r3, #0]
		// if (global motor flag == 0) {disable interrupt, motherfucker!};
		if (motor4_steps == 0) {
 8000e86:	4b35      	ldr	r3, [pc, #212]	; (8000f5c <HAL_TIM_PWM_PulseFinishedCallback+0x1d4>)
 8000e88:	881b      	ldrh	r3, [r3, #0]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d14e      	bne.n	8000f2c <HAL_TIM_PWM_PulseFinishedCallback+0x1a4>
			// __HAL_TIM_DISABLE(&htim4);
			HAL_TIM_PWM_Stop_IT(&htim3, TIM_CHANNEL_2);
 8000e8e:	2104      	movs	r1, #4
 8000e90:	4830      	ldr	r0, [pc, #192]	; (8000f54 <HAL_TIM_PWM_PulseFinishedCallback+0x1cc>)
 8000e92:	f001 fe07 	bl	8002aa4 <HAL_TIM_PWM_Stop_IT>
			HAL_UART_Transmit(&huart2, "4\n", 3, 10);
 8000e96:	230a      	movs	r3, #10
 8000e98:	2203      	movs	r2, #3
 8000e9a:	4931      	ldr	r1, [pc, #196]	; (8000f60 <HAL_TIM_PWM_PulseFinishedCallback+0x1d8>)
 8000e9c:	4828      	ldr	r0, [pc, #160]	; (8000f40 <HAL_TIM_PWM_PulseFinishedCallback+0x1b8>)
 8000e9e:	f002 fd66 	bl	800396e <HAL_UART_Transmit>
		if (motor4_steps == 0) {
 8000ea2:	e043      	b.n	8000f2c <HAL_TIM_PWM_PulseFinishedCallback+0x1a4>
		}
		// HAL_UART_Transmit(&huart2, "4\n", 3, 10);
	}
	else if (htim->Instance == TIM4 &&  htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a2e      	ldr	r2, [pc, #184]	; (8000f64 <HAL_TIM_PWM_PulseFinishedCallback+0x1dc>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d11c      	bne.n	8000ee8 <HAL_TIM_PWM_PulseFinishedCallback+0x160>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	7f1b      	ldrb	r3, [r3, #28]
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d118      	bne.n	8000ee8 <HAL_TIM_PWM_PulseFinishedCallback+0x160>
    	// --global_motor_flag;
		if (motor5_steps != 0) --motor5_steps;
 8000eb6:	4b2c      	ldr	r3, [pc, #176]	; (8000f68 <HAL_TIM_PWM_PulseFinishedCallback+0x1e0>)
 8000eb8:	881b      	ldrh	r3, [r3, #0]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d005      	beq.n	8000eca <HAL_TIM_PWM_PulseFinishedCallback+0x142>
 8000ebe:	4b2a      	ldr	r3, [pc, #168]	; (8000f68 <HAL_TIM_PWM_PulseFinishedCallback+0x1e0>)
 8000ec0:	881b      	ldrh	r3, [r3, #0]
 8000ec2:	3b01      	subs	r3, #1
 8000ec4:	b29a      	uxth	r2, r3
 8000ec6:	4b28      	ldr	r3, [pc, #160]	; (8000f68 <HAL_TIM_PWM_PulseFinishedCallback+0x1e0>)
 8000ec8:	801a      	strh	r2, [r3, #0]
		// if (global motor flag == 0) {disable interrupt, motherfucker!};
		if (motor5_steps == 0) {
 8000eca:	4b27      	ldr	r3, [pc, #156]	; (8000f68 <HAL_TIM_PWM_PulseFinishedCallback+0x1e0>)
 8000ecc:	881b      	ldrh	r3, [r3, #0]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d12c      	bne.n	8000f2c <HAL_TIM_PWM_PulseFinishedCallback+0x1a4>
			// __HAL_TIM_DISABLE(&htim8);
			HAL_TIM_PWM_Stop_IT(&htim4, TIM_CHANNEL_1);
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	4825      	ldr	r0, [pc, #148]	; (8000f6c <HAL_TIM_PWM_PulseFinishedCallback+0x1e4>)
 8000ed6:	f001 fde5 	bl	8002aa4 <HAL_TIM_PWM_Stop_IT>
			HAL_UART_Transmit(&huart2, "5\n", 3, 10);
 8000eda:	230a      	movs	r3, #10
 8000edc:	2203      	movs	r2, #3
 8000ede:	4924      	ldr	r1, [pc, #144]	; (8000f70 <HAL_TIM_PWM_PulseFinishedCallback+0x1e8>)
 8000ee0:	4817      	ldr	r0, [pc, #92]	; (8000f40 <HAL_TIM_PWM_PulseFinishedCallback+0x1b8>)
 8000ee2:	f002 fd44 	bl	800396e <HAL_UART_Transmit>
		if (motor5_steps == 0) {
 8000ee6:	e021      	b.n	8000f2c <HAL_TIM_PWM_PulseFinishedCallback+0x1a4>
		}
		// HAL_UART_Transmit(&huart2, "5\n", 3, 10);
	}
	else if (htim->Instance == TIM4 &&  htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a1d      	ldr	r2, [pc, #116]	; (8000f64 <HAL_TIM_PWM_PulseFinishedCallback+0x1dc>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d11c      	bne.n	8000f2c <HAL_TIM_PWM_PulseFinishedCallback+0x1a4>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	7f1b      	ldrb	r3, [r3, #28]
 8000ef6:	2b02      	cmp	r3, #2
 8000ef8:	d118      	bne.n	8000f2c <HAL_TIM_PWM_PulseFinishedCallback+0x1a4>
    	// --global_motor_flag;
		if (motor6_steps != 0) --motor6_steps;
 8000efa:	4b1e      	ldr	r3, [pc, #120]	; (8000f74 <HAL_TIM_PWM_PulseFinishedCallback+0x1ec>)
 8000efc:	881b      	ldrh	r3, [r3, #0]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d005      	beq.n	8000f0e <HAL_TIM_PWM_PulseFinishedCallback+0x186>
 8000f02:	4b1c      	ldr	r3, [pc, #112]	; (8000f74 <HAL_TIM_PWM_PulseFinishedCallback+0x1ec>)
 8000f04:	881b      	ldrh	r3, [r3, #0]
 8000f06:	3b01      	subs	r3, #1
 8000f08:	b29a      	uxth	r2, r3
 8000f0a:	4b1a      	ldr	r3, [pc, #104]	; (8000f74 <HAL_TIM_PWM_PulseFinishedCallback+0x1ec>)
 8000f0c:	801a      	strh	r2, [r3, #0]
		// if (global motor flag == 0) {disable interrupt, motherfucker!};
		if (motor6_steps == 0) {
 8000f0e:	4b19      	ldr	r3, [pc, #100]	; (8000f74 <HAL_TIM_PWM_PulseFinishedCallback+0x1ec>)
 8000f10:	881b      	ldrh	r3, [r3, #0]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d10a      	bne.n	8000f2c <HAL_TIM_PWM_PulseFinishedCallback+0x1a4>
			// __HAL_TIM_DISABLE(&htim12);
			HAL_TIM_PWM_Stop_IT(&htim4, TIM_CHANNEL_2);
 8000f16:	2104      	movs	r1, #4
 8000f18:	4814      	ldr	r0, [pc, #80]	; (8000f6c <HAL_TIM_PWM_PulseFinishedCallback+0x1e4>)
 8000f1a:	f001 fdc3 	bl	8002aa4 <HAL_TIM_PWM_Stop_IT>
			HAL_UART_Transmit(&huart2, "6\n", 3, 10);
 8000f1e:	230a      	movs	r3, #10
 8000f20:	2203      	movs	r2, #3
 8000f22:	4915      	ldr	r1, [pc, #84]	; (8000f78 <HAL_TIM_PWM_PulseFinishedCallback+0x1f0>)
 8000f24:	4806      	ldr	r0, [pc, #24]	; (8000f40 <HAL_TIM_PWM_PulseFinishedCallback+0x1b8>)
 8000f26:	f002 fd22 	bl	800396e <HAL_UART_Transmit>
		}
		// HAL_UART_Transmit(&huart2, "6\n", 3, 10);
	}
}
 8000f2a:	e7ff      	b.n	8000f2c <HAL_TIM_PWM_PulseFinishedCallback+0x1a4>
 8000f2c:	bf00      	nop
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	2000022e 	.word	0x2000022e
 8000f38:	200000a4 	.word	0x200000a4
 8000f3c:	0800567c 	.word	0x0800567c
 8000f40:	2000017c 	.word	0x2000017c
 8000f44:	20000230 	.word	0x20000230
 8000f48:	08005680 	.word	0x08005680
 8000f4c:	40000400 	.word	0x40000400
 8000f50:	20000232 	.word	0x20000232
 8000f54:	200000ec 	.word	0x200000ec
 8000f58:	08005684 	.word	0x08005684
 8000f5c:	20000234 	.word	0x20000234
 8000f60:	08005688 	.word	0x08005688
 8000f64:	40000800 	.word	0x40000800
 8000f68:	20000236 	.word	0x20000236
 8000f6c:	20000134 	.word	0x20000134
 8000f70:	0800568c 	.word	0x0800568c
 8000f74:	20000238 	.word	0x20000238
 8000f78:	08005690 	.word	0x08005690

08000f7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f80:	b672      	cpsid	i
}
 8000f82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f84:	e7fe      	b.n	8000f84 <Error_Handler+0x8>
	...

08000f88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	607b      	str	r3, [r7, #4]
 8000f92:	4b10      	ldr	r3, [pc, #64]	; (8000fd4 <HAL_MspInit+0x4c>)
 8000f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f96:	4a0f      	ldr	r2, [pc, #60]	; (8000fd4 <HAL_MspInit+0x4c>)
 8000f98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f9e:	4b0d      	ldr	r3, [pc, #52]	; (8000fd4 <HAL_MspInit+0x4c>)
 8000fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fa6:	607b      	str	r3, [r7, #4]
 8000fa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	603b      	str	r3, [r7, #0]
 8000fae:	4b09      	ldr	r3, [pc, #36]	; (8000fd4 <HAL_MspInit+0x4c>)
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb2:	4a08      	ldr	r2, [pc, #32]	; (8000fd4 <HAL_MspInit+0x4c>)
 8000fb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000fba:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <HAL_MspInit+0x4c>)
 8000fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fc2:	603b      	str	r3, [r7, #0]
 8000fc4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000fc6:	2007      	movs	r0, #7
 8000fc8:	f000 fb44 	bl	8001654 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fcc:	bf00      	nop
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	40023800 	.word	0x40023800

08000fd8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b086      	sub	sp, #24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fe8:	d116      	bne.n	8001018 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	617b      	str	r3, [r7, #20]
 8000fee:	4b28      	ldr	r3, [pc, #160]	; (8001090 <HAL_TIM_Base_MspInit+0xb8>)
 8000ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff2:	4a27      	ldr	r2, [pc, #156]	; (8001090 <HAL_TIM_Base_MspInit+0xb8>)
 8000ff4:	f043 0301 	orr.w	r3, r3, #1
 8000ff8:	6413      	str	r3, [r2, #64]	; 0x40
 8000ffa:	4b25      	ldr	r3, [pc, #148]	; (8001090 <HAL_TIM_Base_MspInit+0xb8>)
 8000ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffe:	f003 0301 	and.w	r3, r3, #1
 8001002:	617b      	str	r3, [r7, #20]
 8001004:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001006:	2200      	movs	r2, #0
 8001008:	2100      	movs	r1, #0
 800100a:	201c      	movs	r0, #28
 800100c:	f000 fb2d 	bl	800166a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001010:	201c      	movs	r0, #28
 8001012:	f000 fb46 	bl	80016a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001016:	e036      	b.n	8001086 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM3)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a1d      	ldr	r2, [pc, #116]	; (8001094 <HAL_TIM_Base_MspInit+0xbc>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d116      	bne.n	8001050 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	613b      	str	r3, [r7, #16]
 8001026:	4b1a      	ldr	r3, [pc, #104]	; (8001090 <HAL_TIM_Base_MspInit+0xb8>)
 8001028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102a:	4a19      	ldr	r2, [pc, #100]	; (8001090 <HAL_TIM_Base_MspInit+0xb8>)
 800102c:	f043 0302 	orr.w	r3, r3, #2
 8001030:	6413      	str	r3, [r2, #64]	; 0x40
 8001032:	4b17      	ldr	r3, [pc, #92]	; (8001090 <HAL_TIM_Base_MspInit+0xb8>)
 8001034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001036:	f003 0302 	and.w	r3, r3, #2
 800103a:	613b      	str	r3, [r7, #16]
 800103c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800103e:	2200      	movs	r2, #0
 8001040:	2100      	movs	r1, #0
 8001042:	201d      	movs	r0, #29
 8001044:	f000 fb11 	bl	800166a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001048:	201d      	movs	r0, #29
 800104a:	f000 fb2a 	bl	80016a2 <HAL_NVIC_EnableIRQ>
}
 800104e:	e01a      	b.n	8001086 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM4)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a10      	ldr	r2, [pc, #64]	; (8001098 <HAL_TIM_Base_MspInit+0xc0>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d115      	bne.n	8001086 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	4b0c      	ldr	r3, [pc, #48]	; (8001090 <HAL_TIM_Base_MspInit+0xb8>)
 8001060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001062:	4a0b      	ldr	r2, [pc, #44]	; (8001090 <HAL_TIM_Base_MspInit+0xb8>)
 8001064:	f043 0304 	orr.w	r3, r3, #4
 8001068:	6413      	str	r3, [r2, #64]	; 0x40
 800106a:	4b09      	ldr	r3, [pc, #36]	; (8001090 <HAL_TIM_Base_MspInit+0xb8>)
 800106c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106e:	f003 0304 	and.w	r3, r3, #4
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001076:	2200      	movs	r2, #0
 8001078:	2100      	movs	r1, #0
 800107a:	201e      	movs	r0, #30
 800107c:	f000 faf5 	bl	800166a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001080:	201e      	movs	r0, #30
 8001082:	f000 fb0e 	bl	80016a2 <HAL_NVIC_EnableIRQ>
}
 8001086:	bf00      	nop
 8001088:	3718      	adds	r7, #24
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40023800 	.word	0x40023800
 8001094:	40000400 	.word	0x40000400
 8001098:	40000800 	.word	0x40000800

0800109c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b08a      	sub	sp, #40	; 0x28
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010bc:	d11e      	bne.n	80010fc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	613b      	str	r3, [r7, #16]
 80010c2:	4b34      	ldr	r3, [pc, #208]	; (8001194 <HAL_TIM_MspPostInit+0xf8>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	4a33      	ldr	r2, [pc, #204]	; (8001194 <HAL_TIM_MspPostInit+0xf8>)
 80010c8:	f043 0301 	orr.w	r3, r3, #1
 80010cc:	6313      	str	r3, [r2, #48]	; 0x30
 80010ce:	4b31      	ldr	r3, [pc, #196]	; (8001194 <HAL_TIM_MspPostInit+0xf8>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	613b      	str	r3, [r7, #16]
 80010d8:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80010da:	2303      	movs	r3, #3
 80010dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010de:	2302      	movs	r3, #2
 80010e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e2:	2300      	movs	r3, #0
 80010e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e6:	2300      	movs	r3, #0
 80010e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80010ea:	2301      	movs	r3, #1
 80010ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ee:	f107 0314 	add.w	r3, r7, #20
 80010f2:	4619      	mov	r1, r3
 80010f4:	4828      	ldr	r0, [pc, #160]	; (8001198 <HAL_TIM_MspPostInit+0xfc>)
 80010f6:	f000 fb81 	bl	80017fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80010fa:	e046      	b.n	800118a <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM3)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a26      	ldr	r2, [pc, #152]	; (800119c <HAL_TIM_MspPostInit+0x100>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d11e      	bne.n	8001144 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	60fb      	str	r3, [r7, #12]
 800110a:	4b22      	ldr	r3, [pc, #136]	; (8001194 <HAL_TIM_MspPostInit+0xf8>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	4a21      	ldr	r2, [pc, #132]	; (8001194 <HAL_TIM_MspPostInit+0xf8>)
 8001110:	f043 0301 	orr.w	r3, r3, #1
 8001114:	6313      	str	r3, [r2, #48]	; 0x30
 8001116:	4b1f      	ldr	r3, [pc, #124]	; (8001194 <HAL_TIM_MspPostInit+0xf8>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001122:	23c0      	movs	r3, #192	; 0xc0
 8001124:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001126:	2302      	movs	r3, #2
 8001128:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112e:	2300      	movs	r3, #0
 8001130:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001132:	2302      	movs	r3, #2
 8001134:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001136:	f107 0314 	add.w	r3, r7, #20
 800113a:	4619      	mov	r1, r3
 800113c:	4816      	ldr	r0, [pc, #88]	; (8001198 <HAL_TIM_MspPostInit+0xfc>)
 800113e:	f000 fb5d 	bl	80017fc <HAL_GPIO_Init>
}
 8001142:	e022      	b.n	800118a <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM4)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a15      	ldr	r2, [pc, #84]	; (80011a0 <HAL_TIM_MspPostInit+0x104>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d11d      	bne.n	800118a <HAL_TIM_MspPostInit+0xee>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	60bb      	str	r3, [r7, #8]
 8001152:	4b10      	ldr	r3, [pc, #64]	; (8001194 <HAL_TIM_MspPostInit+0xf8>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	4a0f      	ldr	r2, [pc, #60]	; (8001194 <HAL_TIM_MspPostInit+0xf8>)
 8001158:	f043 0302 	orr.w	r3, r3, #2
 800115c:	6313      	str	r3, [r2, #48]	; 0x30
 800115e:	4b0d      	ldr	r3, [pc, #52]	; (8001194 <HAL_TIM_MspPostInit+0xf8>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	f003 0302 	and.w	r3, r3, #2
 8001166:	60bb      	str	r3, [r7, #8]
 8001168:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800116a:	23c0      	movs	r3, #192	; 0xc0
 800116c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116e:	2302      	movs	r3, #2
 8001170:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001172:	2300      	movs	r3, #0
 8001174:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001176:	2300      	movs	r3, #0
 8001178:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800117a:	2302      	movs	r3, #2
 800117c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800117e:	f107 0314 	add.w	r3, r7, #20
 8001182:	4619      	mov	r1, r3
 8001184:	4807      	ldr	r0, [pc, #28]	; (80011a4 <HAL_TIM_MspPostInit+0x108>)
 8001186:	f000 fb39 	bl	80017fc <HAL_GPIO_Init>
}
 800118a:	bf00      	nop
 800118c:	3728      	adds	r7, #40	; 0x28
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	40023800 	.word	0x40023800
 8001198:	40020000 	.word	0x40020000
 800119c:	40000400 	.word	0x40000400
 80011a0:	40000800 	.word	0x40000800
 80011a4:	40020400 	.word	0x40020400

080011a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b08a      	sub	sp, #40	; 0x28
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b0:	f107 0314 	add.w	r3, r7, #20
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]
 80011bc:	60da      	str	r2, [r3, #12]
 80011be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a1d      	ldr	r2, [pc, #116]	; (800123c <HAL_UART_MspInit+0x94>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d133      	bne.n	8001232 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	613b      	str	r3, [r7, #16]
 80011ce:	4b1c      	ldr	r3, [pc, #112]	; (8001240 <HAL_UART_MspInit+0x98>)
 80011d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d2:	4a1b      	ldr	r2, [pc, #108]	; (8001240 <HAL_UART_MspInit+0x98>)
 80011d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011d8:	6413      	str	r3, [r2, #64]	; 0x40
 80011da:	4b19      	ldr	r3, [pc, #100]	; (8001240 <HAL_UART_MspInit+0x98>)
 80011dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e2:	613b      	str	r3, [r7, #16]
 80011e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	60fb      	str	r3, [r7, #12]
 80011ea:	4b15      	ldr	r3, [pc, #84]	; (8001240 <HAL_UART_MspInit+0x98>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	4a14      	ldr	r2, [pc, #80]	; (8001240 <HAL_UART_MspInit+0x98>)
 80011f0:	f043 0301 	orr.w	r3, r3, #1
 80011f4:	6313      	str	r3, [r2, #48]	; 0x30
 80011f6:	4b12      	ldr	r3, [pc, #72]	; (8001240 <HAL_UART_MspInit+0x98>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001202:	230c      	movs	r3, #12
 8001204:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001206:	2302      	movs	r3, #2
 8001208:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800120e:	2303      	movs	r3, #3
 8001210:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001212:	2307      	movs	r3, #7
 8001214:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001216:	f107 0314 	add.w	r3, r7, #20
 800121a:	4619      	mov	r1, r3
 800121c:	4809      	ldr	r0, [pc, #36]	; (8001244 <HAL_UART_MspInit+0x9c>)
 800121e:	f000 faed 	bl	80017fc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001222:	2200      	movs	r2, #0
 8001224:	2100      	movs	r1, #0
 8001226:	2026      	movs	r0, #38	; 0x26
 8001228:	f000 fa1f 	bl	800166a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800122c:	2026      	movs	r0, #38	; 0x26
 800122e:	f000 fa38 	bl	80016a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001232:	bf00      	nop
 8001234:	3728      	adds	r7, #40	; 0x28
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40004400 	.word	0x40004400
 8001240:	40023800 	.word	0x40023800
 8001244:	40020000 	.word	0x40020000

08001248 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800124c:	e7fe      	b.n	800124c <NMI_Handler+0x4>

0800124e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800124e:	b480      	push	{r7}
 8001250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001252:	e7fe      	b.n	8001252 <HardFault_Handler+0x4>

08001254 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001258:	e7fe      	b.n	8001258 <MemManage_Handler+0x4>

0800125a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800125a:	b480      	push	{r7}
 800125c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800125e:	e7fe      	b.n	800125e <BusFault_Handler+0x4>

08001260 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001264:	e7fe      	b.n	8001264 <UsageFault_Handler+0x4>

08001266 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001266:	b480      	push	{r7}
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr

08001274 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr

08001282 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001282:	b480      	push	{r7}
 8001284:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001286:	bf00      	nop
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001294:	f000 f8ee 	bl	8001474 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001298:	bf00      	nop
 800129a:	bd80      	pop	{r7, pc}

0800129c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012a0:	4802      	ldr	r0, [pc, #8]	; (80012ac <TIM2_IRQHandler+0x10>)
 80012a2:	f001 fcbd 	bl	8002c20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	200000a4 	.word	0x200000a4

080012b0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80012b4:	4802      	ldr	r0, [pc, #8]	; (80012c0 <TIM3_IRQHandler+0x10>)
 80012b6:	f001 fcb3 	bl	8002c20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	200000ec 	.word	0x200000ec

080012c4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80012c8:	4802      	ldr	r0, [pc, #8]	; (80012d4 <TIM4_IRQHandler+0x10>)
 80012ca:	f001 fca9 	bl	8002c20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	20000134 	.word	0x20000134

080012d8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80012dc:	4802      	ldr	r0, [pc, #8]	; (80012e8 <USART2_IRQHandler+0x10>)
 80012de:	f002 fc09 	bl	8003af4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	2000017c 	.word	0x2000017c

080012ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b086      	sub	sp, #24
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012f4:	4a14      	ldr	r2, [pc, #80]	; (8001348 <_sbrk+0x5c>)
 80012f6:	4b15      	ldr	r3, [pc, #84]	; (800134c <_sbrk+0x60>)
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001300:	4b13      	ldr	r3, [pc, #76]	; (8001350 <_sbrk+0x64>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d102      	bne.n	800130e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001308:	4b11      	ldr	r3, [pc, #68]	; (8001350 <_sbrk+0x64>)
 800130a:	4a12      	ldr	r2, [pc, #72]	; (8001354 <_sbrk+0x68>)
 800130c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800130e:	4b10      	ldr	r3, [pc, #64]	; (8001350 <_sbrk+0x64>)
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4413      	add	r3, r2
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	429a      	cmp	r2, r3
 800131a:	d207      	bcs.n	800132c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800131c:	f003 fb52 	bl	80049c4 <__errno>
 8001320:	4603      	mov	r3, r0
 8001322:	220c      	movs	r2, #12
 8001324:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001326:	f04f 33ff 	mov.w	r3, #4294967295
 800132a:	e009      	b.n	8001340 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800132c:	4b08      	ldr	r3, [pc, #32]	; (8001350 <_sbrk+0x64>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001332:	4b07      	ldr	r3, [pc, #28]	; (8001350 <_sbrk+0x64>)
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4413      	add	r3, r2
 800133a:	4a05      	ldr	r2, [pc, #20]	; (8001350 <_sbrk+0x64>)
 800133c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800133e:	68fb      	ldr	r3, [r7, #12]
}
 8001340:	4618      	mov	r0, r3
 8001342:	3718      	adds	r7, #24
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	20020000 	.word	0x20020000
 800134c:	00000400 	.word	0x00000400
 8001350:	2000023c 	.word	0x2000023c
 8001354:	20000258 	.word	0x20000258

08001358 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800135c:	4b06      	ldr	r3, [pc, #24]	; (8001378 <SystemInit+0x20>)
 800135e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001362:	4a05      	ldr	r2, [pc, #20]	; (8001378 <SystemInit+0x20>)
 8001364:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001368:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800136c:	bf00      	nop
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	e000ed00 	.word	0xe000ed00

0800137c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800137c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001380:	480d      	ldr	r0, [pc, #52]	; (80013b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001382:	490e      	ldr	r1, [pc, #56]	; (80013bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001384:	4a0e      	ldr	r2, [pc, #56]	; (80013c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001386:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001388:	e002      	b.n	8001390 <LoopCopyDataInit>

0800138a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800138a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800138c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800138e:	3304      	adds	r3, #4

08001390 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001390:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001392:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001394:	d3f9      	bcc.n	800138a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001396:	4a0b      	ldr	r2, [pc, #44]	; (80013c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001398:	4c0b      	ldr	r4, [pc, #44]	; (80013c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800139a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800139c:	e001      	b.n	80013a2 <LoopFillZerobss>

0800139e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800139e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013a0:	3204      	adds	r2, #4

080013a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013a4:	d3fb      	bcc.n	800139e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013a6:	f7ff ffd7 	bl	8001358 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013aa:	f003 fb11 	bl	80049d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013ae:	f7ff f919 	bl	80005e4 <main>
  bx  lr    
 80013b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013bc:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80013c0:	08005848 	.word	0x08005848
  ldr r2, =_sbss
 80013c4:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80013c8:	20000254 	.word	0x20000254

080013cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013cc:	e7fe      	b.n	80013cc <ADC_IRQHandler>
	...

080013d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013d4:	4b0e      	ldr	r3, [pc, #56]	; (8001410 <HAL_Init+0x40>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a0d      	ldr	r2, [pc, #52]	; (8001410 <HAL_Init+0x40>)
 80013da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013e0:	4b0b      	ldr	r3, [pc, #44]	; (8001410 <HAL_Init+0x40>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a0a      	ldr	r2, [pc, #40]	; (8001410 <HAL_Init+0x40>)
 80013e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013ec:	4b08      	ldr	r3, [pc, #32]	; (8001410 <HAL_Init+0x40>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a07      	ldr	r2, [pc, #28]	; (8001410 <HAL_Init+0x40>)
 80013f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013f8:	2003      	movs	r0, #3
 80013fa:	f000 f92b 	bl	8001654 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013fe:	2000      	movs	r0, #0
 8001400:	f000 f808 	bl	8001414 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001404:	f7ff fdc0 	bl	8000f88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001408:	2300      	movs	r3, #0
}
 800140a:	4618      	mov	r0, r3
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40023c00 	.word	0x40023c00

08001414 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800141c:	4b12      	ldr	r3, [pc, #72]	; (8001468 <HAL_InitTick+0x54>)
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	4b12      	ldr	r3, [pc, #72]	; (800146c <HAL_InitTick+0x58>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	4619      	mov	r1, r3
 8001426:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800142a:	fbb3 f3f1 	udiv	r3, r3, r1
 800142e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001432:	4618      	mov	r0, r3
 8001434:	f000 f943 	bl	80016be <HAL_SYSTICK_Config>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e00e      	b.n	8001460 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2b0f      	cmp	r3, #15
 8001446:	d80a      	bhi.n	800145e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001448:	2200      	movs	r2, #0
 800144a:	6879      	ldr	r1, [r7, #4]
 800144c:	f04f 30ff 	mov.w	r0, #4294967295
 8001450:	f000 f90b 	bl	800166a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001454:	4a06      	ldr	r2, [pc, #24]	; (8001470 <HAL_InitTick+0x5c>)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800145a:	2300      	movs	r3, #0
 800145c:	e000      	b.n	8001460 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
}
 8001460:	4618      	mov	r0, r3
 8001462:	3708      	adds	r7, #8
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	20000018 	.word	0x20000018
 800146c:	20000020 	.word	0x20000020
 8001470:	2000001c 	.word	0x2000001c

08001474 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001478:	4b06      	ldr	r3, [pc, #24]	; (8001494 <HAL_IncTick+0x20>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	461a      	mov	r2, r3
 800147e:	4b06      	ldr	r3, [pc, #24]	; (8001498 <HAL_IncTick+0x24>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4413      	add	r3, r2
 8001484:	4a04      	ldr	r2, [pc, #16]	; (8001498 <HAL_IncTick+0x24>)
 8001486:	6013      	str	r3, [r2, #0]
}
 8001488:	bf00      	nop
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	20000020 	.word	0x20000020
 8001498:	20000240 	.word	0x20000240

0800149c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  return uwTick;
 80014a0:	4b03      	ldr	r3, [pc, #12]	; (80014b0 <HAL_GetTick+0x14>)
 80014a2:	681b      	ldr	r3, [r3, #0]
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	20000240 	.word	0x20000240

080014b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b085      	sub	sp, #20
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f003 0307 	and.w	r3, r3, #7
 80014c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014c4:	4b0c      	ldr	r3, [pc, #48]	; (80014f8 <__NVIC_SetPriorityGrouping+0x44>)
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ca:	68ba      	ldr	r2, [r7, #8]
 80014cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014d0:	4013      	ands	r3, r2
 80014d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014e6:	4a04      	ldr	r2, [pc, #16]	; (80014f8 <__NVIC_SetPriorityGrouping+0x44>)
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	60d3      	str	r3, [r2, #12]
}
 80014ec:	bf00      	nop
 80014ee:	3714      	adds	r7, #20
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr
 80014f8:	e000ed00 	.word	0xe000ed00

080014fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001500:	4b04      	ldr	r3, [pc, #16]	; (8001514 <__NVIC_GetPriorityGrouping+0x18>)
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	0a1b      	lsrs	r3, r3, #8
 8001506:	f003 0307 	and.w	r3, r3, #7
}
 800150a:	4618      	mov	r0, r3
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	e000ed00 	.word	0xe000ed00

08001518 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001526:	2b00      	cmp	r3, #0
 8001528:	db0b      	blt.n	8001542 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800152a:	79fb      	ldrb	r3, [r7, #7]
 800152c:	f003 021f 	and.w	r2, r3, #31
 8001530:	4907      	ldr	r1, [pc, #28]	; (8001550 <__NVIC_EnableIRQ+0x38>)
 8001532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001536:	095b      	lsrs	r3, r3, #5
 8001538:	2001      	movs	r0, #1
 800153a:	fa00 f202 	lsl.w	r2, r0, r2
 800153e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001542:	bf00      	nop
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	e000e100 	.word	0xe000e100

08001554 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	4603      	mov	r3, r0
 800155c:	6039      	str	r1, [r7, #0]
 800155e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001560:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001564:	2b00      	cmp	r3, #0
 8001566:	db0a      	blt.n	800157e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	b2da      	uxtb	r2, r3
 800156c:	490c      	ldr	r1, [pc, #48]	; (80015a0 <__NVIC_SetPriority+0x4c>)
 800156e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001572:	0112      	lsls	r2, r2, #4
 8001574:	b2d2      	uxtb	r2, r2
 8001576:	440b      	add	r3, r1
 8001578:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800157c:	e00a      	b.n	8001594 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	b2da      	uxtb	r2, r3
 8001582:	4908      	ldr	r1, [pc, #32]	; (80015a4 <__NVIC_SetPriority+0x50>)
 8001584:	79fb      	ldrb	r3, [r7, #7]
 8001586:	f003 030f 	and.w	r3, r3, #15
 800158a:	3b04      	subs	r3, #4
 800158c:	0112      	lsls	r2, r2, #4
 800158e:	b2d2      	uxtb	r2, r2
 8001590:	440b      	add	r3, r1
 8001592:	761a      	strb	r2, [r3, #24]
}
 8001594:	bf00      	nop
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr
 80015a0:	e000e100 	.word	0xe000e100
 80015a4:	e000ed00 	.word	0xe000ed00

080015a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b089      	sub	sp, #36	; 0x24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	60f8      	str	r0, [r7, #12]
 80015b0:	60b9      	str	r1, [r7, #8]
 80015b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	f003 0307 	and.w	r3, r3, #7
 80015ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	f1c3 0307 	rsb	r3, r3, #7
 80015c2:	2b04      	cmp	r3, #4
 80015c4:	bf28      	it	cs
 80015c6:	2304      	movcs	r3, #4
 80015c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	3304      	adds	r3, #4
 80015ce:	2b06      	cmp	r3, #6
 80015d0:	d902      	bls.n	80015d8 <NVIC_EncodePriority+0x30>
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	3b03      	subs	r3, #3
 80015d6:	e000      	b.n	80015da <NVIC_EncodePriority+0x32>
 80015d8:	2300      	movs	r3, #0
 80015da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015dc:	f04f 32ff 	mov.w	r2, #4294967295
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	fa02 f303 	lsl.w	r3, r2, r3
 80015e6:	43da      	mvns	r2, r3
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	401a      	ands	r2, r3
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015f0:	f04f 31ff 	mov.w	r1, #4294967295
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	fa01 f303 	lsl.w	r3, r1, r3
 80015fa:	43d9      	mvns	r1, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001600:	4313      	orrs	r3, r2
         );
}
 8001602:	4618      	mov	r0, r3
 8001604:	3724      	adds	r7, #36	; 0x24
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
	...

08001610 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	3b01      	subs	r3, #1
 800161c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001620:	d301      	bcc.n	8001626 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001622:	2301      	movs	r3, #1
 8001624:	e00f      	b.n	8001646 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001626:	4a0a      	ldr	r2, [pc, #40]	; (8001650 <SysTick_Config+0x40>)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	3b01      	subs	r3, #1
 800162c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800162e:	210f      	movs	r1, #15
 8001630:	f04f 30ff 	mov.w	r0, #4294967295
 8001634:	f7ff ff8e 	bl	8001554 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001638:	4b05      	ldr	r3, [pc, #20]	; (8001650 <SysTick_Config+0x40>)
 800163a:	2200      	movs	r2, #0
 800163c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800163e:	4b04      	ldr	r3, [pc, #16]	; (8001650 <SysTick_Config+0x40>)
 8001640:	2207      	movs	r2, #7
 8001642:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	e000e010 	.word	0xe000e010

08001654 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	f7ff ff29 	bl	80014b4 <__NVIC_SetPriorityGrouping>
}
 8001662:	bf00      	nop
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}

0800166a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800166a:	b580      	push	{r7, lr}
 800166c:	b086      	sub	sp, #24
 800166e:	af00      	add	r7, sp, #0
 8001670:	4603      	mov	r3, r0
 8001672:	60b9      	str	r1, [r7, #8]
 8001674:	607a      	str	r2, [r7, #4]
 8001676:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001678:	2300      	movs	r3, #0
 800167a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800167c:	f7ff ff3e 	bl	80014fc <__NVIC_GetPriorityGrouping>
 8001680:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	68b9      	ldr	r1, [r7, #8]
 8001686:	6978      	ldr	r0, [r7, #20]
 8001688:	f7ff ff8e 	bl	80015a8 <NVIC_EncodePriority>
 800168c:	4602      	mov	r2, r0
 800168e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001692:	4611      	mov	r1, r2
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff ff5d 	bl	8001554 <__NVIC_SetPriority>
}
 800169a:	bf00      	nop
 800169c:	3718      	adds	r7, #24
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b082      	sub	sp, #8
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	4603      	mov	r3, r0
 80016aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7ff ff31 	bl	8001518 <__NVIC_EnableIRQ>
}
 80016b6:	bf00      	nop
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}

080016be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016be:	b580      	push	{r7, lr}
 80016c0:	b082      	sub	sp, #8
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f7ff ffa2 	bl	8001610 <SysTick_Config>
 80016cc:	4603      	mov	r3, r0
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b084      	sub	sp, #16
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016e2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80016e4:	f7ff feda 	bl	800149c <HAL_GetTick>
 80016e8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d008      	beq.n	8001708 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2280      	movs	r2, #128	; 0x80
 80016fa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2200      	movs	r2, #0
 8001700:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e052      	b.n	80017ae <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f022 0216 	bic.w	r2, r2, #22
 8001716:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	695a      	ldr	r2, [r3, #20]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001726:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172c:	2b00      	cmp	r3, #0
 800172e:	d103      	bne.n	8001738 <HAL_DMA_Abort+0x62>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001734:	2b00      	cmp	r3, #0
 8001736:	d007      	beq.n	8001748 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f022 0208 	bic.w	r2, r2, #8
 8001746:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f022 0201 	bic.w	r2, r2, #1
 8001756:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001758:	e013      	b.n	8001782 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800175a:	f7ff fe9f 	bl	800149c <HAL_GetTick>
 800175e:	4602      	mov	r2, r0
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	2b05      	cmp	r3, #5
 8001766:	d90c      	bls.n	8001782 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2220      	movs	r2, #32
 800176c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2203      	movs	r2, #3
 8001772:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2200      	movs	r2, #0
 800177a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e015      	b.n	80017ae <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0301 	and.w	r3, r3, #1
 800178c:	2b00      	cmp	r3, #0
 800178e:	d1e4      	bne.n	800175a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001794:	223f      	movs	r2, #63	; 0x3f
 8001796:	409a      	lsls	r2, r3
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2201      	movs	r2, #1
 80017a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2200      	movs	r2, #0
 80017a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017b6:	b480      	push	{r7}
 80017b8:	b083      	sub	sp, #12
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d004      	beq.n	80017d4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2280      	movs	r2, #128	; 0x80
 80017ce:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e00c      	b.n	80017ee <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2205      	movs	r2, #5
 80017d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f022 0201 	bic.w	r2, r2, #1
 80017ea:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
	...

080017fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b089      	sub	sp, #36	; 0x24
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001806:	2300      	movs	r3, #0
 8001808:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800180a:	2300      	movs	r3, #0
 800180c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800180e:	2300      	movs	r3, #0
 8001810:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001812:	2300      	movs	r3, #0
 8001814:	61fb      	str	r3, [r7, #28]
 8001816:	e165      	b.n	8001ae4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001818:	2201      	movs	r2, #1
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	697a      	ldr	r2, [r7, #20]
 8001828:	4013      	ands	r3, r2
 800182a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800182c:	693a      	ldr	r2, [r7, #16]
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	429a      	cmp	r2, r3
 8001832:	f040 8154 	bne.w	8001ade <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f003 0303 	and.w	r3, r3, #3
 800183e:	2b01      	cmp	r3, #1
 8001840:	d005      	beq.n	800184e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800184a:	2b02      	cmp	r3, #2
 800184c:	d130      	bne.n	80018b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	2203      	movs	r2, #3
 800185a:	fa02 f303 	lsl.w	r3, r2, r3
 800185e:	43db      	mvns	r3, r3
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	4013      	ands	r3, r2
 8001864:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	68da      	ldr	r2, [r3, #12]
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	4313      	orrs	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	69ba      	ldr	r2, [r7, #24]
 800187c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001884:	2201      	movs	r2, #1
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	43db      	mvns	r3, r3
 800188e:	69ba      	ldr	r2, [r7, #24]
 8001890:	4013      	ands	r3, r2
 8001892:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	091b      	lsrs	r3, r3, #4
 800189a:	f003 0201 	and.w	r2, r3, #1
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f003 0303 	and.w	r3, r3, #3
 80018b8:	2b03      	cmp	r3, #3
 80018ba:	d017      	beq.n	80018ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	2203      	movs	r2, #3
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	43db      	mvns	r3, r3
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	4013      	ands	r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	689a      	ldr	r2, [r3, #8]
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f003 0303 	and.w	r3, r3, #3
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d123      	bne.n	8001940 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	08da      	lsrs	r2, r3, #3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	3208      	adds	r2, #8
 8001900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001904:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	f003 0307 	and.w	r3, r3, #7
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	220f      	movs	r2, #15
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	43db      	mvns	r3, r3
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	4013      	ands	r3, r2
 800191a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	691a      	ldr	r2, [r3, #16]
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	f003 0307 	and.w	r3, r3, #7
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	4313      	orrs	r3, r2
 8001930:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	08da      	lsrs	r2, r3, #3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	3208      	adds	r2, #8
 800193a:	69b9      	ldr	r1, [r7, #24]
 800193c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	2203      	movs	r2, #3
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	43db      	mvns	r3, r3
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	4013      	ands	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f003 0203 	and.w	r2, r3, #3
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	4313      	orrs	r3, r2
 800196c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800197c:	2b00      	cmp	r3, #0
 800197e:	f000 80ae 	beq.w	8001ade <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	60fb      	str	r3, [r7, #12]
 8001986:	4b5d      	ldr	r3, [pc, #372]	; (8001afc <HAL_GPIO_Init+0x300>)
 8001988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198a:	4a5c      	ldr	r2, [pc, #368]	; (8001afc <HAL_GPIO_Init+0x300>)
 800198c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001990:	6453      	str	r3, [r2, #68]	; 0x44
 8001992:	4b5a      	ldr	r3, [pc, #360]	; (8001afc <HAL_GPIO_Init+0x300>)
 8001994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001996:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800199a:	60fb      	str	r3, [r7, #12]
 800199c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800199e:	4a58      	ldr	r2, [pc, #352]	; (8001b00 <HAL_GPIO_Init+0x304>)
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	089b      	lsrs	r3, r3, #2
 80019a4:	3302      	adds	r3, #2
 80019a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	f003 0303 	and.w	r3, r3, #3
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	220f      	movs	r2, #15
 80019b6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ba:	43db      	mvns	r3, r3
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	4013      	ands	r3, r2
 80019c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4a4f      	ldr	r2, [pc, #316]	; (8001b04 <HAL_GPIO_Init+0x308>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d025      	beq.n	8001a16 <HAL_GPIO_Init+0x21a>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a4e      	ldr	r2, [pc, #312]	; (8001b08 <HAL_GPIO_Init+0x30c>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d01f      	beq.n	8001a12 <HAL_GPIO_Init+0x216>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a4d      	ldr	r2, [pc, #308]	; (8001b0c <HAL_GPIO_Init+0x310>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d019      	beq.n	8001a0e <HAL_GPIO_Init+0x212>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4a4c      	ldr	r2, [pc, #304]	; (8001b10 <HAL_GPIO_Init+0x314>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d013      	beq.n	8001a0a <HAL_GPIO_Init+0x20e>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a4b      	ldr	r2, [pc, #300]	; (8001b14 <HAL_GPIO_Init+0x318>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d00d      	beq.n	8001a06 <HAL_GPIO_Init+0x20a>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4a4a      	ldr	r2, [pc, #296]	; (8001b18 <HAL_GPIO_Init+0x31c>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d007      	beq.n	8001a02 <HAL_GPIO_Init+0x206>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a49      	ldr	r2, [pc, #292]	; (8001b1c <HAL_GPIO_Init+0x320>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d101      	bne.n	80019fe <HAL_GPIO_Init+0x202>
 80019fa:	2306      	movs	r3, #6
 80019fc:	e00c      	b.n	8001a18 <HAL_GPIO_Init+0x21c>
 80019fe:	2307      	movs	r3, #7
 8001a00:	e00a      	b.n	8001a18 <HAL_GPIO_Init+0x21c>
 8001a02:	2305      	movs	r3, #5
 8001a04:	e008      	b.n	8001a18 <HAL_GPIO_Init+0x21c>
 8001a06:	2304      	movs	r3, #4
 8001a08:	e006      	b.n	8001a18 <HAL_GPIO_Init+0x21c>
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e004      	b.n	8001a18 <HAL_GPIO_Init+0x21c>
 8001a0e:	2302      	movs	r3, #2
 8001a10:	e002      	b.n	8001a18 <HAL_GPIO_Init+0x21c>
 8001a12:	2301      	movs	r3, #1
 8001a14:	e000      	b.n	8001a18 <HAL_GPIO_Init+0x21c>
 8001a16:	2300      	movs	r3, #0
 8001a18:	69fa      	ldr	r2, [r7, #28]
 8001a1a:	f002 0203 	and.w	r2, r2, #3
 8001a1e:	0092      	lsls	r2, r2, #2
 8001a20:	4093      	lsls	r3, r2
 8001a22:	69ba      	ldr	r2, [r7, #24]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a28:	4935      	ldr	r1, [pc, #212]	; (8001b00 <HAL_GPIO_Init+0x304>)
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	089b      	lsrs	r3, r3, #2
 8001a2e:	3302      	adds	r3, #2
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a36:	4b3a      	ldr	r3, [pc, #232]	; (8001b20 <HAL_GPIO_Init+0x324>)
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	43db      	mvns	r3, r3
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	4013      	ands	r3, r2
 8001a44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d003      	beq.n	8001a5a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a5a:	4a31      	ldr	r2, [pc, #196]	; (8001b20 <HAL_GPIO_Init+0x324>)
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a60:	4b2f      	ldr	r3, [pc, #188]	; (8001b20 <HAL_GPIO_Init+0x324>)
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d003      	beq.n	8001a84 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a84:	4a26      	ldr	r2, [pc, #152]	; (8001b20 <HAL_GPIO_Init+0x324>)
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a8a:	4b25      	ldr	r3, [pc, #148]	; (8001b20 <HAL_GPIO_Init+0x324>)
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	43db      	mvns	r3, r3
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	4013      	ands	r3, r2
 8001a98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d003      	beq.n	8001aae <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001aae:	4a1c      	ldr	r2, [pc, #112]	; (8001b20 <HAL_GPIO_Init+0x324>)
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ab4:	4b1a      	ldr	r3, [pc, #104]	; (8001b20 <HAL_GPIO_Init+0x324>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	43db      	mvns	r3, r3
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d003      	beq.n	8001ad8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ad8:	4a11      	ldr	r2, [pc, #68]	; (8001b20 <HAL_GPIO_Init+0x324>)
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	61fb      	str	r3, [r7, #28]
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	2b0f      	cmp	r3, #15
 8001ae8:	f67f ae96 	bls.w	8001818 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001aec:	bf00      	nop
 8001aee:	bf00      	nop
 8001af0:	3724      	adds	r7, #36	; 0x24
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	40023800 	.word	0x40023800
 8001b00:	40013800 	.word	0x40013800
 8001b04:	40020000 	.word	0x40020000
 8001b08:	40020400 	.word	0x40020400
 8001b0c:	40020800 	.word	0x40020800
 8001b10:	40020c00 	.word	0x40020c00
 8001b14:	40021000 	.word	0x40021000
 8001b18:	40021400 	.word	0x40021400
 8001b1c:	40021800 	.word	0x40021800
 8001b20:	40013c00 	.word	0x40013c00

08001b24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	807b      	strh	r3, [r7, #2]
 8001b30:	4613      	mov	r3, r2
 8001b32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b34:	787b      	ldrb	r3, [r7, #1]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d003      	beq.n	8001b42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b3a:	887a      	ldrh	r2, [r7, #2]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b40:	e003      	b.n	8001b4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b42:	887b      	ldrh	r3, [r7, #2]
 8001b44:	041a      	lsls	r2, r3, #16
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	619a      	str	r2, [r3, #24]
}
 8001b4a:	bf00      	nop
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
	...

08001b58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d101      	bne.n	8001b6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e0cc      	b.n	8001d06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b6c:	4b68      	ldr	r3, [pc, #416]	; (8001d10 <HAL_RCC_ClockConfig+0x1b8>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 030f 	and.w	r3, r3, #15
 8001b74:	683a      	ldr	r2, [r7, #0]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d90c      	bls.n	8001b94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b7a:	4b65      	ldr	r3, [pc, #404]	; (8001d10 <HAL_RCC_ClockConfig+0x1b8>)
 8001b7c:	683a      	ldr	r2, [r7, #0]
 8001b7e:	b2d2      	uxtb	r2, r2
 8001b80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b82:	4b63      	ldr	r3, [pc, #396]	; (8001d10 <HAL_RCC_ClockConfig+0x1b8>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 030f 	and.w	r3, r3, #15
 8001b8a:	683a      	ldr	r2, [r7, #0]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d001      	beq.n	8001b94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e0b8      	b.n	8001d06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0302 	and.w	r3, r3, #2
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d020      	beq.n	8001be2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0304 	and.w	r3, r3, #4
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d005      	beq.n	8001bb8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bac:	4b59      	ldr	r3, [pc, #356]	; (8001d14 <HAL_RCC_ClockConfig+0x1bc>)
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	4a58      	ldr	r2, [pc, #352]	; (8001d14 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001bb6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0308 	and.w	r3, r3, #8
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d005      	beq.n	8001bd0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bc4:	4b53      	ldr	r3, [pc, #332]	; (8001d14 <HAL_RCC_ClockConfig+0x1bc>)
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	4a52      	ldr	r2, [pc, #328]	; (8001d14 <HAL_RCC_ClockConfig+0x1bc>)
 8001bca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001bce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bd0:	4b50      	ldr	r3, [pc, #320]	; (8001d14 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	494d      	ldr	r1, [pc, #308]	; (8001d14 <HAL_RCC_ClockConfig+0x1bc>)
 8001bde:	4313      	orrs	r3, r2
 8001be0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d044      	beq.n	8001c78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d107      	bne.n	8001c06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bf6:	4b47      	ldr	r3, [pc, #284]	; (8001d14 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d119      	bne.n	8001c36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e07f      	b.n	8001d06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d003      	beq.n	8001c16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c12:	2b03      	cmp	r3, #3
 8001c14:	d107      	bne.n	8001c26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c16:	4b3f      	ldr	r3, [pc, #252]	; (8001d14 <HAL_RCC_ClockConfig+0x1bc>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d109      	bne.n	8001c36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e06f      	b.n	8001d06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c26:	4b3b      	ldr	r3, [pc, #236]	; (8001d14 <HAL_RCC_ClockConfig+0x1bc>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d101      	bne.n	8001c36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e067      	b.n	8001d06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c36:	4b37      	ldr	r3, [pc, #220]	; (8001d14 <HAL_RCC_ClockConfig+0x1bc>)
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	f023 0203 	bic.w	r2, r3, #3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	4934      	ldr	r1, [pc, #208]	; (8001d14 <HAL_RCC_ClockConfig+0x1bc>)
 8001c44:	4313      	orrs	r3, r2
 8001c46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c48:	f7ff fc28 	bl	800149c <HAL_GetTick>
 8001c4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c4e:	e00a      	b.n	8001c66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c50:	f7ff fc24 	bl	800149c <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d901      	bls.n	8001c66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e04f      	b.n	8001d06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c66:	4b2b      	ldr	r3, [pc, #172]	; (8001d14 <HAL_RCC_ClockConfig+0x1bc>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f003 020c 	and.w	r2, r3, #12
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d1eb      	bne.n	8001c50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c78:	4b25      	ldr	r3, [pc, #148]	; (8001d10 <HAL_RCC_ClockConfig+0x1b8>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 030f 	and.w	r3, r3, #15
 8001c80:	683a      	ldr	r2, [r7, #0]
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d20c      	bcs.n	8001ca0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c86:	4b22      	ldr	r3, [pc, #136]	; (8001d10 <HAL_RCC_ClockConfig+0x1b8>)
 8001c88:	683a      	ldr	r2, [r7, #0]
 8001c8a:	b2d2      	uxtb	r2, r2
 8001c8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c8e:	4b20      	ldr	r3, [pc, #128]	; (8001d10 <HAL_RCC_ClockConfig+0x1b8>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 030f 	and.w	r3, r3, #15
 8001c96:	683a      	ldr	r2, [r7, #0]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d001      	beq.n	8001ca0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e032      	b.n	8001d06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0304 	and.w	r3, r3, #4
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d008      	beq.n	8001cbe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cac:	4b19      	ldr	r3, [pc, #100]	; (8001d14 <HAL_RCC_ClockConfig+0x1bc>)
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	4916      	ldr	r1, [pc, #88]	; (8001d14 <HAL_RCC_ClockConfig+0x1bc>)
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0308 	and.w	r3, r3, #8
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d009      	beq.n	8001cde <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cca:	4b12      	ldr	r3, [pc, #72]	; (8001d14 <HAL_RCC_ClockConfig+0x1bc>)
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	691b      	ldr	r3, [r3, #16]
 8001cd6:	00db      	lsls	r3, r3, #3
 8001cd8:	490e      	ldr	r1, [pc, #56]	; (8001d14 <HAL_RCC_ClockConfig+0x1bc>)
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001cde:	f000 f855 	bl	8001d8c <HAL_RCC_GetSysClockFreq>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	4b0b      	ldr	r3, [pc, #44]	; (8001d14 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	091b      	lsrs	r3, r3, #4
 8001cea:	f003 030f 	and.w	r3, r3, #15
 8001cee:	490a      	ldr	r1, [pc, #40]	; (8001d18 <HAL_RCC_ClockConfig+0x1c0>)
 8001cf0:	5ccb      	ldrb	r3, [r1, r3]
 8001cf2:	fa22 f303 	lsr.w	r3, r2, r3
 8001cf6:	4a09      	ldr	r2, [pc, #36]	; (8001d1c <HAL_RCC_ClockConfig+0x1c4>)
 8001cf8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001cfa:	4b09      	ldr	r3, [pc, #36]	; (8001d20 <HAL_RCC_ClockConfig+0x1c8>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7ff fb88 	bl	8001414 <HAL_InitTick>

  return HAL_OK;
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3710      	adds	r7, #16
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	40023c00 	.word	0x40023c00
 8001d14:	40023800 	.word	0x40023800
 8001d18:	080056a0 	.word	0x080056a0
 8001d1c:	20000018 	.word	0x20000018
 8001d20:	2000001c 	.word	0x2000001c

08001d24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d28:	4b03      	ldr	r3, [pc, #12]	; (8001d38 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	20000018 	.word	0x20000018

08001d3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d40:	f7ff fff0 	bl	8001d24 <HAL_RCC_GetHCLKFreq>
 8001d44:	4602      	mov	r2, r0
 8001d46:	4b05      	ldr	r3, [pc, #20]	; (8001d5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	0a9b      	lsrs	r3, r3, #10
 8001d4c:	f003 0307 	and.w	r3, r3, #7
 8001d50:	4903      	ldr	r1, [pc, #12]	; (8001d60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d52:	5ccb      	ldrb	r3, [r1, r3]
 8001d54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	40023800 	.word	0x40023800
 8001d60:	080056b0 	.word	0x080056b0

08001d64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d68:	f7ff ffdc 	bl	8001d24 <HAL_RCC_GetHCLKFreq>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	4b05      	ldr	r3, [pc, #20]	; (8001d84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	0b5b      	lsrs	r3, r3, #13
 8001d74:	f003 0307 	and.w	r3, r3, #7
 8001d78:	4903      	ldr	r1, [pc, #12]	; (8001d88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d7a:	5ccb      	ldrb	r3, [r1, r3]
 8001d7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	40023800 	.word	0x40023800
 8001d88:	080056b0 	.word	0x080056b0

08001d8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d90:	b0ae      	sub	sp, #184	; 0xb8
 8001d92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001d94:	2300      	movs	r3, #0
 8001d96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001da0:	2300      	movs	r3, #0
 8001da2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001da6:	2300      	movs	r3, #0
 8001da8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001dac:	2300      	movs	r3, #0
 8001dae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001db2:	4bcb      	ldr	r3, [pc, #812]	; (80020e0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	f003 030c 	and.w	r3, r3, #12
 8001dba:	2b0c      	cmp	r3, #12
 8001dbc:	f200 8206 	bhi.w	80021cc <HAL_RCC_GetSysClockFreq+0x440>
 8001dc0:	a201      	add	r2, pc, #4	; (adr r2, 8001dc8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dc6:	bf00      	nop
 8001dc8:	08001dfd 	.word	0x08001dfd
 8001dcc:	080021cd 	.word	0x080021cd
 8001dd0:	080021cd 	.word	0x080021cd
 8001dd4:	080021cd 	.word	0x080021cd
 8001dd8:	08001e05 	.word	0x08001e05
 8001ddc:	080021cd 	.word	0x080021cd
 8001de0:	080021cd 	.word	0x080021cd
 8001de4:	080021cd 	.word	0x080021cd
 8001de8:	08001e0d 	.word	0x08001e0d
 8001dec:	080021cd 	.word	0x080021cd
 8001df0:	080021cd 	.word	0x080021cd
 8001df4:	080021cd 	.word	0x080021cd
 8001df8:	08001ffd 	.word	0x08001ffd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001dfc:	4bb9      	ldr	r3, [pc, #740]	; (80020e4 <HAL_RCC_GetSysClockFreq+0x358>)
 8001dfe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001e02:	e1e7      	b.n	80021d4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e04:	4bb8      	ldr	r3, [pc, #736]	; (80020e8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001e06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001e0a:	e1e3      	b.n	80021d4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e0c:	4bb4      	ldr	r3, [pc, #720]	; (80020e0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e18:	4bb1      	ldr	r3, [pc, #708]	; (80020e0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d071      	beq.n	8001f08 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e24:	4bae      	ldr	r3, [pc, #696]	; (80020e0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	099b      	lsrs	r3, r3, #6
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001e30:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001e34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001e38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e3c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001e40:	2300      	movs	r3, #0
 8001e42:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001e46:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001e4a:	4622      	mov	r2, r4
 8001e4c:	462b      	mov	r3, r5
 8001e4e:	f04f 0000 	mov.w	r0, #0
 8001e52:	f04f 0100 	mov.w	r1, #0
 8001e56:	0159      	lsls	r1, r3, #5
 8001e58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e5c:	0150      	lsls	r0, r2, #5
 8001e5e:	4602      	mov	r2, r0
 8001e60:	460b      	mov	r3, r1
 8001e62:	4621      	mov	r1, r4
 8001e64:	1a51      	subs	r1, r2, r1
 8001e66:	6439      	str	r1, [r7, #64]	; 0x40
 8001e68:	4629      	mov	r1, r5
 8001e6a:	eb63 0301 	sbc.w	r3, r3, r1
 8001e6e:	647b      	str	r3, [r7, #68]	; 0x44
 8001e70:	f04f 0200 	mov.w	r2, #0
 8001e74:	f04f 0300 	mov.w	r3, #0
 8001e78:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001e7c:	4649      	mov	r1, r9
 8001e7e:	018b      	lsls	r3, r1, #6
 8001e80:	4641      	mov	r1, r8
 8001e82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e86:	4641      	mov	r1, r8
 8001e88:	018a      	lsls	r2, r1, #6
 8001e8a:	4641      	mov	r1, r8
 8001e8c:	1a51      	subs	r1, r2, r1
 8001e8e:	63b9      	str	r1, [r7, #56]	; 0x38
 8001e90:	4649      	mov	r1, r9
 8001e92:	eb63 0301 	sbc.w	r3, r3, r1
 8001e96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e98:	f04f 0200 	mov.w	r2, #0
 8001e9c:	f04f 0300 	mov.w	r3, #0
 8001ea0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001ea4:	4649      	mov	r1, r9
 8001ea6:	00cb      	lsls	r3, r1, #3
 8001ea8:	4641      	mov	r1, r8
 8001eaa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001eae:	4641      	mov	r1, r8
 8001eb0:	00ca      	lsls	r2, r1, #3
 8001eb2:	4610      	mov	r0, r2
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	4622      	mov	r2, r4
 8001eba:	189b      	adds	r3, r3, r2
 8001ebc:	633b      	str	r3, [r7, #48]	; 0x30
 8001ebe:	462b      	mov	r3, r5
 8001ec0:	460a      	mov	r2, r1
 8001ec2:	eb42 0303 	adc.w	r3, r2, r3
 8001ec6:	637b      	str	r3, [r7, #52]	; 0x34
 8001ec8:	f04f 0200 	mov.w	r2, #0
 8001ecc:	f04f 0300 	mov.w	r3, #0
 8001ed0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001ed4:	4629      	mov	r1, r5
 8001ed6:	024b      	lsls	r3, r1, #9
 8001ed8:	4621      	mov	r1, r4
 8001eda:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ede:	4621      	mov	r1, r4
 8001ee0:	024a      	lsls	r2, r1, #9
 8001ee2:	4610      	mov	r0, r2
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001eea:	2200      	movs	r2, #0
 8001eec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001ef0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001ef4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001ef8:	f7fe f9f2 	bl	80002e0 <__aeabi_uldivmod>
 8001efc:	4602      	mov	r2, r0
 8001efe:	460b      	mov	r3, r1
 8001f00:	4613      	mov	r3, r2
 8001f02:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001f06:	e067      	b.n	8001fd8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f08:	4b75      	ldr	r3, [pc, #468]	; (80020e0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	099b      	lsrs	r3, r3, #6
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001f14:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001f18:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001f1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f20:	67bb      	str	r3, [r7, #120]	; 0x78
 8001f22:	2300      	movs	r3, #0
 8001f24:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001f26:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001f2a:	4622      	mov	r2, r4
 8001f2c:	462b      	mov	r3, r5
 8001f2e:	f04f 0000 	mov.w	r0, #0
 8001f32:	f04f 0100 	mov.w	r1, #0
 8001f36:	0159      	lsls	r1, r3, #5
 8001f38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f3c:	0150      	lsls	r0, r2, #5
 8001f3e:	4602      	mov	r2, r0
 8001f40:	460b      	mov	r3, r1
 8001f42:	4621      	mov	r1, r4
 8001f44:	1a51      	subs	r1, r2, r1
 8001f46:	62b9      	str	r1, [r7, #40]	; 0x28
 8001f48:	4629      	mov	r1, r5
 8001f4a:	eb63 0301 	sbc.w	r3, r3, r1
 8001f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f50:	f04f 0200 	mov.w	r2, #0
 8001f54:	f04f 0300 	mov.w	r3, #0
 8001f58:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001f5c:	4649      	mov	r1, r9
 8001f5e:	018b      	lsls	r3, r1, #6
 8001f60:	4641      	mov	r1, r8
 8001f62:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f66:	4641      	mov	r1, r8
 8001f68:	018a      	lsls	r2, r1, #6
 8001f6a:	4641      	mov	r1, r8
 8001f6c:	ebb2 0a01 	subs.w	sl, r2, r1
 8001f70:	4649      	mov	r1, r9
 8001f72:	eb63 0b01 	sbc.w	fp, r3, r1
 8001f76:	f04f 0200 	mov.w	r2, #0
 8001f7a:	f04f 0300 	mov.w	r3, #0
 8001f7e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001f82:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001f86:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001f8a:	4692      	mov	sl, r2
 8001f8c:	469b      	mov	fp, r3
 8001f8e:	4623      	mov	r3, r4
 8001f90:	eb1a 0303 	adds.w	r3, sl, r3
 8001f94:	623b      	str	r3, [r7, #32]
 8001f96:	462b      	mov	r3, r5
 8001f98:	eb4b 0303 	adc.w	r3, fp, r3
 8001f9c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f9e:	f04f 0200 	mov.w	r2, #0
 8001fa2:	f04f 0300 	mov.w	r3, #0
 8001fa6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001faa:	4629      	mov	r1, r5
 8001fac:	028b      	lsls	r3, r1, #10
 8001fae:	4621      	mov	r1, r4
 8001fb0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001fb4:	4621      	mov	r1, r4
 8001fb6:	028a      	lsls	r2, r1, #10
 8001fb8:	4610      	mov	r0, r2
 8001fba:	4619      	mov	r1, r3
 8001fbc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	673b      	str	r3, [r7, #112]	; 0x70
 8001fc4:	677a      	str	r2, [r7, #116]	; 0x74
 8001fc6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001fca:	f7fe f989 	bl	80002e0 <__aeabi_uldivmod>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001fd8:	4b41      	ldr	r3, [pc, #260]	; (80020e0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	0c1b      	lsrs	r3, r3, #16
 8001fde:	f003 0303 	and.w	r3, r3, #3
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001fea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001fee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ff6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001ffa:	e0eb      	b.n	80021d4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ffc:	4b38      	ldr	r3, [pc, #224]	; (80020e0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002004:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002008:	4b35      	ldr	r3, [pc, #212]	; (80020e0 <HAL_RCC_GetSysClockFreq+0x354>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d06b      	beq.n	80020ec <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002014:	4b32      	ldr	r3, [pc, #200]	; (80020e0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	099b      	lsrs	r3, r3, #6
 800201a:	2200      	movs	r2, #0
 800201c:	66bb      	str	r3, [r7, #104]	; 0x68
 800201e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002020:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002022:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002026:	663b      	str	r3, [r7, #96]	; 0x60
 8002028:	2300      	movs	r3, #0
 800202a:	667b      	str	r3, [r7, #100]	; 0x64
 800202c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002030:	4622      	mov	r2, r4
 8002032:	462b      	mov	r3, r5
 8002034:	f04f 0000 	mov.w	r0, #0
 8002038:	f04f 0100 	mov.w	r1, #0
 800203c:	0159      	lsls	r1, r3, #5
 800203e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002042:	0150      	lsls	r0, r2, #5
 8002044:	4602      	mov	r2, r0
 8002046:	460b      	mov	r3, r1
 8002048:	4621      	mov	r1, r4
 800204a:	1a51      	subs	r1, r2, r1
 800204c:	61b9      	str	r1, [r7, #24]
 800204e:	4629      	mov	r1, r5
 8002050:	eb63 0301 	sbc.w	r3, r3, r1
 8002054:	61fb      	str	r3, [r7, #28]
 8002056:	f04f 0200 	mov.w	r2, #0
 800205a:	f04f 0300 	mov.w	r3, #0
 800205e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002062:	4659      	mov	r1, fp
 8002064:	018b      	lsls	r3, r1, #6
 8002066:	4651      	mov	r1, sl
 8002068:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800206c:	4651      	mov	r1, sl
 800206e:	018a      	lsls	r2, r1, #6
 8002070:	4651      	mov	r1, sl
 8002072:	ebb2 0801 	subs.w	r8, r2, r1
 8002076:	4659      	mov	r1, fp
 8002078:	eb63 0901 	sbc.w	r9, r3, r1
 800207c:	f04f 0200 	mov.w	r2, #0
 8002080:	f04f 0300 	mov.w	r3, #0
 8002084:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002088:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800208c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002090:	4690      	mov	r8, r2
 8002092:	4699      	mov	r9, r3
 8002094:	4623      	mov	r3, r4
 8002096:	eb18 0303 	adds.w	r3, r8, r3
 800209a:	613b      	str	r3, [r7, #16]
 800209c:	462b      	mov	r3, r5
 800209e:	eb49 0303 	adc.w	r3, r9, r3
 80020a2:	617b      	str	r3, [r7, #20]
 80020a4:	f04f 0200 	mov.w	r2, #0
 80020a8:	f04f 0300 	mov.w	r3, #0
 80020ac:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80020b0:	4629      	mov	r1, r5
 80020b2:	024b      	lsls	r3, r1, #9
 80020b4:	4621      	mov	r1, r4
 80020b6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80020ba:	4621      	mov	r1, r4
 80020bc:	024a      	lsls	r2, r1, #9
 80020be:	4610      	mov	r0, r2
 80020c0:	4619      	mov	r1, r3
 80020c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80020c6:	2200      	movs	r2, #0
 80020c8:	65bb      	str	r3, [r7, #88]	; 0x58
 80020ca:	65fa      	str	r2, [r7, #92]	; 0x5c
 80020cc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80020d0:	f7fe f906 	bl	80002e0 <__aeabi_uldivmod>
 80020d4:	4602      	mov	r2, r0
 80020d6:	460b      	mov	r3, r1
 80020d8:	4613      	mov	r3, r2
 80020da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80020de:	e065      	b.n	80021ac <HAL_RCC_GetSysClockFreq+0x420>
 80020e0:	40023800 	.word	0x40023800
 80020e4:	00f42400 	.word	0x00f42400
 80020e8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020ec:	4b3d      	ldr	r3, [pc, #244]	; (80021e4 <HAL_RCC_GetSysClockFreq+0x458>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	099b      	lsrs	r3, r3, #6
 80020f2:	2200      	movs	r2, #0
 80020f4:	4618      	mov	r0, r3
 80020f6:	4611      	mov	r1, r2
 80020f8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80020fc:	653b      	str	r3, [r7, #80]	; 0x50
 80020fe:	2300      	movs	r3, #0
 8002100:	657b      	str	r3, [r7, #84]	; 0x54
 8002102:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002106:	4642      	mov	r2, r8
 8002108:	464b      	mov	r3, r9
 800210a:	f04f 0000 	mov.w	r0, #0
 800210e:	f04f 0100 	mov.w	r1, #0
 8002112:	0159      	lsls	r1, r3, #5
 8002114:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002118:	0150      	lsls	r0, r2, #5
 800211a:	4602      	mov	r2, r0
 800211c:	460b      	mov	r3, r1
 800211e:	4641      	mov	r1, r8
 8002120:	1a51      	subs	r1, r2, r1
 8002122:	60b9      	str	r1, [r7, #8]
 8002124:	4649      	mov	r1, r9
 8002126:	eb63 0301 	sbc.w	r3, r3, r1
 800212a:	60fb      	str	r3, [r7, #12]
 800212c:	f04f 0200 	mov.w	r2, #0
 8002130:	f04f 0300 	mov.w	r3, #0
 8002134:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002138:	4659      	mov	r1, fp
 800213a:	018b      	lsls	r3, r1, #6
 800213c:	4651      	mov	r1, sl
 800213e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002142:	4651      	mov	r1, sl
 8002144:	018a      	lsls	r2, r1, #6
 8002146:	4651      	mov	r1, sl
 8002148:	1a54      	subs	r4, r2, r1
 800214a:	4659      	mov	r1, fp
 800214c:	eb63 0501 	sbc.w	r5, r3, r1
 8002150:	f04f 0200 	mov.w	r2, #0
 8002154:	f04f 0300 	mov.w	r3, #0
 8002158:	00eb      	lsls	r3, r5, #3
 800215a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800215e:	00e2      	lsls	r2, r4, #3
 8002160:	4614      	mov	r4, r2
 8002162:	461d      	mov	r5, r3
 8002164:	4643      	mov	r3, r8
 8002166:	18e3      	adds	r3, r4, r3
 8002168:	603b      	str	r3, [r7, #0]
 800216a:	464b      	mov	r3, r9
 800216c:	eb45 0303 	adc.w	r3, r5, r3
 8002170:	607b      	str	r3, [r7, #4]
 8002172:	f04f 0200 	mov.w	r2, #0
 8002176:	f04f 0300 	mov.w	r3, #0
 800217a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800217e:	4629      	mov	r1, r5
 8002180:	028b      	lsls	r3, r1, #10
 8002182:	4621      	mov	r1, r4
 8002184:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002188:	4621      	mov	r1, r4
 800218a:	028a      	lsls	r2, r1, #10
 800218c:	4610      	mov	r0, r2
 800218e:	4619      	mov	r1, r3
 8002190:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002194:	2200      	movs	r2, #0
 8002196:	64bb      	str	r3, [r7, #72]	; 0x48
 8002198:	64fa      	str	r2, [r7, #76]	; 0x4c
 800219a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800219e:	f7fe f89f 	bl	80002e0 <__aeabi_uldivmod>
 80021a2:	4602      	mov	r2, r0
 80021a4:	460b      	mov	r3, r1
 80021a6:	4613      	mov	r3, r2
 80021a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80021ac:	4b0d      	ldr	r3, [pc, #52]	; (80021e4 <HAL_RCC_GetSysClockFreq+0x458>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	0f1b      	lsrs	r3, r3, #28
 80021b2:	f003 0307 	and.w	r3, r3, #7
 80021b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80021ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80021be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80021c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80021ca:	e003      	b.n	80021d4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021cc:	4b06      	ldr	r3, [pc, #24]	; (80021e8 <HAL_RCC_GetSysClockFreq+0x45c>)
 80021ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80021d2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021d4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80021d8:	4618      	mov	r0, r3
 80021da:	37b8      	adds	r7, #184	; 0xb8
 80021dc:	46bd      	mov	sp, r7
 80021de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021e2:	bf00      	nop
 80021e4:	40023800 	.word	0x40023800
 80021e8:	00f42400 	.word	0x00f42400

080021ec <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b086      	sub	sp, #24
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d101      	bne.n	80021fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e28d      	b.n	800271a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	2b00      	cmp	r3, #0
 8002208:	f000 8083 	beq.w	8002312 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800220c:	4b94      	ldr	r3, [pc, #592]	; (8002460 <HAL_RCC_OscConfig+0x274>)
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f003 030c 	and.w	r3, r3, #12
 8002214:	2b04      	cmp	r3, #4
 8002216:	d019      	beq.n	800224c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002218:	4b91      	ldr	r3, [pc, #580]	; (8002460 <HAL_RCC_OscConfig+0x274>)
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002220:	2b08      	cmp	r3, #8
 8002222:	d106      	bne.n	8002232 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002224:	4b8e      	ldr	r3, [pc, #568]	; (8002460 <HAL_RCC_OscConfig+0x274>)
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800222c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002230:	d00c      	beq.n	800224c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002232:	4b8b      	ldr	r3, [pc, #556]	; (8002460 <HAL_RCC_OscConfig+0x274>)
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800223a:	2b0c      	cmp	r3, #12
 800223c:	d112      	bne.n	8002264 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800223e:	4b88      	ldr	r3, [pc, #544]	; (8002460 <HAL_RCC_OscConfig+0x274>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002246:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800224a:	d10b      	bne.n	8002264 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800224c:	4b84      	ldr	r3, [pc, #528]	; (8002460 <HAL_RCC_OscConfig+0x274>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d05b      	beq.n	8002310 <HAL_RCC_OscConfig+0x124>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d157      	bne.n	8002310 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e25a      	b.n	800271a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800226c:	d106      	bne.n	800227c <HAL_RCC_OscConfig+0x90>
 800226e:	4b7c      	ldr	r3, [pc, #496]	; (8002460 <HAL_RCC_OscConfig+0x274>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a7b      	ldr	r2, [pc, #492]	; (8002460 <HAL_RCC_OscConfig+0x274>)
 8002274:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002278:	6013      	str	r3, [r2, #0]
 800227a:	e01d      	b.n	80022b8 <HAL_RCC_OscConfig+0xcc>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002284:	d10c      	bne.n	80022a0 <HAL_RCC_OscConfig+0xb4>
 8002286:	4b76      	ldr	r3, [pc, #472]	; (8002460 <HAL_RCC_OscConfig+0x274>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a75      	ldr	r2, [pc, #468]	; (8002460 <HAL_RCC_OscConfig+0x274>)
 800228c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002290:	6013      	str	r3, [r2, #0]
 8002292:	4b73      	ldr	r3, [pc, #460]	; (8002460 <HAL_RCC_OscConfig+0x274>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a72      	ldr	r2, [pc, #456]	; (8002460 <HAL_RCC_OscConfig+0x274>)
 8002298:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800229c:	6013      	str	r3, [r2, #0]
 800229e:	e00b      	b.n	80022b8 <HAL_RCC_OscConfig+0xcc>
 80022a0:	4b6f      	ldr	r3, [pc, #444]	; (8002460 <HAL_RCC_OscConfig+0x274>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a6e      	ldr	r2, [pc, #440]	; (8002460 <HAL_RCC_OscConfig+0x274>)
 80022a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022aa:	6013      	str	r3, [r2, #0]
 80022ac:	4b6c      	ldr	r3, [pc, #432]	; (8002460 <HAL_RCC_OscConfig+0x274>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a6b      	ldr	r2, [pc, #428]	; (8002460 <HAL_RCC_OscConfig+0x274>)
 80022b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d013      	beq.n	80022e8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c0:	f7ff f8ec 	bl	800149c <HAL_GetTick>
 80022c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022c6:	e008      	b.n	80022da <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022c8:	f7ff f8e8 	bl	800149c <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b64      	cmp	r3, #100	; 0x64
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e21f      	b.n	800271a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022da:	4b61      	ldr	r3, [pc, #388]	; (8002460 <HAL_RCC_OscConfig+0x274>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d0f0      	beq.n	80022c8 <HAL_RCC_OscConfig+0xdc>
 80022e6:	e014      	b.n	8002312 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e8:	f7ff f8d8 	bl	800149c <HAL_GetTick>
 80022ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ee:	e008      	b.n	8002302 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022f0:	f7ff f8d4 	bl	800149c <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b64      	cmp	r3, #100	; 0x64
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e20b      	b.n	800271a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002302:	4b57      	ldr	r3, [pc, #348]	; (8002460 <HAL_RCC_OscConfig+0x274>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1f0      	bne.n	80022f0 <HAL_RCC_OscConfig+0x104>
 800230e:	e000      	b.n	8002312 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002310:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	2b00      	cmp	r3, #0
 800231c:	d06f      	beq.n	80023fe <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800231e:	4b50      	ldr	r3, [pc, #320]	; (8002460 <HAL_RCC_OscConfig+0x274>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f003 030c 	and.w	r3, r3, #12
 8002326:	2b00      	cmp	r3, #0
 8002328:	d017      	beq.n	800235a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800232a:	4b4d      	ldr	r3, [pc, #308]	; (8002460 <HAL_RCC_OscConfig+0x274>)
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002332:	2b08      	cmp	r3, #8
 8002334:	d105      	bne.n	8002342 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002336:	4b4a      	ldr	r3, [pc, #296]	; (8002460 <HAL_RCC_OscConfig+0x274>)
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d00b      	beq.n	800235a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002342:	4b47      	ldr	r3, [pc, #284]	; (8002460 <HAL_RCC_OscConfig+0x274>)
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800234a:	2b0c      	cmp	r3, #12
 800234c:	d11c      	bne.n	8002388 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800234e:	4b44      	ldr	r3, [pc, #272]	; (8002460 <HAL_RCC_OscConfig+0x274>)
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d116      	bne.n	8002388 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800235a:	4b41      	ldr	r3, [pc, #260]	; (8002460 <HAL_RCC_OscConfig+0x274>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d005      	beq.n	8002372 <HAL_RCC_OscConfig+0x186>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d001      	beq.n	8002372 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e1d3      	b.n	800271a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002372:	4b3b      	ldr	r3, [pc, #236]	; (8002460 <HAL_RCC_OscConfig+0x274>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	4937      	ldr	r1, [pc, #220]	; (8002460 <HAL_RCC_OscConfig+0x274>)
 8002382:	4313      	orrs	r3, r2
 8002384:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002386:	e03a      	b.n	80023fe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d020      	beq.n	80023d2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002390:	4b34      	ldr	r3, [pc, #208]	; (8002464 <HAL_RCC_OscConfig+0x278>)
 8002392:	2201      	movs	r2, #1
 8002394:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002396:	f7ff f881 	bl	800149c <HAL_GetTick>
 800239a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800239c:	e008      	b.n	80023b0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800239e:	f7ff f87d 	bl	800149c <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d901      	bls.n	80023b0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e1b4      	b.n	800271a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023b0:	4b2b      	ldr	r3, [pc, #172]	; (8002460 <HAL_RCC_OscConfig+0x274>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0302 	and.w	r3, r3, #2
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d0f0      	beq.n	800239e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023bc:	4b28      	ldr	r3, [pc, #160]	; (8002460 <HAL_RCC_OscConfig+0x274>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	691b      	ldr	r3, [r3, #16]
 80023c8:	00db      	lsls	r3, r3, #3
 80023ca:	4925      	ldr	r1, [pc, #148]	; (8002460 <HAL_RCC_OscConfig+0x274>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	600b      	str	r3, [r1, #0]
 80023d0:	e015      	b.n	80023fe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023d2:	4b24      	ldr	r3, [pc, #144]	; (8002464 <HAL_RCC_OscConfig+0x278>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d8:	f7ff f860 	bl	800149c <HAL_GetTick>
 80023dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023de:	e008      	b.n	80023f2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023e0:	f7ff f85c 	bl	800149c <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e193      	b.n	800271a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023f2:	4b1b      	ldr	r3, [pc, #108]	; (8002460 <HAL_RCC_OscConfig+0x274>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1f0      	bne.n	80023e0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0308 	and.w	r3, r3, #8
 8002406:	2b00      	cmp	r3, #0
 8002408:	d036      	beq.n	8002478 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	695b      	ldr	r3, [r3, #20]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d016      	beq.n	8002440 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002412:	4b15      	ldr	r3, [pc, #84]	; (8002468 <HAL_RCC_OscConfig+0x27c>)
 8002414:	2201      	movs	r2, #1
 8002416:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002418:	f7ff f840 	bl	800149c <HAL_GetTick>
 800241c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002420:	f7ff f83c 	bl	800149c <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b02      	cmp	r3, #2
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e173      	b.n	800271a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002432:	4b0b      	ldr	r3, [pc, #44]	; (8002460 <HAL_RCC_OscConfig+0x274>)
 8002434:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d0f0      	beq.n	8002420 <HAL_RCC_OscConfig+0x234>
 800243e:	e01b      	b.n	8002478 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002440:	4b09      	ldr	r3, [pc, #36]	; (8002468 <HAL_RCC_OscConfig+0x27c>)
 8002442:	2200      	movs	r2, #0
 8002444:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002446:	f7ff f829 	bl	800149c <HAL_GetTick>
 800244a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800244c:	e00e      	b.n	800246c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800244e:	f7ff f825 	bl	800149c <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	2b02      	cmp	r3, #2
 800245a:	d907      	bls.n	800246c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e15c      	b.n	800271a <HAL_RCC_OscConfig+0x52e>
 8002460:	40023800 	.word	0x40023800
 8002464:	42470000 	.word	0x42470000
 8002468:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800246c:	4b8a      	ldr	r3, [pc, #552]	; (8002698 <HAL_RCC_OscConfig+0x4ac>)
 800246e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002470:	f003 0302 	and.w	r3, r3, #2
 8002474:	2b00      	cmp	r3, #0
 8002476:	d1ea      	bne.n	800244e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0304 	and.w	r3, r3, #4
 8002480:	2b00      	cmp	r3, #0
 8002482:	f000 8097 	beq.w	80025b4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002486:	2300      	movs	r3, #0
 8002488:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800248a:	4b83      	ldr	r3, [pc, #524]	; (8002698 <HAL_RCC_OscConfig+0x4ac>)
 800248c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d10f      	bne.n	80024b6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002496:	2300      	movs	r3, #0
 8002498:	60bb      	str	r3, [r7, #8]
 800249a:	4b7f      	ldr	r3, [pc, #508]	; (8002698 <HAL_RCC_OscConfig+0x4ac>)
 800249c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249e:	4a7e      	ldr	r2, [pc, #504]	; (8002698 <HAL_RCC_OscConfig+0x4ac>)
 80024a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024a4:	6413      	str	r3, [r2, #64]	; 0x40
 80024a6:	4b7c      	ldr	r3, [pc, #496]	; (8002698 <HAL_RCC_OscConfig+0x4ac>)
 80024a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ae:	60bb      	str	r3, [r7, #8]
 80024b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024b2:	2301      	movs	r3, #1
 80024b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024b6:	4b79      	ldr	r3, [pc, #484]	; (800269c <HAL_RCC_OscConfig+0x4b0>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d118      	bne.n	80024f4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024c2:	4b76      	ldr	r3, [pc, #472]	; (800269c <HAL_RCC_OscConfig+0x4b0>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a75      	ldr	r2, [pc, #468]	; (800269c <HAL_RCC_OscConfig+0x4b0>)
 80024c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024ce:	f7fe ffe5 	bl	800149c <HAL_GetTick>
 80024d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024d4:	e008      	b.n	80024e8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024d6:	f7fe ffe1 	bl	800149c <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d901      	bls.n	80024e8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e118      	b.n	800271a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024e8:	4b6c      	ldr	r3, [pc, #432]	; (800269c <HAL_RCC_OscConfig+0x4b0>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d0f0      	beq.n	80024d6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d106      	bne.n	800250a <HAL_RCC_OscConfig+0x31e>
 80024fc:	4b66      	ldr	r3, [pc, #408]	; (8002698 <HAL_RCC_OscConfig+0x4ac>)
 80024fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002500:	4a65      	ldr	r2, [pc, #404]	; (8002698 <HAL_RCC_OscConfig+0x4ac>)
 8002502:	f043 0301 	orr.w	r3, r3, #1
 8002506:	6713      	str	r3, [r2, #112]	; 0x70
 8002508:	e01c      	b.n	8002544 <HAL_RCC_OscConfig+0x358>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	2b05      	cmp	r3, #5
 8002510:	d10c      	bne.n	800252c <HAL_RCC_OscConfig+0x340>
 8002512:	4b61      	ldr	r3, [pc, #388]	; (8002698 <HAL_RCC_OscConfig+0x4ac>)
 8002514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002516:	4a60      	ldr	r2, [pc, #384]	; (8002698 <HAL_RCC_OscConfig+0x4ac>)
 8002518:	f043 0304 	orr.w	r3, r3, #4
 800251c:	6713      	str	r3, [r2, #112]	; 0x70
 800251e:	4b5e      	ldr	r3, [pc, #376]	; (8002698 <HAL_RCC_OscConfig+0x4ac>)
 8002520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002522:	4a5d      	ldr	r2, [pc, #372]	; (8002698 <HAL_RCC_OscConfig+0x4ac>)
 8002524:	f043 0301 	orr.w	r3, r3, #1
 8002528:	6713      	str	r3, [r2, #112]	; 0x70
 800252a:	e00b      	b.n	8002544 <HAL_RCC_OscConfig+0x358>
 800252c:	4b5a      	ldr	r3, [pc, #360]	; (8002698 <HAL_RCC_OscConfig+0x4ac>)
 800252e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002530:	4a59      	ldr	r2, [pc, #356]	; (8002698 <HAL_RCC_OscConfig+0x4ac>)
 8002532:	f023 0301 	bic.w	r3, r3, #1
 8002536:	6713      	str	r3, [r2, #112]	; 0x70
 8002538:	4b57      	ldr	r3, [pc, #348]	; (8002698 <HAL_RCC_OscConfig+0x4ac>)
 800253a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800253c:	4a56      	ldr	r2, [pc, #344]	; (8002698 <HAL_RCC_OscConfig+0x4ac>)
 800253e:	f023 0304 	bic.w	r3, r3, #4
 8002542:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d015      	beq.n	8002578 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800254c:	f7fe ffa6 	bl	800149c <HAL_GetTick>
 8002550:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002552:	e00a      	b.n	800256a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002554:	f7fe ffa2 	bl	800149c <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002562:	4293      	cmp	r3, r2
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e0d7      	b.n	800271a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800256a:	4b4b      	ldr	r3, [pc, #300]	; (8002698 <HAL_RCC_OscConfig+0x4ac>)
 800256c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800256e:	f003 0302 	and.w	r3, r3, #2
 8002572:	2b00      	cmp	r3, #0
 8002574:	d0ee      	beq.n	8002554 <HAL_RCC_OscConfig+0x368>
 8002576:	e014      	b.n	80025a2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002578:	f7fe ff90 	bl	800149c <HAL_GetTick>
 800257c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800257e:	e00a      	b.n	8002596 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002580:	f7fe ff8c 	bl	800149c <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	f241 3288 	movw	r2, #5000	; 0x1388
 800258e:	4293      	cmp	r3, r2
 8002590:	d901      	bls.n	8002596 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e0c1      	b.n	800271a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002596:	4b40      	ldr	r3, [pc, #256]	; (8002698 <HAL_RCC_OscConfig+0x4ac>)
 8002598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800259a:	f003 0302 	and.w	r3, r3, #2
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d1ee      	bne.n	8002580 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025a2:	7dfb      	ldrb	r3, [r7, #23]
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d105      	bne.n	80025b4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025a8:	4b3b      	ldr	r3, [pc, #236]	; (8002698 <HAL_RCC_OscConfig+0x4ac>)
 80025aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ac:	4a3a      	ldr	r2, [pc, #232]	; (8002698 <HAL_RCC_OscConfig+0x4ac>)
 80025ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	f000 80ad 	beq.w	8002718 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025be:	4b36      	ldr	r3, [pc, #216]	; (8002698 <HAL_RCC_OscConfig+0x4ac>)
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f003 030c 	and.w	r3, r3, #12
 80025c6:	2b08      	cmp	r3, #8
 80025c8:	d060      	beq.n	800268c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	699b      	ldr	r3, [r3, #24]
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d145      	bne.n	800265e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025d2:	4b33      	ldr	r3, [pc, #204]	; (80026a0 <HAL_RCC_OscConfig+0x4b4>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d8:	f7fe ff60 	bl	800149c <HAL_GetTick>
 80025dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025de:	e008      	b.n	80025f2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025e0:	f7fe ff5c 	bl	800149c <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e093      	b.n	800271a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025f2:	4b29      	ldr	r3, [pc, #164]	; (8002698 <HAL_RCC_OscConfig+0x4ac>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d1f0      	bne.n	80025e0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	69da      	ldr	r2, [r3, #28]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a1b      	ldr	r3, [r3, #32]
 8002606:	431a      	orrs	r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260c:	019b      	lsls	r3, r3, #6
 800260e:	431a      	orrs	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002614:	085b      	lsrs	r3, r3, #1
 8002616:	3b01      	subs	r3, #1
 8002618:	041b      	lsls	r3, r3, #16
 800261a:	431a      	orrs	r2, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002620:	061b      	lsls	r3, r3, #24
 8002622:	431a      	orrs	r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002628:	071b      	lsls	r3, r3, #28
 800262a:	491b      	ldr	r1, [pc, #108]	; (8002698 <HAL_RCC_OscConfig+0x4ac>)
 800262c:	4313      	orrs	r3, r2
 800262e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002630:	4b1b      	ldr	r3, [pc, #108]	; (80026a0 <HAL_RCC_OscConfig+0x4b4>)
 8002632:	2201      	movs	r2, #1
 8002634:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002636:	f7fe ff31 	bl	800149c <HAL_GetTick>
 800263a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800263c:	e008      	b.n	8002650 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800263e:	f7fe ff2d 	bl	800149c <HAL_GetTick>
 8002642:	4602      	mov	r2, r0
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	2b02      	cmp	r3, #2
 800264a:	d901      	bls.n	8002650 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e064      	b.n	800271a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002650:	4b11      	ldr	r3, [pc, #68]	; (8002698 <HAL_RCC_OscConfig+0x4ac>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d0f0      	beq.n	800263e <HAL_RCC_OscConfig+0x452>
 800265c:	e05c      	b.n	8002718 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800265e:	4b10      	ldr	r3, [pc, #64]	; (80026a0 <HAL_RCC_OscConfig+0x4b4>)
 8002660:	2200      	movs	r2, #0
 8002662:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002664:	f7fe ff1a 	bl	800149c <HAL_GetTick>
 8002668:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800266a:	e008      	b.n	800267e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800266c:	f7fe ff16 	bl	800149c <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	2b02      	cmp	r3, #2
 8002678:	d901      	bls.n	800267e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e04d      	b.n	800271a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800267e:	4b06      	ldr	r3, [pc, #24]	; (8002698 <HAL_RCC_OscConfig+0x4ac>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d1f0      	bne.n	800266c <HAL_RCC_OscConfig+0x480>
 800268a:	e045      	b.n	8002718 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	699b      	ldr	r3, [r3, #24]
 8002690:	2b01      	cmp	r3, #1
 8002692:	d107      	bne.n	80026a4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e040      	b.n	800271a <HAL_RCC_OscConfig+0x52e>
 8002698:	40023800 	.word	0x40023800
 800269c:	40007000 	.word	0x40007000
 80026a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80026a4:	4b1f      	ldr	r3, [pc, #124]	; (8002724 <HAL_RCC_OscConfig+0x538>)
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	699b      	ldr	r3, [r3, #24]
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d030      	beq.n	8002714 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026bc:	429a      	cmp	r2, r3
 80026be:	d129      	bne.n	8002714 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d122      	bne.n	8002714 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026ce:	68fa      	ldr	r2, [r7, #12]
 80026d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80026d4:	4013      	ands	r3, r2
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80026da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026dc:	4293      	cmp	r3, r2
 80026de:	d119      	bne.n	8002714 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ea:	085b      	lsrs	r3, r3, #1
 80026ec:	3b01      	subs	r3, #1
 80026ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d10f      	bne.n	8002714 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002700:	429a      	cmp	r2, r3
 8002702:	d107      	bne.n	8002714 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002710:	429a      	cmp	r2, r3
 8002712:	d001      	beq.n	8002718 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e000      	b.n	800271a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	3718      	adds	r7, #24
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	40023800 	.word	0x40023800

08002728 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d101      	bne.n	800273a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e041      	b.n	80027be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002740:	b2db      	uxtb	r3, r3
 8002742:	2b00      	cmp	r3, #0
 8002744:	d106      	bne.n	8002754 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f7fe fc42 	bl	8000fd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2202      	movs	r2, #2
 8002758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	3304      	adds	r3, #4
 8002764:	4619      	mov	r1, r3
 8002766:	4610      	mov	r0, r2
 8002768:	f000 fd14 	bl	8003194 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2201      	movs	r2, #1
 8002790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2201      	movs	r2, #1
 8002798:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b082      	sub	sp, #8
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d101      	bne.n	80027d8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e041      	b.n	800285c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d106      	bne.n	80027f2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f000 f839 	bl	8002864 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2202      	movs	r2, #2
 80027f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	3304      	adds	r3, #4
 8002802:	4619      	mov	r1, r3
 8002804:	4610      	mov	r0, r2
 8002806:	f000 fcc5 	bl	8003194 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2201      	movs	r2, #1
 800280e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2201      	movs	r2, #1
 8002816:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2201      	movs	r2, #1
 800281e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2201      	movs	r2, #1
 8002826:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2201      	movs	r2, #1
 800282e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2201      	movs	r2, #1
 8002836:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2201      	movs	r2, #1
 800283e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2201      	movs	r2, #1
 8002846:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2201      	movs	r2, #1
 800284e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2201      	movs	r2, #1
 8002856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800285a:	2300      	movs	r3, #0
}
 800285c:	4618      	mov	r0, r3
 800285e:	3708      	adds	r7, #8
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800286c:	bf00      	nop
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr

08002878 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002882:	2300      	movs	r3, #0
 8002884:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d109      	bne.n	80028a0 <HAL_TIM_PWM_Start_IT+0x28>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002892:	b2db      	uxtb	r3, r3
 8002894:	2b01      	cmp	r3, #1
 8002896:	bf14      	ite	ne
 8002898:	2301      	movne	r3, #1
 800289a:	2300      	moveq	r3, #0
 800289c:	b2db      	uxtb	r3, r3
 800289e:	e022      	b.n	80028e6 <HAL_TIM_PWM_Start_IT+0x6e>
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	2b04      	cmp	r3, #4
 80028a4:	d109      	bne.n	80028ba <HAL_TIM_PWM_Start_IT+0x42>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	bf14      	ite	ne
 80028b2:	2301      	movne	r3, #1
 80028b4:	2300      	moveq	r3, #0
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	e015      	b.n	80028e6 <HAL_TIM_PWM_Start_IT+0x6e>
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	2b08      	cmp	r3, #8
 80028be:	d109      	bne.n	80028d4 <HAL_TIM_PWM_Start_IT+0x5c>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	bf14      	ite	ne
 80028cc:	2301      	movne	r3, #1
 80028ce:	2300      	moveq	r3, #0
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	e008      	b.n	80028e6 <HAL_TIM_PWM_Start_IT+0x6e>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	2b01      	cmp	r3, #1
 80028de:	bf14      	ite	ne
 80028e0:	2301      	movne	r3, #1
 80028e2:	2300      	moveq	r3, #0
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d001      	beq.n	80028ee <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e0c7      	b.n	8002a7e <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d104      	bne.n	80028fe <HAL_TIM_PWM_Start_IT+0x86>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2202      	movs	r2, #2
 80028f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028fc:	e013      	b.n	8002926 <HAL_TIM_PWM_Start_IT+0xae>
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	2b04      	cmp	r3, #4
 8002902:	d104      	bne.n	800290e <HAL_TIM_PWM_Start_IT+0x96>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2202      	movs	r2, #2
 8002908:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800290c:	e00b      	b.n	8002926 <HAL_TIM_PWM_Start_IT+0xae>
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	2b08      	cmp	r3, #8
 8002912:	d104      	bne.n	800291e <HAL_TIM_PWM_Start_IT+0xa6>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2202      	movs	r2, #2
 8002918:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800291c:	e003      	b.n	8002926 <HAL_TIM_PWM_Start_IT+0xae>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2202      	movs	r2, #2
 8002922:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	2b0c      	cmp	r3, #12
 800292a:	d841      	bhi.n	80029b0 <HAL_TIM_PWM_Start_IT+0x138>
 800292c:	a201      	add	r2, pc, #4	; (adr r2, 8002934 <HAL_TIM_PWM_Start_IT+0xbc>)
 800292e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002932:	bf00      	nop
 8002934:	08002969 	.word	0x08002969
 8002938:	080029b1 	.word	0x080029b1
 800293c:	080029b1 	.word	0x080029b1
 8002940:	080029b1 	.word	0x080029b1
 8002944:	0800297b 	.word	0x0800297b
 8002948:	080029b1 	.word	0x080029b1
 800294c:	080029b1 	.word	0x080029b1
 8002950:	080029b1 	.word	0x080029b1
 8002954:	0800298d 	.word	0x0800298d
 8002958:	080029b1 	.word	0x080029b1
 800295c:	080029b1 	.word	0x080029b1
 8002960:	080029b1 	.word	0x080029b1
 8002964:	0800299f 	.word	0x0800299f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	68da      	ldr	r2, [r3, #12]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f042 0202 	orr.w	r2, r2, #2
 8002976:	60da      	str	r2, [r3, #12]
      break;
 8002978:	e01d      	b.n	80029b6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	68da      	ldr	r2, [r3, #12]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f042 0204 	orr.w	r2, r2, #4
 8002988:	60da      	str	r2, [r3, #12]
      break;
 800298a:	e014      	b.n	80029b6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	68da      	ldr	r2, [r3, #12]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f042 0208 	orr.w	r2, r2, #8
 800299a:	60da      	str	r2, [r3, #12]
      break;
 800299c:	e00b      	b.n	80029b6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	68da      	ldr	r2, [r3, #12]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f042 0210 	orr.w	r2, r2, #16
 80029ac:	60da      	str	r2, [r3, #12]
      break;
 80029ae:	e002      	b.n	80029b6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	73fb      	strb	r3, [r7, #15]
      break;
 80029b4:	bf00      	nop
  }

  if (status == HAL_OK)
 80029b6:	7bfb      	ldrb	r3, [r7, #15]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d15f      	bne.n	8002a7c <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2201      	movs	r2, #1
 80029c2:	6839      	ldr	r1, [r7, #0]
 80029c4:	4618      	mov	r0, r3
 80029c6:	f000 fecf 	bl	8003768 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a2e      	ldr	r2, [pc, #184]	; (8002a88 <HAL_TIM_PWM_Start_IT+0x210>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d004      	beq.n	80029de <HAL_TIM_PWM_Start_IT+0x166>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a2c      	ldr	r2, [pc, #176]	; (8002a8c <HAL_TIM_PWM_Start_IT+0x214>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d101      	bne.n	80029e2 <HAL_TIM_PWM_Start_IT+0x16a>
 80029de:	2301      	movs	r3, #1
 80029e0:	e000      	b.n	80029e4 <HAL_TIM_PWM_Start_IT+0x16c>
 80029e2:	2300      	movs	r3, #0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d007      	beq.n	80029f8 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029f6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a22      	ldr	r2, [pc, #136]	; (8002a88 <HAL_TIM_PWM_Start_IT+0x210>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d022      	beq.n	8002a48 <HAL_TIM_PWM_Start_IT+0x1d0>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a0a:	d01d      	beq.n	8002a48 <HAL_TIM_PWM_Start_IT+0x1d0>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a1f      	ldr	r2, [pc, #124]	; (8002a90 <HAL_TIM_PWM_Start_IT+0x218>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d018      	beq.n	8002a48 <HAL_TIM_PWM_Start_IT+0x1d0>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a1e      	ldr	r2, [pc, #120]	; (8002a94 <HAL_TIM_PWM_Start_IT+0x21c>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d013      	beq.n	8002a48 <HAL_TIM_PWM_Start_IT+0x1d0>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a1c      	ldr	r2, [pc, #112]	; (8002a98 <HAL_TIM_PWM_Start_IT+0x220>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d00e      	beq.n	8002a48 <HAL_TIM_PWM_Start_IT+0x1d0>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a17      	ldr	r2, [pc, #92]	; (8002a8c <HAL_TIM_PWM_Start_IT+0x214>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d009      	beq.n	8002a48 <HAL_TIM_PWM_Start_IT+0x1d0>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a18      	ldr	r2, [pc, #96]	; (8002a9c <HAL_TIM_PWM_Start_IT+0x224>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d004      	beq.n	8002a48 <HAL_TIM_PWM_Start_IT+0x1d0>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a17      	ldr	r2, [pc, #92]	; (8002aa0 <HAL_TIM_PWM_Start_IT+0x228>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d111      	bne.n	8002a6c <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f003 0307 	and.w	r3, r3, #7
 8002a52:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	2b06      	cmp	r3, #6
 8002a58:	d010      	beq.n	8002a7c <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f042 0201 	orr.w	r2, r2, #1
 8002a68:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a6a:	e007      	b.n	8002a7c <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f042 0201 	orr.w	r2, r2, #1
 8002a7a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3710      	adds	r7, #16
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	40010000 	.word	0x40010000
 8002a8c:	40010400 	.word	0x40010400
 8002a90:	40000400 	.word	0x40000400
 8002a94:	40000800 	.word	0x40000800
 8002a98:	40000c00 	.word	0x40000c00
 8002a9c:	40014000 	.word	0x40014000
 8002aa0:	40001800 	.word	0x40001800

08002aa4 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	2b0c      	cmp	r3, #12
 8002ab6:	d841      	bhi.n	8002b3c <HAL_TIM_PWM_Stop_IT+0x98>
 8002ab8:	a201      	add	r2, pc, #4	; (adr r2, 8002ac0 <HAL_TIM_PWM_Stop_IT+0x1c>)
 8002aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002abe:	bf00      	nop
 8002ac0:	08002af5 	.word	0x08002af5
 8002ac4:	08002b3d 	.word	0x08002b3d
 8002ac8:	08002b3d 	.word	0x08002b3d
 8002acc:	08002b3d 	.word	0x08002b3d
 8002ad0:	08002b07 	.word	0x08002b07
 8002ad4:	08002b3d 	.word	0x08002b3d
 8002ad8:	08002b3d 	.word	0x08002b3d
 8002adc:	08002b3d 	.word	0x08002b3d
 8002ae0:	08002b19 	.word	0x08002b19
 8002ae4:	08002b3d 	.word	0x08002b3d
 8002ae8:	08002b3d 	.word	0x08002b3d
 8002aec:	08002b3d 	.word	0x08002b3d
 8002af0:	08002b2b 	.word	0x08002b2b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	68da      	ldr	r2, [r3, #12]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f022 0202 	bic.w	r2, r2, #2
 8002b02:	60da      	str	r2, [r3, #12]
      break;
 8002b04:	e01d      	b.n	8002b42 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	68da      	ldr	r2, [r3, #12]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f022 0204 	bic.w	r2, r2, #4
 8002b14:	60da      	str	r2, [r3, #12]
      break;
 8002b16:	e014      	b.n	8002b42 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	68da      	ldr	r2, [r3, #12]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f022 0208 	bic.w	r2, r2, #8
 8002b26:	60da      	str	r2, [r3, #12]
      break;
 8002b28:	e00b      	b.n	8002b42 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	68da      	ldr	r2, [r3, #12]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f022 0210 	bic.w	r2, r2, #16
 8002b38:	60da      	str	r2, [r3, #12]
      break;
 8002b3a:	e002      	b.n	8002b42 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	73fb      	strb	r3, [r7, #15]
      break;
 8002b40:	bf00      	nop
  }

  if (status == HAL_OK)
 8002b42:	7bfb      	ldrb	r3, [r7, #15]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d161      	bne.n	8002c0c <HAL_TIM_PWM_Stop_IT+0x168>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	6839      	ldr	r1, [r7, #0]
 8002b50:	4618      	mov	r0, r3
 8002b52:	f000 fe09 	bl	8003768 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a2f      	ldr	r2, [pc, #188]	; (8002c18 <HAL_TIM_PWM_Stop_IT+0x174>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d004      	beq.n	8002b6a <HAL_TIM_PWM_Stop_IT+0xc6>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a2d      	ldr	r2, [pc, #180]	; (8002c1c <HAL_TIM_PWM_Stop_IT+0x178>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d101      	bne.n	8002b6e <HAL_TIM_PWM_Stop_IT+0xca>
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e000      	b.n	8002b70 <HAL_TIM_PWM_Stop_IT+0xcc>
 8002b6e:	2300      	movs	r3, #0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d017      	beq.n	8002ba4 <HAL_TIM_PWM_Stop_IT+0x100>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	6a1a      	ldr	r2, [r3, #32]
 8002b7a:	f241 1311 	movw	r3, #4369	; 0x1111
 8002b7e:	4013      	ands	r3, r2
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d10f      	bne.n	8002ba4 <HAL_TIM_PWM_Stop_IT+0x100>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	6a1a      	ldr	r2, [r3, #32]
 8002b8a:	f240 4344 	movw	r3, #1092	; 0x444
 8002b8e:	4013      	ands	r3, r2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d107      	bne.n	8002ba4 <HAL_TIM_PWM_Stop_IT+0x100>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ba2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	6a1a      	ldr	r2, [r3, #32]
 8002baa:	f241 1311 	movw	r3, #4369	; 0x1111
 8002bae:	4013      	ands	r3, r2
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d10f      	bne.n	8002bd4 <HAL_TIM_PWM_Stop_IT+0x130>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	6a1a      	ldr	r2, [r3, #32]
 8002bba:	f240 4344 	movw	r3, #1092	; 0x444
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d107      	bne.n	8002bd4 <HAL_TIM_PWM_Stop_IT+0x130>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f022 0201 	bic.w	r2, r2, #1
 8002bd2:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d104      	bne.n	8002be4 <HAL_TIM_PWM_Stop_IT+0x140>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002be2:	e013      	b.n	8002c0c <HAL_TIM_PWM_Stop_IT+0x168>
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	2b04      	cmp	r3, #4
 8002be8:	d104      	bne.n	8002bf4 <HAL_TIM_PWM_Stop_IT+0x150>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2201      	movs	r2, #1
 8002bee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bf2:	e00b      	b.n	8002c0c <HAL_TIM_PWM_Stop_IT+0x168>
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	2b08      	cmp	r3, #8
 8002bf8:	d104      	bne.n	8002c04 <HAL_TIM_PWM_Stop_IT+0x160>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c02:	e003      	b.n	8002c0c <HAL_TIM_PWM_Stop_IT+0x168>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8002c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3710      	adds	r7, #16
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	40010000 	.word	0x40010000
 8002c1c:	40010400 	.word	0x40010400

08002c20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	f003 0302 	and.w	r3, r3, #2
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d122      	bne.n	8002c7c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	f003 0302 	and.w	r3, r3, #2
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d11b      	bne.n	8002c7c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f06f 0202 	mvn.w	r2, #2
 8002c4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2201      	movs	r2, #1
 8002c52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	699b      	ldr	r3, [r3, #24]
 8002c5a:	f003 0303 	and.w	r3, r3, #3
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d003      	beq.n	8002c6a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f000 fa81 	bl	800316a <HAL_TIM_IC_CaptureCallback>
 8002c68:	e005      	b.n	8002c76 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f000 fa73 	bl	8003156 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f7fe f889 	bl	8000d88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	691b      	ldr	r3, [r3, #16]
 8002c82:	f003 0304 	and.w	r3, r3, #4
 8002c86:	2b04      	cmp	r3, #4
 8002c88:	d122      	bne.n	8002cd0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	f003 0304 	and.w	r3, r3, #4
 8002c94:	2b04      	cmp	r3, #4
 8002c96:	d11b      	bne.n	8002cd0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f06f 0204 	mvn.w	r2, #4
 8002ca0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2202      	movs	r2, #2
 8002ca6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	699b      	ldr	r3, [r3, #24]
 8002cae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d003      	beq.n	8002cbe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 fa57 	bl	800316a <HAL_TIM_IC_CaptureCallback>
 8002cbc:	e005      	b.n	8002cca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f000 fa49 	bl	8003156 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f7fe f85f 	bl	8000d88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	f003 0308 	and.w	r3, r3, #8
 8002cda:	2b08      	cmp	r3, #8
 8002cdc:	d122      	bne.n	8002d24 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	f003 0308 	and.w	r3, r3, #8
 8002ce8:	2b08      	cmp	r3, #8
 8002cea:	d11b      	bne.n	8002d24 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f06f 0208 	mvn.w	r2, #8
 8002cf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2204      	movs	r2, #4
 8002cfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	69db      	ldr	r3, [r3, #28]
 8002d02:	f003 0303 	and.w	r3, r3, #3
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d003      	beq.n	8002d12 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 fa2d 	bl	800316a <HAL_TIM_IC_CaptureCallback>
 8002d10:	e005      	b.n	8002d1e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f000 fa1f 	bl	8003156 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f7fe f835 	bl	8000d88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	f003 0310 	and.w	r3, r3, #16
 8002d2e:	2b10      	cmp	r3, #16
 8002d30:	d122      	bne.n	8002d78 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	f003 0310 	and.w	r3, r3, #16
 8002d3c:	2b10      	cmp	r3, #16
 8002d3e:	d11b      	bne.n	8002d78 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f06f 0210 	mvn.w	r2, #16
 8002d48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2208      	movs	r2, #8
 8002d4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	69db      	ldr	r3, [r3, #28]
 8002d56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d003      	beq.n	8002d66 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 fa03 	bl	800316a <HAL_TIM_IC_CaptureCallback>
 8002d64:	e005      	b.n	8002d72 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 f9f5 	bl	8003156 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f7fe f80b 	bl	8000d88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d10e      	bne.n	8002da4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	f003 0301 	and.w	r3, r3, #1
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d107      	bne.n	8002da4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f06f 0201 	mvn.w	r2, #1
 8002d9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f000 f9cf 	bl	8003142 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	691b      	ldr	r3, [r3, #16]
 8002daa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dae:	2b80      	cmp	r3, #128	; 0x80
 8002db0:	d10e      	bne.n	8002dd0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dbc:	2b80      	cmp	r3, #128	; 0x80
 8002dbe:	d107      	bne.n	8002dd0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002dc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f000 fd78 	bl	80038c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	691b      	ldr	r3, [r3, #16]
 8002dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dda:	2b40      	cmp	r3, #64	; 0x40
 8002ddc:	d10e      	bne.n	8002dfc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002de8:	2b40      	cmp	r3, #64	; 0x40
 8002dea:	d107      	bne.n	8002dfc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002df4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f000 f9c1 	bl	800317e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	f003 0320 	and.w	r3, r3, #32
 8002e06:	2b20      	cmp	r3, #32
 8002e08:	d10e      	bne.n	8002e28 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	f003 0320 	and.w	r3, r3, #32
 8002e14:	2b20      	cmp	r3, #32
 8002e16:	d107      	bne.n	8002e28 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f06f 0220 	mvn.w	r2, #32
 8002e20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f000 fd42 	bl	80038ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e28:	bf00      	nop
 8002e2a:	3708      	adds	r7, #8
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b086      	sub	sp, #24
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d101      	bne.n	8002e4e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002e4a:	2302      	movs	r3, #2
 8002e4c:	e0ae      	b.n	8002fac <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2201      	movs	r2, #1
 8002e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2b0c      	cmp	r3, #12
 8002e5a:	f200 809f 	bhi.w	8002f9c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002e5e:	a201      	add	r2, pc, #4	; (adr r2, 8002e64 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e64:	08002e99 	.word	0x08002e99
 8002e68:	08002f9d 	.word	0x08002f9d
 8002e6c:	08002f9d 	.word	0x08002f9d
 8002e70:	08002f9d 	.word	0x08002f9d
 8002e74:	08002ed9 	.word	0x08002ed9
 8002e78:	08002f9d 	.word	0x08002f9d
 8002e7c:	08002f9d 	.word	0x08002f9d
 8002e80:	08002f9d 	.word	0x08002f9d
 8002e84:	08002f1b 	.word	0x08002f1b
 8002e88:	08002f9d 	.word	0x08002f9d
 8002e8c:	08002f9d 	.word	0x08002f9d
 8002e90:	08002f9d 	.word	0x08002f9d
 8002e94:	08002f5b 	.word	0x08002f5b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	68b9      	ldr	r1, [r7, #8]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f000 fa18 	bl	80032d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	699a      	ldr	r2, [r3, #24]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f042 0208 	orr.w	r2, r2, #8
 8002eb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	699a      	ldr	r2, [r3, #24]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f022 0204 	bic.w	r2, r2, #4
 8002ec2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	6999      	ldr	r1, [r3, #24]
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	691a      	ldr	r2, [r3, #16]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	619a      	str	r2, [r3, #24]
      break;
 8002ed6:	e064      	b.n	8002fa2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	68b9      	ldr	r1, [r7, #8]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f000 fa68 	bl	80033b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	699a      	ldr	r2, [r3, #24]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ef2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	699a      	ldr	r2, [r3, #24]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	6999      	ldr	r1, [r3, #24]
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	691b      	ldr	r3, [r3, #16]
 8002f0e:	021a      	lsls	r2, r3, #8
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	430a      	orrs	r2, r1
 8002f16:	619a      	str	r2, [r3, #24]
      break;
 8002f18:	e043      	b.n	8002fa2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68b9      	ldr	r1, [r7, #8]
 8002f20:	4618      	mov	r0, r3
 8002f22:	f000 fabd 	bl	80034a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	69da      	ldr	r2, [r3, #28]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f042 0208 	orr.w	r2, r2, #8
 8002f34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	69da      	ldr	r2, [r3, #28]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f022 0204 	bic.w	r2, r2, #4
 8002f44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	69d9      	ldr	r1, [r3, #28]
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	691a      	ldr	r2, [r3, #16]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	430a      	orrs	r2, r1
 8002f56:	61da      	str	r2, [r3, #28]
      break;
 8002f58:	e023      	b.n	8002fa2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68b9      	ldr	r1, [r7, #8]
 8002f60:	4618      	mov	r0, r3
 8002f62:	f000 fb11 	bl	8003588 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	69da      	ldr	r2, [r3, #28]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	69da      	ldr	r2, [r3, #28]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	69d9      	ldr	r1, [r3, #28]
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	691b      	ldr	r3, [r3, #16]
 8002f90:	021a      	lsls	r2, r3, #8
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	430a      	orrs	r2, r1
 8002f98:	61da      	str	r2, [r3, #28]
      break;
 8002f9a:	e002      	b.n	8002fa2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	75fb      	strb	r3, [r7, #23]
      break;
 8002fa0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002faa:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3718      	adds	r7, #24
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d101      	bne.n	8002fd0 <HAL_TIM_ConfigClockSource+0x1c>
 8002fcc:	2302      	movs	r3, #2
 8002fce:	e0b4      	b.n	800313a <HAL_TIM_ConfigClockSource+0x186>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2202      	movs	r2, #2
 8002fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002fee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ff6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	68ba      	ldr	r2, [r7, #8]
 8002ffe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003008:	d03e      	beq.n	8003088 <HAL_TIM_ConfigClockSource+0xd4>
 800300a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800300e:	f200 8087 	bhi.w	8003120 <HAL_TIM_ConfigClockSource+0x16c>
 8003012:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003016:	f000 8086 	beq.w	8003126 <HAL_TIM_ConfigClockSource+0x172>
 800301a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800301e:	d87f      	bhi.n	8003120 <HAL_TIM_ConfigClockSource+0x16c>
 8003020:	2b70      	cmp	r3, #112	; 0x70
 8003022:	d01a      	beq.n	800305a <HAL_TIM_ConfigClockSource+0xa6>
 8003024:	2b70      	cmp	r3, #112	; 0x70
 8003026:	d87b      	bhi.n	8003120 <HAL_TIM_ConfigClockSource+0x16c>
 8003028:	2b60      	cmp	r3, #96	; 0x60
 800302a:	d050      	beq.n	80030ce <HAL_TIM_ConfigClockSource+0x11a>
 800302c:	2b60      	cmp	r3, #96	; 0x60
 800302e:	d877      	bhi.n	8003120 <HAL_TIM_ConfigClockSource+0x16c>
 8003030:	2b50      	cmp	r3, #80	; 0x50
 8003032:	d03c      	beq.n	80030ae <HAL_TIM_ConfigClockSource+0xfa>
 8003034:	2b50      	cmp	r3, #80	; 0x50
 8003036:	d873      	bhi.n	8003120 <HAL_TIM_ConfigClockSource+0x16c>
 8003038:	2b40      	cmp	r3, #64	; 0x40
 800303a:	d058      	beq.n	80030ee <HAL_TIM_ConfigClockSource+0x13a>
 800303c:	2b40      	cmp	r3, #64	; 0x40
 800303e:	d86f      	bhi.n	8003120 <HAL_TIM_ConfigClockSource+0x16c>
 8003040:	2b30      	cmp	r3, #48	; 0x30
 8003042:	d064      	beq.n	800310e <HAL_TIM_ConfigClockSource+0x15a>
 8003044:	2b30      	cmp	r3, #48	; 0x30
 8003046:	d86b      	bhi.n	8003120 <HAL_TIM_ConfigClockSource+0x16c>
 8003048:	2b20      	cmp	r3, #32
 800304a:	d060      	beq.n	800310e <HAL_TIM_ConfigClockSource+0x15a>
 800304c:	2b20      	cmp	r3, #32
 800304e:	d867      	bhi.n	8003120 <HAL_TIM_ConfigClockSource+0x16c>
 8003050:	2b00      	cmp	r3, #0
 8003052:	d05c      	beq.n	800310e <HAL_TIM_ConfigClockSource+0x15a>
 8003054:	2b10      	cmp	r3, #16
 8003056:	d05a      	beq.n	800310e <HAL_TIM_ConfigClockSource+0x15a>
 8003058:	e062      	b.n	8003120 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6818      	ldr	r0, [r3, #0]
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	6899      	ldr	r1, [r3, #8]
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	685a      	ldr	r2, [r3, #4]
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	f000 fb5d 	bl	8003728 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800307c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	68ba      	ldr	r2, [r7, #8]
 8003084:	609a      	str	r2, [r3, #8]
      break;
 8003086:	e04f      	b.n	8003128 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6818      	ldr	r0, [r3, #0]
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	6899      	ldr	r1, [r3, #8]
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	685a      	ldr	r2, [r3, #4]
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	f000 fb46 	bl	8003728 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	689a      	ldr	r2, [r3, #8]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030aa:	609a      	str	r2, [r3, #8]
      break;
 80030ac:	e03c      	b.n	8003128 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6818      	ldr	r0, [r3, #0]
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	6859      	ldr	r1, [r3, #4]
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	461a      	mov	r2, r3
 80030bc:	f000 faba 	bl	8003634 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2150      	movs	r1, #80	; 0x50
 80030c6:	4618      	mov	r0, r3
 80030c8:	f000 fb13 	bl	80036f2 <TIM_ITRx_SetConfig>
      break;
 80030cc:	e02c      	b.n	8003128 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6818      	ldr	r0, [r3, #0]
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	6859      	ldr	r1, [r3, #4]
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	461a      	mov	r2, r3
 80030dc:	f000 fad9 	bl	8003692 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2160      	movs	r1, #96	; 0x60
 80030e6:	4618      	mov	r0, r3
 80030e8:	f000 fb03 	bl	80036f2 <TIM_ITRx_SetConfig>
      break;
 80030ec:	e01c      	b.n	8003128 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6818      	ldr	r0, [r3, #0]
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	6859      	ldr	r1, [r3, #4]
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	461a      	mov	r2, r3
 80030fc:	f000 fa9a 	bl	8003634 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2140      	movs	r1, #64	; 0x40
 8003106:	4618      	mov	r0, r3
 8003108:	f000 faf3 	bl	80036f2 <TIM_ITRx_SetConfig>
      break;
 800310c:	e00c      	b.n	8003128 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4619      	mov	r1, r3
 8003118:	4610      	mov	r0, r2
 800311a:	f000 faea 	bl	80036f2 <TIM_ITRx_SetConfig>
      break;
 800311e:	e003      	b.n	8003128 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	73fb      	strb	r3, [r7, #15]
      break;
 8003124:	e000      	b.n	8003128 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003126:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003138:	7bfb      	ldrb	r3, [r7, #15]
}
 800313a:	4618      	mov	r0, r3
 800313c:	3710      	adds	r7, #16
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}

08003142 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003142:	b480      	push	{r7}
 8003144:	b083      	sub	sp, #12
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800314a:	bf00      	nop
 800314c:	370c      	adds	r7, #12
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr

08003156 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003156:	b480      	push	{r7}
 8003158:	b083      	sub	sp, #12
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800315e:	bf00      	nop
 8003160:	370c      	adds	r7, #12
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr

0800316a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800316a:	b480      	push	{r7}
 800316c:	b083      	sub	sp, #12
 800316e:	af00      	add	r7, sp, #0
 8003170:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003172:	bf00      	nop
 8003174:	370c      	adds	r7, #12
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr

0800317e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800317e:	b480      	push	{r7}
 8003180:	b083      	sub	sp, #12
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003186:	bf00      	nop
 8003188:	370c      	adds	r7, #12
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
	...

08003194 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003194:	b480      	push	{r7}
 8003196:	b085      	sub	sp, #20
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	4a40      	ldr	r2, [pc, #256]	; (80032a8 <TIM_Base_SetConfig+0x114>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d013      	beq.n	80031d4 <TIM_Base_SetConfig+0x40>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031b2:	d00f      	beq.n	80031d4 <TIM_Base_SetConfig+0x40>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	4a3d      	ldr	r2, [pc, #244]	; (80032ac <TIM_Base_SetConfig+0x118>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d00b      	beq.n	80031d4 <TIM_Base_SetConfig+0x40>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4a3c      	ldr	r2, [pc, #240]	; (80032b0 <TIM_Base_SetConfig+0x11c>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d007      	beq.n	80031d4 <TIM_Base_SetConfig+0x40>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	4a3b      	ldr	r2, [pc, #236]	; (80032b4 <TIM_Base_SetConfig+0x120>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d003      	beq.n	80031d4 <TIM_Base_SetConfig+0x40>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4a3a      	ldr	r2, [pc, #232]	; (80032b8 <TIM_Base_SetConfig+0x124>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d108      	bne.n	80031e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	68fa      	ldr	r2, [r7, #12]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a2f      	ldr	r2, [pc, #188]	; (80032a8 <TIM_Base_SetConfig+0x114>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d02b      	beq.n	8003246 <TIM_Base_SetConfig+0xb2>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031f4:	d027      	beq.n	8003246 <TIM_Base_SetConfig+0xb2>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a2c      	ldr	r2, [pc, #176]	; (80032ac <TIM_Base_SetConfig+0x118>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d023      	beq.n	8003246 <TIM_Base_SetConfig+0xb2>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a2b      	ldr	r2, [pc, #172]	; (80032b0 <TIM_Base_SetConfig+0x11c>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d01f      	beq.n	8003246 <TIM_Base_SetConfig+0xb2>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a2a      	ldr	r2, [pc, #168]	; (80032b4 <TIM_Base_SetConfig+0x120>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d01b      	beq.n	8003246 <TIM_Base_SetConfig+0xb2>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a29      	ldr	r2, [pc, #164]	; (80032b8 <TIM_Base_SetConfig+0x124>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d017      	beq.n	8003246 <TIM_Base_SetConfig+0xb2>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a28      	ldr	r2, [pc, #160]	; (80032bc <TIM_Base_SetConfig+0x128>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d013      	beq.n	8003246 <TIM_Base_SetConfig+0xb2>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a27      	ldr	r2, [pc, #156]	; (80032c0 <TIM_Base_SetConfig+0x12c>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d00f      	beq.n	8003246 <TIM_Base_SetConfig+0xb2>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a26      	ldr	r2, [pc, #152]	; (80032c4 <TIM_Base_SetConfig+0x130>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d00b      	beq.n	8003246 <TIM_Base_SetConfig+0xb2>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a25      	ldr	r2, [pc, #148]	; (80032c8 <TIM_Base_SetConfig+0x134>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d007      	beq.n	8003246 <TIM_Base_SetConfig+0xb2>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a24      	ldr	r2, [pc, #144]	; (80032cc <TIM_Base_SetConfig+0x138>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d003      	beq.n	8003246 <TIM_Base_SetConfig+0xb2>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a23      	ldr	r2, [pc, #140]	; (80032d0 <TIM_Base_SetConfig+0x13c>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d108      	bne.n	8003258 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800324c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	68fa      	ldr	r2, [r7, #12]
 8003254:	4313      	orrs	r3, r2
 8003256:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	695b      	ldr	r3, [r3, #20]
 8003262:	4313      	orrs	r3, r2
 8003264:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	68fa      	ldr	r2, [r7, #12]
 800326a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	689a      	ldr	r2, [r3, #8]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	4a0a      	ldr	r2, [pc, #40]	; (80032a8 <TIM_Base_SetConfig+0x114>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d003      	beq.n	800328c <TIM_Base_SetConfig+0xf8>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4a0c      	ldr	r2, [pc, #48]	; (80032b8 <TIM_Base_SetConfig+0x124>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d103      	bne.n	8003294 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	691a      	ldr	r2, [r3, #16]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	615a      	str	r2, [r3, #20]
}
 800329a:	bf00      	nop
 800329c:	3714      	adds	r7, #20
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	40010000 	.word	0x40010000
 80032ac:	40000400 	.word	0x40000400
 80032b0:	40000800 	.word	0x40000800
 80032b4:	40000c00 	.word	0x40000c00
 80032b8:	40010400 	.word	0x40010400
 80032bc:	40014000 	.word	0x40014000
 80032c0:	40014400 	.word	0x40014400
 80032c4:	40014800 	.word	0x40014800
 80032c8:	40001800 	.word	0x40001800
 80032cc:	40001c00 	.word	0x40001c00
 80032d0:	40002000 	.word	0x40002000

080032d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b087      	sub	sp, #28
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a1b      	ldr	r3, [r3, #32]
 80032e2:	f023 0201 	bic.w	r2, r3, #1
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a1b      	ldr	r3, [r3, #32]
 80032ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	699b      	ldr	r3, [r3, #24]
 80032fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003302:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f023 0303 	bic.w	r3, r3, #3
 800330a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68fa      	ldr	r2, [r7, #12]
 8003312:	4313      	orrs	r3, r2
 8003314:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	f023 0302 	bic.w	r3, r3, #2
 800331c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	697a      	ldr	r2, [r7, #20]
 8003324:	4313      	orrs	r3, r2
 8003326:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a20      	ldr	r2, [pc, #128]	; (80033ac <TIM_OC1_SetConfig+0xd8>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d003      	beq.n	8003338 <TIM_OC1_SetConfig+0x64>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4a1f      	ldr	r2, [pc, #124]	; (80033b0 <TIM_OC1_SetConfig+0xdc>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d10c      	bne.n	8003352 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	f023 0308 	bic.w	r3, r3, #8
 800333e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	697a      	ldr	r2, [r7, #20]
 8003346:	4313      	orrs	r3, r2
 8003348:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	f023 0304 	bic.w	r3, r3, #4
 8003350:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a15      	ldr	r2, [pc, #84]	; (80033ac <TIM_OC1_SetConfig+0xd8>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d003      	beq.n	8003362 <TIM_OC1_SetConfig+0x8e>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a14      	ldr	r2, [pc, #80]	; (80033b0 <TIM_OC1_SetConfig+0xdc>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d111      	bne.n	8003386 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003368:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003370:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	695b      	ldr	r3, [r3, #20]
 8003376:	693a      	ldr	r2, [r7, #16]
 8003378:	4313      	orrs	r3, r2
 800337a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	699b      	ldr	r3, [r3, #24]
 8003380:	693a      	ldr	r2, [r7, #16]
 8003382:	4313      	orrs	r3, r2
 8003384:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	68fa      	ldr	r2, [r7, #12]
 8003390:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	685a      	ldr	r2, [r3, #4]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	697a      	ldr	r2, [r7, #20]
 800339e:	621a      	str	r2, [r3, #32]
}
 80033a0:	bf00      	nop
 80033a2:	371c      	adds	r7, #28
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr
 80033ac:	40010000 	.word	0x40010000
 80033b0:	40010400 	.word	0x40010400

080033b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b087      	sub	sp, #28
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a1b      	ldr	r3, [r3, #32]
 80033c2:	f023 0210 	bic.w	r2, r3, #16
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a1b      	ldr	r3, [r3, #32]
 80033ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	699b      	ldr	r3, [r3, #24]
 80033da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	021b      	lsls	r3, r3, #8
 80033f2:	68fa      	ldr	r2, [r7, #12]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	f023 0320 	bic.w	r3, r3, #32
 80033fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	011b      	lsls	r3, r3, #4
 8003406:	697a      	ldr	r2, [r7, #20]
 8003408:	4313      	orrs	r3, r2
 800340a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4a22      	ldr	r2, [pc, #136]	; (8003498 <TIM_OC2_SetConfig+0xe4>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d003      	beq.n	800341c <TIM_OC2_SetConfig+0x68>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	4a21      	ldr	r2, [pc, #132]	; (800349c <TIM_OC2_SetConfig+0xe8>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d10d      	bne.n	8003438 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003422:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	011b      	lsls	r3, r3, #4
 800342a:	697a      	ldr	r2, [r7, #20]
 800342c:	4313      	orrs	r3, r2
 800342e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003436:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4a17      	ldr	r2, [pc, #92]	; (8003498 <TIM_OC2_SetConfig+0xe4>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d003      	beq.n	8003448 <TIM_OC2_SetConfig+0x94>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4a16      	ldr	r2, [pc, #88]	; (800349c <TIM_OC2_SetConfig+0xe8>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d113      	bne.n	8003470 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800344e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003456:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	695b      	ldr	r3, [r3, #20]
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	4313      	orrs	r3, r2
 8003462:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	699b      	ldr	r3, [r3, #24]
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	693a      	ldr	r2, [r7, #16]
 800346c:	4313      	orrs	r3, r2
 800346e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	693a      	ldr	r2, [r7, #16]
 8003474:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	68fa      	ldr	r2, [r7, #12]
 800347a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	685a      	ldr	r2, [r3, #4]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	697a      	ldr	r2, [r7, #20]
 8003488:	621a      	str	r2, [r3, #32]
}
 800348a:	bf00      	nop
 800348c:	371c      	adds	r7, #28
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop
 8003498:	40010000 	.word	0x40010000
 800349c:	40010400 	.word	0x40010400

080034a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b087      	sub	sp, #28
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a1b      	ldr	r3, [r3, #32]
 80034ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6a1b      	ldr	r3, [r3, #32]
 80034ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	69db      	ldr	r3, [r3, #28]
 80034c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f023 0303 	bic.w	r3, r3, #3
 80034d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	68fa      	ldr	r2, [r7, #12]
 80034de:	4313      	orrs	r3, r2
 80034e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80034e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	021b      	lsls	r3, r3, #8
 80034f0:	697a      	ldr	r2, [r7, #20]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a21      	ldr	r2, [pc, #132]	; (8003580 <TIM_OC3_SetConfig+0xe0>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d003      	beq.n	8003506 <TIM_OC3_SetConfig+0x66>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a20      	ldr	r2, [pc, #128]	; (8003584 <TIM_OC3_SetConfig+0xe4>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d10d      	bne.n	8003522 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800350c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	021b      	lsls	r3, r3, #8
 8003514:	697a      	ldr	r2, [r7, #20]
 8003516:	4313      	orrs	r3, r2
 8003518:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003520:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a16      	ldr	r2, [pc, #88]	; (8003580 <TIM_OC3_SetConfig+0xe0>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d003      	beq.n	8003532 <TIM_OC3_SetConfig+0x92>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a15      	ldr	r2, [pc, #84]	; (8003584 <TIM_OC3_SetConfig+0xe4>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d113      	bne.n	800355a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003538:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003540:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	695b      	ldr	r3, [r3, #20]
 8003546:	011b      	lsls	r3, r3, #4
 8003548:	693a      	ldr	r2, [r7, #16]
 800354a:	4313      	orrs	r3, r2
 800354c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	699b      	ldr	r3, [r3, #24]
 8003552:	011b      	lsls	r3, r3, #4
 8003554:	693a      	ldr	r2, [r7, #16]
 8003556:	4313      	orrs	r3, r2
 8003558:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	693a      	ldr	r2, [r7, #16]
 800355e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	68fa      	ldr	r2, [r7, #12]
 8003564:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	685a      	ldr	r2, [r3, #4]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	697a      	ldr	r2, [r7, #20]
 8003572:	621a      	str	r2, [r3, #32]
}
 8003574:	bf00      	nop
 8003576:	371c      	adds	r7, #28
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr
 8003580:	40010000 	.word	0x40010000
 8003584:	40010400 	.word	0x40010400

08003588 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003588:	b480      	push	{r7}
 800358a:	b087      	sub	sp, #28
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a1b      	ldr	r3, [r3, #32]
 8003596:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a1b      	ldr	r3, [r3, #32]
 80035a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	69db      	ldr	r3, [r3, #28]
 80035ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	021b      	lsls	r3, r3, #8
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80035d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	031b      	lsls	r3, r3, #12
 80035da:	693a      	ldr	r2, [r7, #16]
 80035dc:	4313      	orrs	r3, r2
 80035de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4a12      	ldr	r2, [pc, #72]	; (800362c <TIM_OC4_SetConfig+0xa4>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d003      	beq.n	80035f0 <TIM_OC4_SetConfig+0x68>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4a11      	ldr	r2, [pc, #68]	; (8003630 <TIM_OC4_SetConfig+0xa8>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d109      	bne.n	8003604 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	695b      	ldr	r3, [r3, #20]
 80035fc:	019b      	lsls	r3, r3, #6
 80035fe:	697a      	ldr	r2, [r7, #20]
 8003600:	4313      	orrs	r3, r2
 8003602:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	697a      	ldr	r2, [r7, #20]
 8003608:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	68fa      	ldr	r2, [r7, #12]
 800360e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	685a      	ldr	r2, [r3, #4]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	693a      	ldr	r2, [r7, #16]
 800361c:	621a      	str	r2, [r3, #32]
}
 800361e:	bf00      	nop
 8003620:	371c      	adds	r7, #28
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	40010000 	.word	0x40010000
 8003630:	40010400 	.word	0x40010400

08003634 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003634:	b480      	push	{r7}
 8003636:	b087      	sub	sp, #28
 8003638:	af00      	add	r7, sp, #0
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	60b9      	str	r1, [r7, #8]
 800363e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6a1b      	ldr	r3, [r3, #32]
 8003644:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6a1b      	ldr	r3, [r3, #32]
 800364a:	f023 0201 	bic.w	r2, r3, #1
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	699b      	ldr	r3, [r3, #24]
 8003656:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800365e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	011b      	lsls	r3, r3, #4
 8003664:	693a      	ldr	r2, [r7, #16]
 8003666:	4313      	orrs	r3, r2
 8003668:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	f023 030a 	bic.w	r3, r3, #10
 8003670:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003672:	697a      	ldr	r2, [r7, #20]
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	4313      	orrs	r3, r2
 8003678:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	693a      	ldr	r2, [r7, #16]
 800367e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	697a      	ldr	r2, [r7, #20]
 8003684:	621a      	str	r2, [r3, #32]
}
 8003686:	bf00      	nop
 8003688:	371c      	adds	r7, #28
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr

08003692 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003692:	b480      	push	{r7}
 8003694:	b087      	sub	sp, #28
 8003696:	af00      	add	r7, sp, #0
 8003698:	60f8      	str	r0, [r7, #12]
 800369a:	60b9      	str	r1, [r7, #8]
 800369c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6a1b      	ldr	r3, [r3, #32]
 80036a2:	f023 0210 	bic.w	r2, r3, #16
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	699b      	ldr	r3, [r3, #24]
 80036ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6a1b      	ldr	r3, [r3, #32]
 80036b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80036bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	031b      	lsls	r3, r3, #12
 80036c2:	697a      	ldr	r2, [r7, #20]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80036ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	011b      	lsls	r3, r3, #4
 80036d4:	693a      	ldr	r2, [r7, #16]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	697a      	ldr	r2, [r7, #20]
 80036de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	693a      	ldr	r2, [r7, #16]
 80036e4:	621a      	str	r2, [r3, #32]
}
 80036e6:	bf00      	nop
 80036e8:	371c      	adds	r7, #28
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr

080036f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036f2:	b480      	push	{r7}
 80036f4:	b085      	sub	sp, #20
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
 80036fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003708:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800370a:	683a      	ldr	r2, [r7, #0]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	4313      	orrs	r3, r2
 8003710:	f043 0307 	orr.w	r3, r3, #7
 8003714:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	68fa      	ldr	r2, [r7, #12]
 800371a:	609a      	str	r2, [r3, #8]
}
 800371c:	bf00      	nop
 800371e:	3714      	adds	r7, #20
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003728:	b480      	push	{r7}
 800372a:	b087      	sub	sp, #28
 800372c:	af00      	add	r7, sp, #0
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	60b9      	str	r1, [r7, #8]
 8003732:	607a      	str	r2, [r7, #4]
 8003734:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003742:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	021a      	lsls	r2, r3, #8
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	431a      	orrs	r2, r3
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	4313      	orrs	r3, r2
 8003750:	697a      	ldr	r2, [r7, #20]
 8003752:	4313      	orrs	r3, r2
 8003754:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	697a      	ldr	r2, [r7, #20]
 800375a:	609a      	str	r2, [r3, #8]
}
 800375c:	bf00      	nop
 800375e:	371c      	adds	r7, #28
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003768:	b480      	push	{r7}
 800376a:	b087      	sub	sp, #28
 800376c:	af00      	add	r7, sp, #0
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	60b9      	str	r1, [r7, #8]
 8003772:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	f003 031f 	and.w	r3, r3, #31
 800377a:	2201      	movs	r2, #1
 800377c:	fa02 f303 	lsl.w	r3, r2, r3
 8003780:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6a1a      	ldr	r2, [r3, #32]
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	43db      	mvns	r3, r3
 800378a:	401a      	ands	r2, r3
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6a1a      	ldr	r2, [r3, #32]
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	f003 031f 	and.w	r3, r3, #31
 800379a:	6879      	ldr	r1, [r7, #4]
 800379c:	fa01 f303 	lsl.w	r3, r1, r3
 80037a0:	431a      	orrs	r2, r3
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	621a      	str	r2, [r3, #32]
}
 80037a6:	bf00      	nop
 80037a8:	371c      	adds	r7, #28
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
	...

080037b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b085      	sub	sp, #20
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d101      	bne.n	80037cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037c8:	2302      	movs	r3, #2
 80037ca:	e05a      	b.n	8003882 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2202      	movs	r2, #2
 80037d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68fa      	ldr	r2, [r7, #12]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68fa      	ldr	r2, [r7, #12]
 8003804:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a21      	ldr	r2, [pc, #132]	; (8003890 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d022      	beq.n	8003856 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003818:	d01d      	beq.n	8003856 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a1d      	ldr	r2, [pc, #116]	; (8003894 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d018      	beq.n	8003856 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a1b      	ldr	r2, [pc, #108]	; (8003898 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d013      	beq.n	8003856 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a1a      	ldr	r2, [pc, #104]	; (800389c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d00e      	beq.n	8003856 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a18      	ldr	r2, [pc, #96]	; (80038a0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d009      	beq.n	8003856 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a17      	ldr	r2, [pc, #92]	; (80038a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d004      	beq.n	8003856 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a15      	ldr	r2, [pc, #84]	; (80038a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d10c      	bne.n	8003870 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800385c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	68ba      	ldr	r2, [r7, #8]
 8003864:	4313      	orrs	r3, r2
 8003866:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68ba      	ldr	r2, [r7, #8]
 800386e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3714      	adds	r7, #20
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop
 8003890:	40010000 	.word	0x40010000
 8003894:	40000400 	.word	0x40000400
 8003898:	40000800 	.word	0x40000800
 800389c:	40000c00 	.word	0x40000c00
 80038a0:	40010400 	.word	0x40010400
 80038a4:	40014000 	.word	0x40014000
 80038a8:	40001800 	.word	0x40001800

080038ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80038b4:	bf00      	nop
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80038c8:	bf00      	nop
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d101      	bne.n	80038e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e03f      	b.n	8003966 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d106      	bne.n	8003900 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f7fd fc54 	bl	80011a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2224      	movs	r2, #36	; 0x24
 8003904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68da      	ldr	r2, [r3, #12]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003916:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f000 fddf 	bl	80044dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	691a      	ldr	r2, [r3, #16]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800392c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	695a      	ldr	r2, [r3, #20]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800393c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68da      	ldr	r2, [r3, #12]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800394c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2220      	movs	r2, #32
 8003958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2220      	movs	r2, #32
 8003960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	3708      	adds	r7, #8
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}

0800396e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800396e:	b580      	push	{r7, lr}
 8003970:	b08a      	sub	sp, #40	; 0x28
 8003972:	af02      	add	r7, sp, #8
 8003974:	60f8      	str	r0, [r7, #12]
 8003976:	60b9      	str	r1, [r7, #8]
 8003978:	603b      	str	r3, [r7, #0]
 800397a:	4613      	mov	r3, r2
 800397c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800397e:	2300      	movs	r3, #0
 8003980:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003988:	b2db      	uxtb	r3, r3
 800398a:	2b20      	cmp	r3, #32
 800398c:	d17c      	bne.n	8003a88 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d002      	beq.n	800399a <HAL_UART_Transmit+0x2c>
 8003994:	88fb      	ldrh	r3, [r7, #6]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d101      	bne.n	800399e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e075      	b.n	8003a8a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d101      	bne.n	80039ac <HAL_UART_Transmit+0x3e>
 80039a8:	2302      	movs	r3, #2
 80039aa:	e06e      	b.n	8003a8a <HAL_UART_Transmit+0x11c>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2200      	movs	r2, #0
 80039b8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2221      	movs	r2, #33	; 0x21
 80039be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80039c2:	f7fd fd6b 	bl	800149c <HAL_GetTick>
 80039c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	88fa      	ldrh	r2, [r7, #6]
 80039cc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	88fa      	ldrh	r2, [r7, #6]
 80039d2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039dc:	d108      	bne.n	80039f0 <HAL_UART_Transmit+0x82>
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	691b      	ldr	r3, [r3, #16]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d104      	bne.n	80039f0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80039e6:	2300      	movs	r3, #0
 80039e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	61bb      	str	r3, [r7, #24]
 80039ee:	e003      	b.n	80039f8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039f4:	2300      	movs	r3, #0
 80039f6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003a00:	e02a      	b.n	8003a58 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	9300      	str	r3, [sp, #0]
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	2180      	movs	r1, #128	; 0x80
 8003a0c:	68f8      	ldr	r0, [r7, #12]
 8003a0e:	f000 fb1f 	bl	8004050 <UART_WaitOnFlagUntilTimeout>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d001      	beq.n	8003a1c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	e036      	b.n	8003a8a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d10b      	bne.n	8003a3a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	881b      	ldrh	r3, [r3, #0]
 8003a26:	461a      	mov	r2, r3
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a30:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a32:	69bb      	ldr	r3, [r7, #24]
 8003a34:	3302      	adds	r3, #2
 8003a36:	61bb      	str	r3, [r7, #24]
 8003a38:	e007      	b.n	8003a4a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	781a      	ldrb	r2, [r3, #0]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	3301      	adds	r3, #1
 8003a48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	3b01      	subs	r3, #1
 8003a52:	b29a      	uxth	r2, r3
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d1cf      	bne.n	8003a02 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	9300      	str	r3, [sp, #0]
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	2140      	movs	r1, #64	; 0x40
 8003a6c:	68f8      	ldr	r0, [r7, #12]
 8003a6e:	f000 faef 	bl	8004050 <UART_WaitOnFlagUntilTimeout>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d001      	beq.n	8003a7c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e006      	b.n	8003a8a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2220      	movs	r2, #32
 8003a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003a84:	2300      	movs	r3, #0
 8003a86:	e000      	b.n	8003a8a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003a88:	2302      	movs	r3, #2
  }
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3720      	adds	r7, #32
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}

08003a92 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a92:	b580      	push	{r7, lr}
 8003a94:	b084      	sub	sp, #16
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	60f8      	str	r0, [r7, #12]
 8003a9a:	60b9      	str	r1, [r7, #8]
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	2b20      	cmp	r3, #32
 8003aaa:	d11d      	bne.n	8003ae8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d002      	beq.n	8003ab8 <HAL_UART_Receive_IT+0x26>
 8003ab2:	88fb      	ldrh	r3, [r7, #6]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d101      	bne.n	8003abc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e016      	b.n	8003aea <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d101      	bne.n	8003aca <HAL_UART_Receive_IT+0x38>
 8003ac6:	2302      	movs	r3, #2
 8003ac8:	e00f      	b.n	8003aea <HAL_UART_Receive_IT+0x58>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2201      	movs	r2, #1
 8003ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003ad8:	88fb      	ldrh	r3, [r7, #6]
 8003ada:	461a      	mov	r2, r3
 8003adc:	68b9      	ldr	r1, [r7, #8]
 8003ade:	68f8      	ldr	r0, [r7, #12]
 8003ae0:	f000 fb24 	bl	800412c <UART_Start_Receive_IT>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	e000      	b.n	8003aea <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003ae8:	2302      	movs	r3, #2
  }
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3710      	adds	r7, #16
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
	...

08003af4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b0ba      	sub	sp, #232	; 0xe8
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	695b      	ldr	r3, [r3, #20]
 8003b16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003b20:	2300      	movs	r3, #0
 8003b22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003b26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b2a:	f003 030f 	and.w	r3, r3, #15
 8003b2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003b32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d10f      	bne.n	8003b5a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b3e:	f003 0320 	and.w	r3, r3, #32
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d009      	beq.n	8003b5a <HAL_UART_IRQHandler+0x66>
 8003b46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b4a:	f003 0320 	and.w	r3, r3, #32
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d003      	beq.n	8003b5a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 fc07 	bl	8004366 <UART_Receive_IT>
      return;
 8003b58:	e256      	b.n	8004008 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003b5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	f000 80de 	beq.w	8003d20 <HAL_UART_IRQHandler+0x22c>
 8003b64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b68:	f003 0301 	and.w	r3, r3, #1
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d106      	bne.n	8003b7e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003b70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b74:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	f000 80d1 	beq.w	8003d20 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003b7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b82:	f003 0301 	and.w	r3, r3, #1
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d00b      	beq.n	8003ba2 <HAL_UART_IRQHandler+0xae>
 8003b8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d005      	beq.n	8003ba2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9a:	f043 0201 	orr.w	r2, r3, #1
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ba2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ba6:	f003 0304 	and.w	r3, r3, #4
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00b      	beq.n	8003bc6 <HAL_UART_IRQHandler+0xd2>
 8003bae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003bb2:	f003 0301 	and.w	r3, r3, #1
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d005      	beq.n	8003bc6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bbe:	f043 0202 	orr.w	r2, r3, #2
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003bc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bca:	f003 0302 	and.w	r3, r3, #2
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d00b      	beq.n	8003bea <HAL_UART_IRQHandler+0xf6>
 8003bd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003bd6:	f003 0301 	and.w	r3, r3, #1
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d005      	beq.n	8003bea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be2:	f043 0204 	orr.w	r2, r3, #4
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bee:	f003 0308 	and.w	r3, r3, #8
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d011      	beq.n	8003c1a <HAL_UART_IRQHandler+0x126>
 8003bf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bfa:	f003 0320 	and.w	r3, r3, #32
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d105      	bne.n	8003c0e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003c02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c06:	f003 0301 	and.w	r3, r3, #1
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d005      	beq.n	8003c1a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c12:	f043 0208 	orr.w	r2, r3, #8
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	f000 81ed 	beq.w	8003ffe <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c28:	f003 0320 	and.w	r3, r3, #32
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d008      	beq.n	8003c42 <HAL_UART_IRQHandler+0x14e>
 8003c30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c34:	f003 0320 	and.w	r3, r3, #32
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d002      	beq.n	8003c42 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f000 fb92 	bl	8004366 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	695b      	ldr	r3, [r3, #20]
 8003c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c4c:	2b40      	cmp	r3, #64	; 0x40
 8003c4e:	bf0c      	ite	eq
 8003c50:	2301      	moveq	r3, #1
 8003c52:	2300      	movne	r3, #0
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5e:	f003 0308 	and.w	r3, r3, #8
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d103      	bne.n	8003c6e <HAL_UART_IRQHandler+0x17a>
 8003c66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d04f      	beq.n	8003d0e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 fa9a 	bl	80041a8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	695b      	ldr	r3, [r3, #20]
 8003c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c7e:	2b40      	cmp	r3, #64	; 0x40
 8003c80:	d141      	bne.n	8003d06 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	3314      	adds	r3, #20
 8003c88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c90:	e853 3f00 	ldrex	r3, [r3]
 8003c94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003c98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ca0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	3314      	adds	r3, #20
 8003caa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003cae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003cb2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003cba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003cbe:	e841 2300 	strex	r3, r2, [r1]
 8003cc2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003cc6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d1d9      	bne.n	8003c82 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d013      	beq.n	8003cfe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cda:	4a7d      	ldr	r2, [pc, #500]	; (8003ed0 <HAL_UART_IRQHandler+0x3dc>)
 8003cdc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f7fd fd67 	bl	80017b6 <HAL_DMA_Abort_IT>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d016      	beq.n	8003d1c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003cf8:	4610      	mov	r0, r2
 8003cfa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cfc:	e00e      	b.n	8003d1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 f990 	bl	8004024 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d04:	e00a      	b.n	8003d1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f000 f98c 	bl	8004024 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d0c:	e006      	b.n	8003d1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f000 f988 	bl	8004024 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003d1a:	e170      	b.n	8003ffe <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d1c:	bf00      	nop
    return;
 8003d1e:	e16e      	b.n	8003ffe <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	f040 814a 	bne.w	8003fbe <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d2e:	f003 0310 	and.w	r3, r3, #16
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	f000 8143 	beq.w	8003fbe <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003d38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d3c:	f003 0310 	and.w	r3, r3, #16
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	f000 813c 	beq.w	8003fbe <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d46:	2300      	movs	r3, #0
 8003d48:	60bb      	str	r3, [r7, #8]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	60bb      	str	r3, [r7, #8]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	60bb      	str	r3, [r7, #8]
 8003d5a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	695b      	ldr	r3, [r3, #20]
 8003d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d66:	2b40      	cmp	r3, #64	; 0x40
 8003d68:	f040 80b4 	bne.w	8003ed4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003d78:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	f000 8140 	beq.w	8004002 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	f080 8139 	bcs.w	8004002 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d96:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d9c:	69db      	ldr	r3, [r3, #28]
 8003d9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003da2:	f000 8088 	beq.w	8003eb6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	330c      	adds	r3, #12
 8003dac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003db4:	e853 3f00 	ldrex	r3, [r3]
 8003db8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003dbc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003dc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003dc4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	330c      	adds	r3, #12
 8003dce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003dd2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003dd6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dda:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003dde:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003de2:	e841 2300 	strex	r3, r2, [r1]
 8003de6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003dea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d1d9      	bne.n	8003da6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	3314      	adds	r3, #20
 8003df8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dfc:	e853 3f00 	ldrex	r3, [r3]
 8003e00:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003e02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e04:	f023 0301 	bic.w	r3, r3, #1
 8003e08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	3314      	adds	r3, #20
 8003e12:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003e16:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003e1a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e1c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003e1e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003e22:	e841 2300 	strex	r3, r2, [r1]
 8003e26:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003e28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d1e1      	bne.n	8003df2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	3314      	adds	r3, #20
 8003e34:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e38:	e853 3f00 	ldrex	r3, [r3]
 8003e3c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003e3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	3314      	adds	r3, #20
 8003e4e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003e52:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003e54:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e56:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003e58:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003e5a:	e841 2300 	strex	r3, r2, [r1]
 8003e5e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003e60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d1e3      	bne.n	8003e2e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2220      	movs	r2, #32
 8003e6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	330c      	adds	r3, #12
 8003e7a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e7e:	e853 3f00 	ldrex	r3, [r3]
 8003e82:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003e84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e86:	f023 0310 	bic.w	r3, r3, #16
 8003e8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	330c      	adds	r3, #12
 8003e94:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003e98:	65ba      	str	r2, [r7, #88]	; 0x58
 8003e9a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e9c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003e9e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003ea0:	e841 2300 	strex	r3, r2, [r1]
 8003ea4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003ea6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d1e3      	bne.n	8003e74 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f7fd fc10 	bl	80016d6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 f8b6 	bl	8004038 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003ecc:	e099      	b.n	8004002 <HAL_UART_IRQHandler+0x50e>
 8003ece:	bf00      	nop
 8003ed0:	0800426f 	.word	0x0800426f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	f000 808b 	beq.w	8004006 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003ef0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	f000 8086 	beq.w	8004006 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	330c      	adds	r3, #12
 8003f00:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f04:	e853 3f00 	ldrex	r3, [r3]
 8003f08:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003f0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f10:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	330c      	adds	r3, #12
 8003f1a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003f1e:	647a      	str	r2, [r7, #68]	; 0x44
 8003f20:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f22:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003f24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f26:	e841 2300 	strex	r3, r2, [r1]
 8003f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003f2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d1e3      	bne.n	8003efa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	3314      	adds	r3, #20
 8003f38:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3c:	e853 3f00 	ldrex	r3, [r3]
 8003f40:	623b      	str	r3, [r7, #32]
   return(result);
 8003f42:	6a3b      	ldr	r3, [r7, #32]
 8003f44:	f023 0301 	bic.w	r3, r3, #1
 8003f48:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	3314      	adds	r3, #20
 8003f52:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003f56:	633a      	str	r2, [r7, #48]	; 0x30
 8003f58:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f5e:	e841 2300 	strex	r3, r2, [r1]
 8003f62:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d1e3      	bne.n	8003f32 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2220      	movs	r2, #32
 8003f6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	330c      	adds	r3, #12
 8003f7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	e853 3f00 	ldrex	r3, [r3]
 8003f86:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f023 0310 	bic.w	r3, r3, #16
 8003f8e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	330c      	adds	r3, #12
 8003f98:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003f9c:	61fa      	str	r2, [r7, #28]
 8003f9e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa0:	69b9      	ldr	r1, [r7, #24]
 8003fa2:	69fa      	ldr	r2, [r7, #28]
 8003fa4:	e841 2300 	strex	r3, r2, [r1]
 8003fa8:	617b      	str	r3, [r7, #20]
   return(result);
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d1e3      	bne.n	8003f78 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003fb0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003fb4:	4619      	mov	r1, r3
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 f83e 	bl	8004038 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003fbc:	e023      	b.n	8004006 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003fbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d009      	beq.n	8003fde <HAL_UART_IRQHandler+0x4ea>
 8003fca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d003      	beq.n	8003fde <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f000 f95d 	bl	8004296 <UART_Transmit_IT>
    return;
 8003fdc:	e014      	b.n	8004008 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003fde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00e      	beq.n	8004008 <HAL_UART_IRQHandler+0x514>
 8003fea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d008      	beq.n	8004008 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 f99d 	bl	8004336 <UART_EndTransmit_IT>
    return;
 8003ffc:	e004      	b.n	8004008 <HAL_UART_IRQHandler+0x514>
    return;
 8003ffe:	bf00      	nop
 8004000:	e002      	b.n	8004008 <HAL_UART_IRQHandler+0x514>
      return;
 8004002:	bf00      	nop
 8004004:	e000      	b.n	8004008 <HAL_UART_IRQHandler+0x514>
      return;
 8004006:	bf00      	nop
  }
}
 8004008:	37e8      	adds	r7, #232	; 0xe8
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop

08004010 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004018:	bf00      	nop
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800402c:	bf00      	nop
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr

08004038 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	460b      	mov	r3, r1
 8004042:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004044:	bf00      	nop
 8004046:	370c      	adds	r7, #12
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr

08004050 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b090      	sub	sp, #64	; 0x40
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	603b      	str	r3, [r7, #0]
 800405c:	4613      	mov	r3, r2
 800405e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004060:	e050      	b.n	8004104 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004062:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004068:	d04c      	beq.n	8004104 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800406a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800406c:	2b00      	cmp	r3, #0
 800406e:	d007      	beq.n	8004080 <UART_WaitOnFlagUntilTimeout+0x30>
 8004070:	f7fd fa14 	bl	800149c <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800407c:	429a      	cmp	r2, r3
 800407e:	d241      	bcs.n	8004104 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	330c      	adds	r3, #12
 8004086:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800408a:	e853 3f00 	ldrex	r3, [r3]
 800408e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004092:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004096:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	330c      	adds	r3, #12
 800409e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80040a0:	637a      	str	r2, [r7, #52]	; 0x34
 80040a2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80040a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040a8:	e841 2300 	strex	r3, r2, [r1]
 80040ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80040ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d1e5      	bne.n	8004080 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	3314      	adds	r3, #20
 80040ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	e853 3f00 	ldrex	r3, [r3]
 80040c2:	613b      	str	r3, [r7, #16]
   return(result);
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	f023 0301 	bic.w	r3, r3, #1
 80040ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	3314      	adds	r3, #20
 80040d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040d4:	623a      	str	r2, [r7, #32]
 80040d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040d8:	69f9      	ldr	r1, [r7, #28]
 80040da:	6a3a      	ldr	r2, [r7, #32]
 80040dc:	e841 2300 	strex	r3, r2, [r1]
 80040e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d1e5      	bne.n	80040b4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2220      	movs	r2, #32
 80040ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2220      	movs	r2, #32
 80040f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	e00f      	b.n	8004124 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	4013      	ands	r3, r2
 800410e:	68ba      	ldr	r2, [r7, #8]
 8004110:	429a      	cmp	r2, r3
 8004112:	bf0c      	ite	eq
 8004114:	2301      	moveq	r3, #1
 8004116:	2300      	movne	r3, #0
 8004118:	b2db      	uxtb	r3, r3
 800411a:	461a      	mov	r2, r3
 800411c:	79fb      	ldrb	r3, [r7, #7]
 800411e:	429a      	cmp	r2, r3
 8004120:	d09f      	beq.n	8004062 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004122:	2300      	movs	r3, #0
}
 8004124:	4618      	mov	r0, r3
 8004126:	3740      	adds	r7, #64	; 0x40
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}

0800412c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800412c:	b480      	push	{r7}
 800412e:	b085      	sub	sp, #20
 8004130:	af00      	add	r7, sp, #0
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	4613      	mov	r3, r2
 8004138:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	68ba      	ldr	r2, [r7, #8]
 800413e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	88fa      	ldrh	r2, [r7, #6]
 8004144:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	88fa      	ldrh	r2, [r7, #6]
 800414a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2200      	movs	r2, #0
 8004150:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2222      	movs	r2, #34	; 0x22
 8004156:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	691b      	ldr	r3, [r3, #16]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d007      	beq.n	800417a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	68da      	ldr	r2, [r3, #12]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004178:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	695a      	ldr	r2, [r3, #20]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f042 0201 	orr.w	r2, r2, #1
 8004188:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	68da      	ldr	r2, [r3, #12]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f042 0220 	orr.w	r2, r2, #32
 8004198:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800419a:	2300      	movs	r3, #0
}
 800419c:	4618      	mov	r0, r3
 800419e:	3714      	adds	r7, #20
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr

080041a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b095      	sub	sp, #84	; 0x54
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	330c      	adds	r3, #12
 80041b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041ba:	e853 3f00 	ldrex	r3, [r3]
 80041be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80041c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80041c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	330c      	adds	r3, #12
 80041ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80041d0:	643a      	str	r2, [r7, #64]	; 0x40
 80041d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80041d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80041d8:	e841 2300 	strex	r3, r2, [r1]
 80041dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80041de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d1e5      	bne.n	80041b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	3314      	adds	r3, #20
 80041ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ec:	6a3b      	ldr	r3, [r7, #32]
 80041ee:	e853 3f00 	ldrex	r3, [r3]
 80041f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	f023 0301 	bic.w	r3, r3, #1
 80041fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	3314      	adds	r3, #20
 8004202:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004204:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004206:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004208:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800420a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800420c:	e841 2300 	strex	r3, r2, [r1]
 8004210:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004214:	2b00      	cmp	r3, #0
 8004216:	d1e5      	bne.n	80041e4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421c:	2b01      	cmp	r3, #1
 800421e:	d119      	bne.n	8004254 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	330c      	adds	r3, #12
 8004226:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	e853 3f00 	ldrex	r3, [r3]
 800422e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	f023 0310 	bic.w	r3, r3, #16
 8004236:	647b      	str	r3, [r7, #68]	; 0x44
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	330c      	adds	r3, #12
 800423e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004240:	61ba      	str	r2, [r7, #24]
 8004242:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004244:	6979      	ldr	r1, [r7, #20]
 8004246:	69ba      	ldr	r2, [r7, #24]
 8004248:	e841 2300 	strex	r3, r2, [r1]
 800424c:	613b      	str	r3, [r7, #16]
   return(result);
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d1e5      	bne.n	8004220 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2220      	movs	r2, #32
 8004258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004262:	bf00      	nop
 8004264:	3754      	adds	r7, #84	; 0x54
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr

0800426e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800426e:	b580      	push	{r7, lr}
 8004270:	b084      	sub	sp, #16
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800427a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2200      	movs	r2, #0
 8004280:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2200      	movs	r2, #0
 8004286:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004288:	68f8      	ldr	r0, [r7, #12]
 800428a:	f7ff fecb 	bl	8004024 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800428e:	bf00      	nop
 8004290:	3710      	adds	r7, #16
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}

08004296 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004296:	b480      	push	{r7}
 8004298:	b085      	sub	sp, #20
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	2b21      	cmp	r3, #33	; 0x21
 80042a8:	d13e      	bne.n	8004328 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042b2:	d114      	bne.n	80042de <UART_Transmit_IT+0x48>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	691b      	ldr	r3, [r3, #16]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d110      	bne.n	80042de <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6a1b      	ldr	r3, [r3, #32]
 80042c0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	881b      	ldrh	r3, [r3, #0]
 80042c6:	461a      	mov	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042d0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a1b      	ldr	r3, [r3, #32]
 80042d6:	1c9a      	adds	r2, r3, #2
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	621a      	str	r2, [r3, #32]
 80042dc:	e008      	b.n	80042f0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a1b      	ldr	r3, [r3, #32]
 80042e2:	1c59      	adds	r1, r3, #1
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	6211      	str	r1, [r2, #32]
 80042e8:	781a      	ldrb	r2, [r3, #0]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	3b01      	subs	r3, #1
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	4619      	mov	r1, r3
 80042fe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004300:	2b00      	cmp	r3, #0
 8004302:	d10f      	bne.n	8004324 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	68da      	ldr	r2, [r3, #12]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004312:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	68da      	ldr	r2, [r3, #12]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004322:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004324:	2300      	movs	r3, #0
 8004326:	e000      	b.n	800432a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004328:	2302      	movs	r3, #2
  }
}
 800432a:	4618      	mov	r0, r3
 800432c:	3714      	adds	r7, #20
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr

08004336 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004336:	b580      	push	{r7, lr}
 8004338:	b082      	sub	sp, #8
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	68da      	ldr	r2, [r3, #12]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800434c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2220      	movs	r2, #32
 8004352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f7ff fe5a 	bl	8004010 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800435c:	2300      	movs	r3, #0
}
 800435e:	4618      	mov	r0, r3
 8004360:	3708      	adds	r7, #8
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}

08004366 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004366:	b580      	push	{r7, lr}
 8004368:	b08c      	sub	sp, #48	; 0x30
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004374:	b2db      	uxtb	r3, r3
 8004376:	2b22      	cmp	r3, #34	; 0x22
 8004378:	f040 80ab 	bne.w	80044d2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004384:	d117      	bne.n	80043b6 <UART_Receive_IT+0x50>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d113      	bne.n	80043b6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800438e:	2300      	movs	r3, #0
 8004390:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004396:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	b29b      	uxth	r3, r3
 80043a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043a4:	b29a      	uxth	r2, r3
 80043a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ae:	1c9a      	adds	r2, r3, #2
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	629a      	str	r2, [r3, #40]	; 0x28
 80043b4:	e026      	b.n	8004404 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80043bc:	2300      	movs	r3, #0
 80043be:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043c8:	d007      	beq.n	80043da <UART_Receive_IT+0x74>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d10a      	bne.n	80043e8 <UART_Receive_IT+0x82>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d106      	bne.n	80043e8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	b2da      	uxtb	r2, r3
 80043e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043e4:	701a      	strb	r2, [r3, #0]
 80043e6:	e008      	b.n	80043fa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043f4:	b2da      	uxtb	r2, r3
 80043f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043f8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043fe:	1c5a      	adds	r2, r3, #1
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004408:	b29b      	uxth	r3, r3
 800440a:	3b01      	subs	r3, #1
 800440c:	b29b      	uxth	r3, r3
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	4619      	mov	r1, r3
 8004412:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004414:	2b00      	cmp	r3, #0
 8004416:	d15a      	bne.n	80044ce <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	68da      	ldr	r2, [r3, #12]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f022 0220 	bic.w	r2, r2, #32
 8004426:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	68da      	ldr	r2, [r3, #12]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004436:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	695a      	ldr	r2, [r3, #20]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f022 0201 	bic.w	r2, r2, #1
 8004446:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2220      	movs	r2, #32
 800444c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004454:	2b01      	cmp	r3, #1
 8004456:	d135      	bne.n	80044c4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	330c      	adds	r3, #12
 8004464:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	e853 3f00 	ldrex	r3, [r3]
 800446c:	613b      	str	r3, [r7, #16]
   return(result);
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	f023 0310 	bic.w	r3, r3, #16
 8004474:	627b      	str	r3, [r7, #36]	; 0x24
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	330c      	adds	r3, #12
 800447c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800447e:	623a      	str	r2, [r7, #32]
 8004480:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004482:	69f9      	ldr	r1, [r7, #28]
 8004484:	6a3a      	ldr	r2, [r7, #32]
 8004486:	e841 2300 	strex	r3, r2, [r1]
 800448a:	61bb      	str	r3, [r7, #24]
   return(result);
 800448c:	69bb      	ldr	r3, [r7, #24]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d1e5      	bne.n	800445e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0310 	and.w	r3, r3, #16
 800449c:	2b10      	cmp	r3, #16
 800449e:	d10a      	bne.n	80044b6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80044a0:	2300      	movs	r3, #0
 80044a2:	60fb      	str	r3, [r7, #12]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	60fb      	str	r3, [r7, #12]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	60fb      	str	r3, [r7, #12]
 80044b4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80044ba:	4619      	mov	r1, r3
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f7ff fdbb 	bl	8004038 <HAL_UARTEx_RxEventCallback>
 80044c2:	e002      	b.n	80044ca <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f7fc fb69 	bl	8000b9c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80044ca:	2300      	movs	r3, #0
 80044cc:	e002      	b.n	80044d4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80044ce:	2300      	movs	r3, #0
 80044d0:	e000      	b.n	80044d4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80044d2:	2302      	movs	r3, #2
  }
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3730      	adds	r7, #48	; 0x30
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}

080044dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044e0:	b0c0      	sub	sp, #256	; 0x100
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	691b      	ldr	r3, [r3, #16]
 80044f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80044f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044f8:	68d9      	ldr	r1, [r3, #12]
 80044fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	ea40 0301 	orr.w	r3, r0, r1
 8004504:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004506:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800450a:	689a      	ldr	r2, [r3, #8]
 800450c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	431a      	orrs	r2, r3
 8004514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004518:	695b      	ldr	r3, [r3, #20]
 800451a:	431a      	orrs	r2, r3
 800451c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004520:	69db      	ldr	r3, [r3, #28]
 8004522:	4313      	orrs	r3, r2
 8004524:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004534:	f021 010c 	bic.w	r1, r1, #12
 8004538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004542:	430b      	orrs	r3, r1
 8004544:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004546:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	695b      	ldr	r3, [r3, #20]
 800454e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004556:	6999      	ldr	r1, [r3, #24]
 8004558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	ea40 0301 	orr.w	r3, r0, r1
 8004562:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	4b8f      	ldr	r3, [pc, #572]	; (80047a8 <UART_SetConfig+0x2cc>)
 800456c:	429a      	cmp	r2, r3
 800456e:	d005      	beq.n	800457c <UART_SetConfig+0xa0>
 8004570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	4b8d      	ldr	r3, [pc, #564]	; (80047ac <UART_SetConfig+0x2d0>)
 8004578:	429a      	cmp	r2, r3
 800457a:	d104      	bne.n	8004586 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800457c:	f7fd fbf2 	bl	8001d64 <HAL_RCC_GetPCLK2Freq>
 8004580:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004584:	e003      	b.n	800458e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004586:	f7fd fbd9 	bl	8001d3c <HAL_RCC_GetPCLK1Freq>
 800458a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800458e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004592:	69db      	ldr	r3, [r3, #28]
 8004594:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004598:	f040 810c 	bne.w	80047b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800459c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045a0:	2200      	movs	r2, #0
 80045a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80045a6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80045aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80045ae:	4622      	mov	r2, r4
 80045b0:	462b      	mov	r3, r5
 80045b2:	1891      	adds	r1, r2, r2
 80045b4:	65b9      	str	r1, [r7, #88]	; 0x58
 80045b6:	415b      	adcs	r3, r3
 80045b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80045ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80045be:	4621      	mov	r1, r4
 80045c0:	eb12 0801 	adds.w	r8, r2, r1
 80045c4:	4629      	mov	r1, r5
 80045c6:	eb43 0901 	adc.w	r9, r3, r1
 80045ca:	f04f 0200 	mov.w	r2, #0
 80045ce:	f04f 0300 	mov.w	r3, #0
 80045d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80045d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80045da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80045de:	4690      	mov	r8, r2
 80045e0:	4699      	mov	r9, r3
 80045e2:	4623      	mov	r3, r4
 80045e4:	eb18 0303 	adds.w	r3, r8, r3
 80045e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80045ec:	462b      	mov	r3, r5
 80045ee:	eb49 0303 	adc.w	r3, r9, r3
 80045f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80045f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004602:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004606:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800460a:	460b      	mov	r3, r1
 800460c:	18db      	adds	r3, r3, r3
 800460e:	653b      	str	r3, [r7, #80]	; 0x50
 8004610:	4613      	mov	r3, r2
 8004612:	eb42 0303 	adc.w	r3, r2, r3
 8004616:	657b      	str	r3, [r7, #84]	; 0x54
 8004618:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800461c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004620:	f7fb fe5e 	bl	80002e0 <__aeabi_uldivmod>
 8004624:	4602      	mov	r2, r0
 8004626:	460b      	mov	r3, r1
 8004628:	4b61      	ldr	r3, [pc, #388]	; (80047b0 <UART_SetConfig+0x2d4>)
 800462a:	fba3 2302 	umull	r2, r3, r3, r2
 800462e:	095b      	lsrs	r3, r3, #5
 8004630:	011c      	lsls	r4, r3, #4
 8004632:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004636:	2200      	movs	r2, #0
 8004638:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800463c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004640:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004644:	4642      	mov	r2, r8
 8004646:	464b      	mov	r3, r9
 8004648:	1891      	adds	r1, r2, r2
 800464a:	64b9      	str	r1, [r7, #72]	; 0x48
 800464c:	415b      	adcs	r3, r3
 800464e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004650:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004654:	4641      	mov	r1, r8
 8004656:	eb12 0a01 	adds.w	sl, r2, r1
 800465a:	4649      	mov	r1, r9
 800465c:	eb43 0b01 	adc.w	fp, r3, r1
 8004660:	f04f 0200 	mov.w	r2, #0
 8004664:	f04f 0300 	mov.w	r3, #0
 8004668:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800466c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004670:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004674:	4692      	mov	sl, r2
 8004676:	469b      	mov	fp, r3
 8004678:	4643      	mov	r3, r8
 800467a:	eb1a 0303 	adds.w	r3, sl, r3
 800467e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004682:	464b      	mov	r3, r9
 8004684:	eb4b 0303 	adc.w	r3, fp, r3
 8004688:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800468c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004698:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800469c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80046a0:	460b      	mov	r3, r1
 80046a2:	18db      	adds	r3, r3, r3
 80046a4:	643b      	str	r3, [r7, #64]	; 0x40
 80046a6:	4613      	mov	r3, r2
 80046a8:	eb42 0303 	adc.w	r3, r2, r3
 80046ac:	647b      	str	r3, [r7, #68]	; 0x44
 80046ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80046b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80046b6:	f7fb fe13 	bl	80002e0 <__aeabi_uldivmod>
 80046ba:	4602      	mov	r2, r0
 80046bc:	460b      	mov	r3, r1
 80046be:	4611      	mov	r1, r2
 80046c0:	4b3b      	ldr	r3, [pc, #236]	; (80047b0 <UART_SetConfig+0x2d4>)
 80046c2:	fba3 2301 	umull	r2, r3, r3, r1
 80046c6:	095b      	lsrs	r3, r3, #5
 80046c8:	2264      	movs	r2, #100	; 0x64
 80046ca:	fb02 f303 	mul.w	r3, r2, r3
 80046ce:	1acb      	subs	r3, r1, r3
 80046d0:	00db      	lsls	r3, r3, #3
 80046d2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80046d6:	4b36      	ldr	r3, [pc, #216]	; (80047b0 <UART_SetConfig+0x2d4>)
 80046d8:	fba3 2302 	umull	r2, r3, r3, r2
 80046dc:	095b      	lsrs	r3, r3, #5
 80046de:	005b      	lsls	r3, r3, #1
 80046e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80046e4:	441c      	add	r4, r3
 80046e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046ea:	2200      	movs	r2, #0
 80046ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80046f0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80046f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80046f8:	4642      	mov	r2, r8
 80046fa:	464b      	mov	r3, r9
 80046fc:	1891      	adds	r1, r2, r2
 80046fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8004700:	415b      	adcs	r3, r3
 8004702:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004704:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004708:	4641      	mov	r1, r8
 800470a:	1851      	adds	r1, r2, r1
 800470c:	6339      	str	r1, [r7, #48]	; 0x30
 800470e:	4649      	mov	r1, r9
 8004710:	414b      	adcs	r3, r1
 8004712:	637b      	str	r3, [r7, #52]	; 0x34
 8004714:	f04f 0200 	mov.w	r2, #0
 8004718:	f04f 0300 	mov.w	r3, #0
 800471c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004720:	4659      	mov	r1, fp
 8004722:	00cb      	lsls	r3, r1, #3
 8004724:	4651      	mov	r1, sl
 8004726:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800472a:	4651      	mov	r1, sl
 800472c:	00ca      	lsls	r2, r1, #3
 800472e:	4610      	mov	r0, r2
 8004730:	4619      	mov	r1, r3
 8004732:	4603      	mov	r3, r0
 8004734:	4642      	mov	r2, r8
 8004736:	189b      	adds	r3, r3, r2
 8004738:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800473c:	464b      	mov	r3, r9
 800473e:	460a      	mov	r2, r1
 8004740:	eb42 0303 	adc.w	r3, r2, r3
 8004744:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004754:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004758:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800475c:	460b      	mov	r3, r1
 800475e:	18db      	adds	r3, r3, r3
 8004760:	62bb      	str	r3, [r7, #40]	; 0x28
 8004762:	4613      	mov	r3, r2
 8004764:	eb42 0303 	adc.w	r3, r2, r3
 8004768:	62fb      	str	r3, [r7, #44]	; 0x2c
 800476a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800476e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004772:	f7fb fdb5 	bl	80002e0 <__aeabi_uldivmod>
 8004776:	4602      	mov	r2, r0
 8004778:	460b      	mov	r3, r1
 800477a:	4b0d      	ldr	r3, [pc, #52]	; (80047b0 <UART_SetConfig+0x2d4>)
 800477c:	fba3 1302 	umull	r1, r3, r3, r2
 8004780:	095b      	lsrs	r3, r3, #5
 8004782:	2164      	movs	r1, #100	; 0x64
 8004784:	fb01 f303 	mul.w	r3, r1, r3
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	00db      	lsls	r3, r3, #3
 800478c:	3332      	adds	r3, #50	; 0x32
 800478e:	4a08      	ldr	r2, [pc, #32]	; (80047b0 <UART_SetConfig+0x2d4>)
 8004790:	fba2 2303 	umull	r2, r3, r2, r3
 8004794:	095b      	lsrs	r3, r3, #5
 8004796:	f003 0207 	and.w	r2, r3, #7
 800479a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4422      	add	r2, r4
 80047a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80047a4:	e105      	b.n	80049b2 <UART_SetConfig+0x4d6>
 80047a6:	bf00      	nop
 80047a8:	40011000 	.word	0x40011000
 80047ac:	40011400 	.word	0x40011400
 80047b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80047b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047b8:	2200      	movs	r2, #0
 80047ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80047be:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80047c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80047c6:	4642      	mov	r2, r8
 80047c8:	464b      	mov	r3, r9
 80047ca:	1891      	adds	r1, r2, r2
 80047cc:	6239      	str	r1, [r7, #32]
 80047ce:	415b      	adcs	r3, r3
 80047d0:	627b      	str	r3, [r7, #36]	; 0x24
 80047d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80047d6:	4641      	mov	r1, r8
 80047d8:	1854      	adds	r4, r2, r1
 80047da:	4649      	mov	r1, r9
 80047dc:	eb43 0501 	adc.w	r5, r3, r1
 80047e0:	f04f 0200 	mov.w	r2, #0
 80047e4:	f04f 0300 	mov.w	r3, #0
 80047e8:	00eb      	lsls	r3, r5, #3
 80047ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047ee:	00e2      	lsls	r2, r4, #3
 80047f0:	4614      	mov	r4, r2
 80047f2:	461d      	mov	r5, r3
 80047f4:	4643      	mov	r3, r8
 80047f6:	18e3      	adds	r3, r4, r3
 80047f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80047fc:	464b      	mov	r3, r9
 80047fe:	eb45 0303 	adc.w	r3, r5, r3
 8004802:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	2200      	movs	r2, #0
 800480e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004812:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004816:	f04f 0200 	mov.w	r2, #0
 800481a:	f04f 0300 	mov.w	r3, #0
 800481e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004822:	4629      	mov	r1, r5
 8004824:	008b      	lsls	r3, r1, #2
 8004826:	4621      	mov	r1, r4
 8004828:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800482c:	4621      	mov	r1, r4
 800482e:	008a      	lsls	r2, r1, #2
 8004830:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004834:	f7fb fd54 	bl	80002e0 <__aeabi_uldivmod>
 8004838:	4602      	mov	r2, r0
 800483a:	460b      	mov	r3, r1
 800483c:	4b60      	ldr	r3, [pc, #384]	; (80049c0 <UART_SetConfig+0x4e4>)
 800483e:	fba3 2302 	umull	r2, r3, r3, r2
 8004842:	095b      	lsrs	r3, r3, #5
 8004844:	011c      	lsls	r4, r3, #4
 8004846:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800484a:	2200      	movs	r2, #0
 800484c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004850:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004854:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004858:	4642      	mov	r2, r8
 800485a:	464b      	mov	r3, r9
 800485c:	1891      	adds	r1, r2, r2
 800485e:	61b9      	str	r1, [r7, #24]
 8004860:	415b      	adcs	r3, r3
 8004862:	61fb      	str	r3, [r7, #28]
 8004864:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004868:	4641      	mov	r1, r8
 800486a:	1851      	adds	r1, r2, r1
 800486c:	6139      	str	r1, [r7, #16]
 800486e:	4649      	mov	r1, r9
 8004870:	414b      	adcs	r3, r1
 8004872:	617b      	str	r3, [r7, #20]
 8004874:	f04f 0200 	mov.w	r2, #0
 8004878:	f04f 0300 	mov.w	r3, #0
 800487c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004880:	4659      	mov	r1, fp
 8004882:	00cb      	lsls	r3, r1, #3
 8004884:	4651      	mov	r1, sl
 8004886:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800488a:	4651      	mov	r1, sl
 800488c:	00ca      	lsls	r2, r1, #3
 800488e:	4610      	mov	r0, r2
 8004890:	4619      	mov	r1, r3
 8004892:	4603      	mov	r3, r0
 8004894:	4642      	mov	r2, r8
 8004896:	189b      	adds	r3, r3, r2
 8004898:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800489c:	464b      	mov	r3, r9
 800489e:	460a      	mov	r2, r1
 80048a0:	eb42 0303 	adc.w	r3, r2, r3
 80048a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80048a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	67bb      	str	r3, [r7, #120]	; 0x78
 80048b2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80048b4:	f04f 0200 	mov.w	r2, #0
 80048b8:	f04f 0300 	mov.w	r3, #0
 80048bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80048c0:	4649      	mov	r1, r9
 80048c2:	008b      	lsls	r3, r1, #2
 80048c4:	4641      	mov	r1, r8
 80048c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048ca:	4641      	mov	r1, r8
 80048cc:	008a      	lsls	r2, r1, #2
 80048ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80048d2:	f7fb fd05 	bl	80002e0 <__aeabi_uldivmod>
 80048d6:	4602      	mov	r2, r0
 80048d8:	460b      	mov	r3, r1
 80048da:	4b39      	ldr	r3, [pc, #228]	; (80049c0 <UART_SetConfig+0x4e4>)
 80048dc:	fba3 1302 	umull	r1, r3, r3, r2
 80048e0:	095b      	lsrs	r3, r3, #5
 80048e2:	2164      	movs	r1, #100	; 0x64
 80048e4:	fb01 f303 	mul.w	r3, r1, r3
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	011b      	lsls	r3, r3, #4
 80048ec:	3332      	adds	r3, #50	; 0x32
 80048ee:	4a34      	ldr	r2, [pc, #208]	; (80049c0 <UART_SetConfig+0x4e4>)
 80048f0:	fba2 2303 	umull	r2, r3, r2, r3
 80048f4:	095b      	lsrs	r3, r3, #5
 80048f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048fa:	441c      	add	r4, r3
 80048fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004900:	2200      	movs	r2, #0
 8004902:	673b      	str	r3, [r7, #112]	; 0x70
 8004904:	677a      	str	r2, [r7, #116]	; 0x74
 8004906:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800490a:	4642      	mov	r2, r8
 800490c:	464b      	mov	r3, r9
 800490e:	1891      	adds	r1, r2, r2
 8004910:	60b9      	str	r1, [r7, #8]
 8004912:	415b      	adcs	r3, r3
 8004914:	60fb      	str	r3, [r7, #12]
 8004916:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800491a:	4641      	mov	r1, r8
 800491c:	1851      	adds	r1, r2, r1
 800491e:	6039      	str	r1, [r7, #0]
 8004920:	4649      	mov	r1, r9
 8004922:	414b      	adcs	r3, r1
 8004924:	607b      	str	r3, [r7, #4]
 8004926:	f04f 0200 	mov.w	r2, #0
 800492a:	f04f 0300 	mov.w	r3, #0
 800492e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004932:	4659      	mov	r1, fp
 8004934:	00cb      	lsls	r3, r1, #3
 8004936:	4651      	mov	r1, sl
 8004938:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800493c:	4651      	mov	r1, sl
 800493e:	00ca      	lsls	r2, r1, #3
 8004940:	4610      	mov	r0, r2
 8004942:	4619      	mov	r1, r3
 8004944:	4603      	mov	r3, r0
 8004946:	4642      	mov	r2, r8
 8004948:	189b      	adds	r3, r3, r2
 800494a:	66bb      	str	r3, [r7, #104]	; 0x68
 800494c:	464b      	mov	r3, r9
 800494e:	460a      	mov	r2, r1
 8004950:	eb42 0303 	adc.w	r3, r2, r3
 8004954:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004956:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	663b      	str	r3, [r7, #96]	; 0x60
 8004960:	667a      	str	r2, [r7, #100]	; 0x64
 8004962:	f04f 0200 	mov.w	r2, #0
 8004966:	f04f 0300 	mov.w	r3, #0
 800496a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800496e:	4649      	mov	r1, r9
 8004970:	008b      	lsls	r3, r1, #2
 8004972:	4641      	mov	r1, r8
 8004974:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004978:	4641      	mov	r1, r8
 800497a:	008a      	lsls	r2, r1, #2
 800497c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004980:	f7fb fcae 	bl	80002e0 <__aeabi_uldivmod>
 8004984:	4602      	mov	r2, r0
 8004986:	460b      	mov	r3, r1
 8004988:	4b0d      	ldr	r3, [pc, #52]	; (80049c0 <UART_SetConfig+0x4e4>)
 800498a:	fba3 1302 	umull	r1, r3, r3, r2
 800498e:	095b      	lsrs	r3, r3, #5
 8004990:	2164      	movs	r1, #100	; 0x64
 8004992:	fb01 f303 	mul.w	r3, r1, r3
 8004996:	1ad3      	subs	r3, r2, r3
 8004998:	011b      	lsls	r3, r3, #4
 800499a:	3332      	adds	r3, #50	; 0x32
 800499c:	4a08      	ldr	r2, [pc, #32]	; (80049c0 <UART_SetConfig+0x4e4>)
 800499e:	fba2 2303 	umull	r2, r3, r2, r3
 80049a2:	095b      	lsrs	r3, r3, #5
 80049a4:	f003 020f 	and.w	r2, r3, #15
 80049a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4422      	add	r2, r4
 80049b0:	609a      	str	r2, [r3, #8]
}
 80049b2:	bf00      	nop
 80049b4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80049b8:	46bd      	mov	sp, r7
 80049ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049be:	bf00      	nop
 80049c0:	51eb851f 	.word	0x51eb851f

080049c4 <__errno>:
 80049c4:	4b01      	ldr	r3, [pc, #4]	; (80049cc <__errno+0x8>)
 80049c6:	6818      	ldr	r0, [r3, #0]
 80049c8:	4770      	bx	lr
 80049ca:	bf00      	nop
 80049cc:	20000024 	.word	0x20000024

080049d0 <__libc_init_array>:
 80049d0:	b570      	push	{r4, r5, r6, lr}
 80049d2:	4d0d      	ldr	r5, [pc, #52]	; (8004a08 <__libc_init_array+0x38>)
 80049d4:	4c0d      	ldr	r4, [pc, #52]	; (8004a0c <__libc_init_array+0x3c>)
 80049d6:	1b64      	subs	r4, r4, r5
 80049d8:	10a4      	asrs	r4, r4, #2
 80049da:	2600      	movs	r6, #0
 80049dc:	42a6      	cmp	r6, r4
 80049de:	d109      	bne.n	80049f4 <__libc_init_array+0x24>
 80049e0:	4d0b      	ldr	r5, [pc, #44]	; (8004a10 <__libc_init_array+0x40>)
 80049e2:	4c0c      	ldr	r4, [pc, #48]	; (8004a14 <__libc_init_array+0x44>)
 80049e4:	f000 fe20 	bl	8005628 <_init>
 80049e8:	1b64      	subs	r4, r4, r5
 80049ea:	10a4      	asrs	r4, r4, #2
 80049ec:	2600      	movs	r6, #0
 80049ee:	42a6      	cmp	r6, r4
 80049f0:	d105      	bne.n	80049fe <__libc_init_array+0x2e>
 80049f2:	bd70      	pop	{r4, r5, r6, pc}
 80049f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80049f8:	4798      	blx	r3
 80049fa:	3601      	adds	r6, #1
 80049fc:	e7ee      	b.n	80049dc <__libc_init_array+0xc>
 80049fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a02:	4798      	blx	r3
 8004a04:	3601      	adds	r6, #1
 8004a06:	e7f2      	b.n	80049ee <__libc_init_array+0x1e>
 8004a08:	08005840 	.word	0x08005840
 8004a0c:	08005840 	.word	0x08005840
 8004a10:	08005840 	.word	0x08005840
 8004a14:	08005844 	.word	0x08005844

08004a18 <memset>:
 8004a18:	4402      	add	r2, r0
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d100      	bne.n	8004a22 <memset+0xa>
 8004a20:	4770      	bx	lr
 8004a22:	f803 1b01 	strb.w	r1, [r3], #1
 8004a26:	e7f9      	b.n	8004a1c <memset+0x4>

08004a28 <siscanf>:
 8004a28:	b40e      	push	{r1, r2, r3}
 8004a2a:	b510      	push	{r4, lr}
 8004a2c:	b09f      	sub	sp, #124	; 0x7c
 8004a2e:	ac21      	add	r4, sp, #132	; 0x84
 8004a30:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004a34:	f854 2b04 	ldr.w	r2, [r4], #4
 8004a38:	9201      	str	r2, [sp, #4]
 8004a3a:	f8ad 101c 	strh.w	r1, [sp, #28]
 8004a3e:	9004      	str	r0, [sp, #16]
 8004a40:	9008      	str	r0, [sp, #32]
 8004a42:	f7fb fbef 	bl	8000224 <strlen>
 8004a46:	4b0c      	ldr	r3, [pc, #48]	; (8004a78 <siscanf+0x50>)
 8004a48:	9005      	str	r0, [sp, #20]
 8004a4a:	9009      	str	r0, [sp, #36]	; 0x24
 8004a4c:	930d      	str	r3, [sp, #52]	; 0x34
 8004a4e:	480b      	ldr	r0, [pc, #44]	; (8004a7c <siscanf+0x54>)
 8004a50:	9a01      	ldr	r2, [sp, #4]
 8004a52:	6800      	ldr	r0, [r0, #0]
 8004a54:	9403      	str	r4, [sp, #12]
 8004a56:	2300      	movs	r3, #0
 8004a58:	9311      	str	r3, [sp, #68]	; 0x44
 8004a5a:	9316      	str	r3, [sp, #88]	; 0x58
 8004a5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004a60:	f8ad 301e 	strh.w	r3, [sp, #30]
 8004a64:	a904      	add	r1, sp, #16
 8004a66:	4623      	mov	r3, r4
 8004a68:	f000 f866 	bl	8004b38 <__ssvfiscanf_r>
 8004a6c:	b01f      	add	sp, #124	; 0x7c
 8004a6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a72:	b003      	add	sp, #12
 8004a74:	4770      	bx	lr
 8004a76:	bf00      	nop
 8004a78:	08004a81 	.word	0x08004a81
 8004a7c:	20000024 	.word	0x20000024

08004a80 <__seofread>:
 8004a80:	2000      	movs	r0, #0
 8004a82:	4770      	bx	lr

08004a84 <_sungetc_r>:
 8004a84:	b538      	push	{r3, r4, r5, lr}
 8004a86:	1c4b      	adds	r3, r1, #1
 8004a88:	4614      	mov	r4, r2
 8004a8a:	d103      	bne.n	8004a94 <_sungetc_r+0x10>
 8004a8c:	f04f 35ff 	mov.w	r5, #4294967295
 8004a90:	4628      	mov	r0, r5
 8004a92:	bd38      	pop	{r3, r4, r5, pc}
 8004a94:	8993      	ldrh	r3, [r2, #12]
 8004a96:	f023 0320 	bic.w	r3, r3, #32
 8004a9a:	8193      	strh	r3, [r2, #12]
 8004a9c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004a9e:	6852      	ldr	r2, [r2, #4]
 8004aa0:	b2cd      	uxtb	r5, r1
 8004aa2:	b18b      	cbz	r3, 8004ac8 <_sungetc_r+0x44>
 8004aa4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	dd08      	ble.n	8004abc <_sungetc_r+0x38>
 8004aaa:	6823      	ldr	r3, [r4, #0]
 8004aac:	1e5a      	subs	r2, r3, #1
 8004aae:	6022      	str	r2, [r4, #0]
 8004ab0:	f803 5c01 	strb.w	r5, [r3, #-1]
 8004ab4:	6863      	ldr	r3, [r4, #4]
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	6063      	str	r3, [r4, #4]
 8004aba:	e7e9      	b.n	8004a90 <_sungetc_r+0xc>
 8004abc:	4621      	mov	r1, r4
 8004abe:	f000 fc35 	bl	800532c <__submore>
 8004ac2:	2800      	cmp	r0, #0
 8004ac4:	d0f1      	beq.n	8004aaa <_sungetc_r+0x26>
 8004ac6:	e7e1      	b.n	8004a8c <_sungetc_r+0x8>
 8004ac8:	6921      	ldr	r1, [r4, #16]
 8004aca:	6823      	ldr	r3, [r4, #0]
 8004acc:	b151      	cbz	r1, 8004ae4 <_sungetc_r+0x60>
 8004ace:	4299      	cmp	r1, r3
 8004ad0:	d208      	bcs.n	8004ae4 <_sungetc_r+0x60>
 8004ad2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8004ad6:	42a9      	cmp	r1, r5
 8004ad8:	d104      	bne.n	8004ae4 <_sungetc_r+0x60>
 8004ada:	3b01      	subs	r3, #1
 8004adc:	3201      	adds	r2, #1
 8004ade:	6023      	str	r3, [r4, #0]
 8004ae0:	6062      	str	r2, [r4, #4]
 8004ae2:	e7d5      	b.n	8004a90 <_sungetc_r+0xc>
 8004ae4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8004ae8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004aec:	6363      	str	r3, [r4, #52]	; 0x34
 8004aee:	2303      	movs	r3, #3
 8004af0:	63a3      	str	r3, [r4, #56]	; 0x38
 8004af2:	4623      	mov	r3, r4
 8004af4:	f803 5f46 	strb.w	r5, [r3, #70]!
 8004af8:	6023      	str	r3, [r4, #0]
 8004afa:	2301      	movs	r3, #1
 8004afc:	e7dc      	b.n	8004ab8 <_sungetc_r+0x34>

08004afe <__ssrefill_r>:
 8004afe:	b510      	push	{r4, lr}
 8004b00:	460c      	mov	r4, r1
 8004b02:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004b04:	b169      	cbz	r1, 8004b22 <__ssrefill_r+0x24>
 8004b06:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004b0a:	4299      	cmp	r1, r3
 8004b0c:	d001      	beq.n	8004b12 <__ssrefill_r+0x14>
 8004b0e:	f000 fc57 	bl	80053c0 <_free_r>
 8004b12:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004b14:	6063      	str	r3, [r4, #4]
 8004b16:	2000      	movs	r0, #0
 8004b18:	6360      	str	r0, [r4, #52]	; 0x34
 8004b1a:	b113      	cbz	r3, 8004b22 <__ssrefill_r+0x24>
 8004b1c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004b1e:	6023      	str	r3, [r4, #0]
 8004b20:	bd10      	pop	{r4, pc}
 8004b22:	6923      	ldr	r3, [r4, #16]
 8004b24:	6023      	str	r3, [r4, #0]
 8004b26:	2300      	movs	r3, #0
 8004b28:	6063      	str	r3, [r4, #4]
 8004b2a:	89a3      	ldrh	r3, [r4, #12]
 8004b2c:	f043 0320 	orr.w	r3, r3, #32
 8004b30:	81a3      	strh	r3, [r4, #12]
 8004b32:	f04f 30ff 	mov.w	r0, #4294967295
 8004b36:	e7f3      	b.n	8004b20 <__ssrefill_r+0x22>

08004b38 <__ssvfiscanf_r>:
 8004b38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b3c:	460c      	mov	r4, r1
 8004b3e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8004b42:	2100      	movs	r1, #0
 8004b44:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8004b48:	49a6      	ldr	r1, [pc, #664]	; (8004de4 <__ssvfiscanf_r+0x2ac>)
 8004b4a:	91a0      	str	r1, [sp, #640]	; 0x280
 8004b4c:	f10d 0804 	add.w	r8, sp, #4
 8004b50:	49a5      	ldr	r1, [pc, #660]	; (8004de8 <__ssvfiscanf_r+0x2b0>)
 8004b52:	4fa6      	ldr	r7, [pc, #664]	; (8004dec <__ssvfiscanf_r+0x2b4>)
 8004b54:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8004df0 <__ssvfiscanf_r+0x2b8>
 8004b58:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8004b5c:	4606      	mov	r6, r0
 8004b5e:	91a1      	str	r1, [sp, #644]	; 0x284
 8004b60:	9300      	str	r3, [sp, #0]
 8004b62:	7813      	ldrb	r3, [r2, #0]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	f000 815a 	beq.w	8004e1e <__ssvfiscanf_r+0x2e6>
 8004b6a:	5dd9      	ldrb	r1, [r3, r7]
 8004b6c:	f011 0108 	ands.w	r1, r1, #8
 8004b70:	f102 0501 	add.w	r5, r2, #1
 8004b74:	d019      	beq.n	8004baa <__ssvfiscanf_r+0x72>
 8004b76:	6863      	ldr	r3, [r4, #4]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	dd0f      	ble.n	8004b9c <__ssvfiscanf_r+0x64>
 8004b7c:	6823      	ldr	r3, [r4, #0]
 8004b7e:	781a      	ldrb	r2, [r3, #0]
 8004b80:	5cba      	ldrb	r2, [r7, r2]
 8004b82:	0712      	lsls	r2, r2, #28
 8004b84:	d401      	bmi.n	8004b8a <__ssvfiscanf_r+0x52>
 8004b86:	462a      	mov	r2, r5
 8004b88:	e7eb      	b.n	8004b62 <__ssvfiscanf_r+0x2a>
 8004b8a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004b8c:	3201      	adds	r2, #1
 8004b8e:	9245      	str	r2, [sp, #276]	; 0x114
 8004b90:	6862      	ldr	r2, [r4, #4]
 8004b92:	3301      	adds	r3, #1
 8004b94:	3a01      	subs	r2, #1
 8004b96:	6062      	str	r2, [r4, #4]
 8004b98:	6023      	str	r3, [r4, #0]
 8004b9a:	e7ec      	b.n	8004b76 <__ssvfiscanf_r+0x3e>
 8004b9c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004b9e:	4621      	mov	r1, r4
 8004ba0:	4630      	mov	r0, r6
 8004ba2:	4798      	blx	r3
 8004ba4:	2800      	cmp	r0, #0
 8004ba6:	d0e9      	beq.n	8004b7c <__ssvfiscanf_r+0x44>
 8004ba8:	e7ed      	b.n	8004b86 <__ssvfiscanf_r+0x4e>
 8004baa:	2b25      	cmp	r3, #37	; 0x25
 8004bac:	d012      	beq.n	8004bd4 <__ssvfiscanf_r+0x9c>
 8004bae:	469a      	mov	sl, r3
 8004bb0:	6863      	ldr	r3, [r4, #4]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	f340 8091 	ble.w	8004cda <__ssvfiscanf_r+0x1a2>
 8004bb8:	6822      	ldr	r2, [r4, #0]
 8004bba:	7813      	ldrb	r3, [r2, #0]
 8004bbc:	4553      	cmp	r3, sl
 8004bbe:	f040 812e 	bne.w	8004e1e <__ssvfiscanf_r+0x2e6>
 8004bc2:	6863      	ldr	r3, [r4, #4]
 8004bc4:	3b01      	subs	r3, #1
 8004bc6:	6063      	str	r3, [r4, #4]
 8004bc8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8004bca:	3201      	adds	r2, #1
 8004bcc:	3301      	adds	r3, #1
 8004bce:	6022      	str	r2, [r4, #0]
 8004bd0:	9345      	str	r3, [sp, #276]	; 0x114
 8004bd2:	e7d8      	b.n	8004b86 <__ssvfiscanf_r+0x4e>
 8004bd4:	9141      	str	r1, [sp, #260]	; 0x104
 8004bd6:	9143      	str	r1, [sp, #268]	; 0x10c
 8004bd8:	7853      	ldrb	r3, [r2, #1]
 8004bda:	2b2a      	cmp	r3, #42	; 0x2a
 8004bdc:	bf02      	ittt	eq
 8004bde:	2310      	moveq	r3, #16
 8004be0:	1c95      	addeq	r5, r2, #2
 8004be2:	9341      	streq	r3, [sp, #260]	; 0x104
 8004be4:	220a      	movs	r2, #10
 8004be6:	46aa      	mov	sl, r5
 8004be8:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8004bec:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8004bf0:	2b09      	cmp	r3, #9
 8004bf2:	d91d      	bls.n	8004c30 <__ssvfiscanf_r+0xf8>
 8004bf4:	487e      	ldr	r0, [pc, #504]	; (8004df0 <__ssvfiscanf_r+0x2b8>)
 8004bf6:	2203      	movs	r2, #3
 8004bf8:	f7fb fb22 	bl	8000240 <memchr>
 8004bfc:	b140      	cbz	r0, 8004c10 <__ssvfiscanf_r+0xd8>
 8004bfe:	2301      	movs	r3, #1
 8004c00:	eba0 0009 	sub.w	r0, r0, r9
 8004c04:	fa03 f000 	lsl.w	r0, r3, r0
 8004c08:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004c0a:	4318      	orrs	r0, r3
 8004c0c:	9041      	str	r0, [sp, #260]	; 0x104
 8004c0e:	4655      	mov	r5, sl
 8004c10:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004c14:	2b78      	cmp	r3, #120	; 0x78
 8004c16:	d806      	bhi.n	8004c26 <__ssvfiscanf_r+0xee>
 8004c18:	2b57      	cmp	r3, #87	; 0x57
 8004c1a:	d810      	bhi.n	8004c3e <__ssvfiscanf_r+0x106>
 8004c1c:	2b25      	cmp	r3, #37	; 0x25
 8004c1e:	d0c6      	beq.n	8004bae <__ssvfiscanf_r+0x76>
 8004c20:	d856      	bhi.n	8004cd0 <__ssvfiscanf_r+0x198>
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d064      	beq.n	8004cf0 <__ssvfiscanf_r+0x1b8>
 8004c26:	2303      	movs	r3, #3
 8004c28:	9347      	str	r3, [sp, #284]	; 0x11c
 8004c2a:	230a      	movs	r3, #10
 8004c2c:	9342      	str	r3, [sp, #264]	; 0x108
 8004c2e:	e071      	b.n	8004d14 <__ssvfiscanf_r+0x1dc>
 8004c30:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8004c32:	fb02 1103 	mla	r1, r2, r3, r1
 8004c36:	3930      	subs	r1, #48	; 0x30
 8004c38:	9143      	str	r1, [sp, #268]	; 0x10c
 8004c3a:	4655      	mov	r5, sl
 8004c3c:	e7d3      	b.n	8004be6 <__ssvfiscanf_r+0xae>
 8004c3e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8004c42:	2a20      	cmp	r2, #32
 8004c44:	d8ef      	bhi.n	8004c26 <__ssvfiscanf_r+0xee>
 8004c46:	a101      	add	r1, pc, #4	; (adr r1, 8004c4c <__ssvfiscanf_r+0x114>)
 8004c48:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004c4c:	08004cff 	.word	0x08004cff
 8004c50:	08004c27 	.word	0x08004c27
 8004c54:	08004c27 	.word	0x08004c27
 8004c58:	08004d5d 	.word	0x08004d5d
 8004c5c:	08004c27 	.word	0x08004c27
 8004c60:	08004c27 	.word	0x08004c27
 8004c64:	08004c27 	.word	0x08004c27
 8004c68:	08004c27 	.word	0x08004c27
 8004c6c:	08004c27 	.word	0x08004c27
 8004c70:	08004c27 	.word	0x08004c27
 8004c74:	08004c27 	.word	0x08004c27
 8004c78:	08004d73 	.word	0x08004d73
 8004c7c:	08004d49 	.word	0x08004d49
 8004c80:	08004cd7 	.word	0x08004cd7
 8004c84:	08004cd7 	.word	0x08004cd7
 8004c88:	08004cd7 	.word	0x08004cd7
 8004c8c:	08004c27 	.word	0x08004c27
 8004c90:	08004d4d 	.word	0x08004d4d
 8004c94:	08004c27 	.word	0x08004c27
 8004c98:	08004c27 	.word	0x08004c27
 8004c9c:	08004c27 	.word	0x08004c27
 8004ca0:	08004c27 	.word	0x08004c27
 8004ca4:	08004d83 	.word	0x08004d83
 8004ca8:	08004d55 	.word	0x08004d55
 8004cac:	08004cf7 	.word	0x08004cf7
 8004cb0:	08004c27 	.word	0x08004c27
 8004cb4:	08004c27 	.word	0x08004c27
 8004cb8:	08004d7f 	.word	0x08004d7f
 8004cbc:	08004c27 	.word	0x08004c27
 8004cc0:	08004d49 	.word	0x08004d49
 8004cc4:	08004c27 	.word	0x08004c27
 8004cc8:	08004c27 	.word	0x08004c27
 8004ccc:	08004cff 	.word	0x08004cff
 8004cd0:	3b45      	subs	r3, #69	; 0x45
 8004cd2:	2b02      	cmp	r3, #2
 8004cd4:	d8a7      	bhi.n	8004c26 <__ssvfiscanf_r+0xee>
 8004cd6:	2305      	movs	r3, #5
 8004cd8:	e01b      	b.n	8004d12 <__ssvfiscanf_r+0x1da>
 8004cda:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004cdc:	4621      	mov	r1, r4
 8004cde:	4630      	mov	r0, r6
 8004ce0:	4798      	blx	r3
 8004ce2:	2800      	cmp	r0, #0
 8004ce4:	f43f af68 	beq.w	8004bb8 <__ssvfiscanf_r+0x80>
 8004ce8:	9844      	ldr	r0, [sp, #272]	; 0x110
 8004cea:	2800      	cmp	r0, #0
 8004cec:	f040 808d 	bne.w	8004e0a <__ssvfiscanf_r+0x2d2>
 8004cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8004cf4:	e08f      	b.n	8004e16 <__ssvfiscanf_r+0x2de>
 8004cf6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8004cf8:	f042 0220 	orr.w	r2, r2, #32
 8004cfc:	9241      	str	r2, [sp, #260]	; 0x104
 8004cfe:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8004d00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d04:	9241      	str	r2, [sp, #260]	; 0x104
 8004d06:	2210      	movs	r2, #16
 8004d08:	2b6f      	cmp	r3, #111	; 0x6f
 8004d0a:	9242      	str	r2, [sp, #264]	; 0x108
 8004d0c:	bf34      	ite	cc
 8004d0e:	2303      	movcc	r3, #3
 8004d10:	2304      	movcs	r3, #4
 8004d12:	9347      	str	r3, [sp, #284]	; 0x11c
 8004d14:	6863      	ldr	r3, [r4, #4]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	dd42      	ble.n	8004da0 <__ssvfiscanf_r+0x268>
 8004d1a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004d1c:	0659      	lsls	r1, r3, #25
 8004d1e:	d404      	bmi.n	8004d2a <__ssvfiscanf_r+0x1f2>
 8004d20:	6823      	ldr	r3, [r4, #0]
 8004d22:	781a      	ldrb	r2, [r3, #0]
 8004d24:	5cba      	ldrb	r2, [r7, r2]
 8004d26:	0712      	lsls	r2, r2, #28
 8004d28:	d441      	bmi.n	8004dae <__ssvfiscanf_r+0x276>
 8004d2a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	dc50      	bgt.n	8004dd2 <__ssvfiscanf_r+0x29a>
 8004d30:	466b      	mov	r3, sp
 8004d32:	4622      	mov	r2, r4
 8004d34:	a941      	add	r1, sp, #260	; 0x104
 8004d36:	4630      	mov	r0, r6
 8004d38:	f000 f876 	bl	8004e28 <_scanf_chars>
 8004d3c:	2801      	cmp	r0, #1
 8004d3e:	d06e      	beq.n	8004e1e <__ssvfiscanf_r+0x2e6>
 8004d40:	2802      	cmp	r0, #2
 8004d42:	f47f af20 	bne.w	8004b86 <__ssvfiscanf_r+0x4e>
 8004d46:	e7cf      	b.n	8004ce8 <__ssvfiscanf_r+0x1b0>
 8004d48:	220a      	movs	r2, #10
 8004d4a:	e7dd      	b.n	8004d08 <__ssvfiscanf_r+0x1d0>
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	9342      	str	r3, [sp, #264]	; 0x108
 8004d50:	2303      	movs	r3, #3
 8004d52:	e7de      	b.n	8004d12 <__ssvfiscanf_r+0x1da>
 8004d54:	2308      	movs	r3, #8
 8004d56:	9342      	str	r3, [sp, #264]	; 0x108
 8004d58:	2304      	movs	r3, #4
 8004d5a:	e7da      	b.n	8004d12 <__ssvfiscanf_r+0x1da>
 8004d5c:	4629      	mov	r1, r5
 8004d5e:	4640      	mov	r0, r8
 8004d60:	f000 f9b4 	bl	80050cc <__sccl>
 8004d64:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004d66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d6a:	9341      	str	r3, [sp, #260]	; 0x104
 8004d6c:	4605      	mov	r5, r0
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e7cf      	b.n	8004d12 <__ssvfiscanf_r+0x1da>
 8004d72:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004d74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d78:	9341      	str	r3, [sp, #260]	; 0x104
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	e7c9      	b.n	8004d12 <__ssvfiscanf_r+0x1da>
 8004d7e:	2302      	movs	r3, #2
 8004d80:	e7c7      	b.n	8004d12 <__ssvfiscanf_r+0x1da>
 8004d82:	9841      	ldr	r0, [sp, #260]	; 0x104
 8004d84:	06c3      	lsls	r3, r0, #27
 8004d86:	f53f aefe 	bmi.w	8004b86 <__ssvfiscanf_r+0x4e>
 8004d8a:	9b00      	ldr	r3, [sp, #0]
 8004d8c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004d8e:	1d19      	adds	r1, r3, #4
 8004d90:	9100      	str	r1, [sp, #0]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f010 0f01 	tst.w	r0, #1
 8004d98:	bf14      	ite	ne
 8004d9a:	801a      	strhne	r2, [r3, #0]
 8004d9c:	601a      	streq	r2, [r3, #0]
 8004d9e:	e6f2      	b.n	8004b86 <__ssvfiscanf_r+0x4e>
 8004da0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004da2:	4621      	mov	r1, r4
 8004da4:	4630      	mov	r0, r6
 8004da6:	4798      	blx	r3
 8004da8:	2800      	cmp	r0, #0
 8004daa:	d0b6      	beq.n	8004d1a <__ssvfiscanf_r+0x1e2>
 8004dac:	e79c      	b.n	8004ce8 <__ssvfiscanf_r+0x1b0>
 8004dae:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004db0:	3201      	adds	r2, #1
 8004db2:	9245      	str	r2, [sp, #276]	; 0x114
 8004db4:	6862      	ldr	r2, [r4, #4]
 8004db6:	3a01      	subs	r2, #1
 8004db8:	2a00      	cmp	r2, #0
 8004dba:	6062      	str	r2, [r4, #4]
 8004dbc:	dd02      	ble.n	8004dc4 <__ssvfiscanf_r+0x28c>
 8004dbe:	3301      	adds	r3, #1
 8004dc0:	6023      	str	r3, [r4, #0]
 8004dc2:	e7ad      	b.n	8004d20 <__ssvfiscanf_r+0x1e8>
 8004dc4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004dc6:	4621      	mov	r1, r4
 8004dc8:	4630      	mov	r0, r6
 8004dca:	4798      	blx	r3
 8004dcc:	2800      	cmp	r0, #0
 8004dce:	d0a7      	beq.n	8004d20 <__ssvfiscanf_r+0x1e8>
 8004dd0:	e78a      	b.n	8004ce8 <__ssvfiscanf_r+0x1b0>
 8004dd2:	2b04      	cmp	r3, #4
 8004dd4:	dc0e      	bgt.n	8004df4 <__ssvfiscanf_r+0x2bc>
 8004dd6:	466b      	mov	r3, sp
 8004dd8:	4622      	mov	r2, r4
 8004dda:	a941      	add	r1, sp, #260	; 0x104
 8004ddc:	4630      	mov	r0, r6
 8004dde:	f000 f87d 	bl	8004edc <_scanf_i>
 8004de2:	e7ab      	b.n	8004d3c <__ssvfiscanf_r+0x204>
 8004de4:	08004a85 	.word	0x08004a85
 8004de8:	08004aff 	.word	0x08004aff
 8004dec:	080056d8 	.word	0x080056d8
 8004df0:	080056b8 	.word	0x080056b8
 8004df4:	4b0b      	ldr	r3, [pc, #44]	; (8004e24 <__ssvfiscanf_r+0x2ec>)
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	f43f aec5 	beq.w	8004b86 <__ssvfiscanf_r+0x4e>
 8004dfc:	466b      	mov	r3, sp
 8004dfe:	4622      	mov	r2, r4
 8004e00:	a941      	add	r1, sp, #260	; 0x104
 8004e02:	4630      	mov	r0, r6
 8004e04:	f3af 8000 	nop.w
 8004e08:	e798      	b.n	8004d3c <__ssvfiscanf_r+0x204>
 8004e0a:	89a3      	ldrh	r3, [r4, #12]
 8004e0c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004e10:	bf18      	it	ne
 8004e12:	f04f 30ff 	movne.w	r0, #4294967295
 8004e16:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8004e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e1e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8004e20:	e7f9      	b.n	8004e16 <__ssvfiscanf_r+0x2de>
 8004e22:	bf00      	nop
 8004e24:	00000000 	.word	0x00000000

08004e28 <_scanf_chars>:
 8004e28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e2c:	4615      	mov	r5, r2
 8004e2e:	688a      	ldr	r2, [r1, #8]
 8004e30:	4680      	mov	r8, r0
 8004e32:	460c      	mov	r4, r1
 8004e34:	b932      	cbnz	r2, 8004e44 <_scanf_chars+0x1c>
 8004e36:	698a      	ldr	r2, [r1, #24]
 8004e38:	2a00      	cmp	r2, #0
 8004e3a:	bf0c      	ite	eq
 8004e3c:	2201      	moveq	r2, #1
 8004e3e:	f04f 32ff 	movne.w	r2, #4294967295
 8004e42:	608a      	str	r2, [r1, #8]
 8004e44:	6822      	ldr	r2, [r4, #0]
 8004e46:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8004ed8 <_scanf_chars+0xb0>
 8004e4a:	06d1      	lsls	r1, r2, #27
 8004e4c:	bf5f      	itttt	pl
 8004e4e:	681a      	ldrpl	r2, [r3, #0]
 8004e50:	1d11      	addpl	r1, r2, #4
 8004e52:	6019      	strpl	r1, [r3, #0]
 8004e54:	6816      	ldrpl	r6, [r2, #0]
 8004e56:	2700      	movs	r7, #0
 8004e58:	69a0      	ldr	r0, [r4, #24]
 8004e5a:	b188      	cbz	r0, 8004e80 <_scanf_chars+0x58>
 8004e5c:	2801      	cmp	r0, #1
 8004e5e:	d107      	bne.n	8004e70 <_scanf_chars+0x48>
 8004e60:	682a      	ldr	r2, [r5, #0]
 8004e62:	7811      	ldrb	r1, [r2, #0]
 8004e64:	6962      	ldr	r2, [r4, #20]
 8004e66:	5c52      	ldrb	r2, [r2, r1]
 8004e68:	b952      	cbnz	r2, 8004e80 <_scanf_chars+0x58>
 8004e6a:	2f00      	cmp	r7, #0
 8004e6c:	d031      	beq.n	8004ed2 <_scanf_chars+0xaa>
 8004e6e:	e022      	b.n	8004eb6 <_scanf_chars+0x8e>
 8004e70:	2802      	cmp	r0, #2
 8004e72:	d120      	bne.n	8004eb6 <_scanf_chars+0x8e>
 8004e74:	682b      	ldr	r3, [r5, #0]
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	f813 3009 	ldrb.w	r3, [r3, r9]
 8004e7c:	071b      	lsls	r3, r3, #28
 8004e7e:	d41a      	bmi.n	8004eb6 <_scanf_chars+0x8e>
 8004e80:	6823      	ldr	r3, [r4, #0]
 8004e82:	06da      	lsls	r2, r3, #27
 8004e84:	bf5e      	ittt	pl
 8004e86:	682b      	ldrpl	r3, [r5, #0]
 8004e88:	781b      	ldrbpl	r3, [r3, #0]
 8004e8a:	f806 3b01 	strbpl.w	r3, [r6], #1
 8004e8e:	682a      	ldr	r2, [r5, #0]
 8004e90:	686b      	ldr	r3, [r5, #4]
 8004e92:	3201      	adds	r2, #1
 8004e94:	602a      	str	r2, [r5, #0]
 8004e96:	68a2      	ldr	r2, [r4, #8]
 8004e98:	3b01      	subs	r3, #1
 8004e9a:	3a01      	subs	r2, #1
 8004e9c:	606b      	str	r3, [r5, #4]
 8004e9e:	3701      	adds	r7, #1
 8004ea0:	60a2      	str	r2, [r4, #8]
 8004ea2:	b142      	cbz	r2, 8004eb6 <_scanf_chars+0x8e>
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	dcd7      	bgt.n	8004e58 <_scanf_chars+0x30>
 8004ea8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004eac:	4629      	mov	r1, r5
 8004eae:	4640      	mov	r0, r8
 8004eb0:	4798      	blx	r3
 8004eb2:	2800      	cmp	r0, #0
 8004eb4:	d0d0      	beq.n	8004e58 <_scanf_chars+0x30>
 8004eb6:	6823      	ldr	r3, [r4, #0]
 8004eb8:	f013 0310 	ands.w	r3, r3, #16
 8004ebc:	d105      	bne.n	8004eca <_scanf_chars+0xa2>
 8004ebe:	68e2      	ldr	r2, [r4, #12]
 8004ec0:	3201      	adds	r2, #1
 8004ec2:	60e2      	str	r2, [r4, #12]
 8004ec4:	69a2      	ldr	r2, [r4, #24]
 8004ec6:	b102      	cbz	r2, 8004eca <_scanf_chars+0xa2>
 8004ec8:	7033      	strb	r3, [r6, #0]
 8004eca:	6923      	ldr	r3, [r4, #16]
 8004ecc:	443b      	add	r3, r7
 8004ece:	6123      	str	r3, [r4, #16]
 8004ed0:	2000      	movs	r0, #0
 8004ed2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ed6:	bf00      	nop
 8004ed8:	080056d8 	.word	0x080056d8

08004edc <_scanf_i>:
 8004edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ee0:	4698      	mov	r8, r3
 8004ee2:	4b76      	ldr	r3, [pc, #472]	; (80050bc <_scanf_i+0x1e0>)
 8004ee4:	460c      	mov	r4, r1
 8004ee6:	4682      	mov	sl, r0
 8004ee8:	4616      	mov	r6, r2
 8004eea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004eee:	b087      	sub	sp, #28
 8004ef0:	ab03      	add	r3, sp, #12
 8004ef2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004ef6:	4b72      	ldr	r3, [pc, #456]	; (80050c0 <_scanf_i+0x1e4>)
 8004ef8:	69a1      	ldr	r1, [r4, #24]
 8004efa:	4a72      	ldr	r2, [pc, #456]	; (80050c4 <_scanf_i+0x1e8>)
 8004efc:	2903      	cmp	r1, #3
 8004efe:	bf18      	it	ne
 8004f00:	461a      	movne	r2, r3
 8004f02:	68a3      	ldr	r3, [r4, #8]
 8004f04:	9201      	str	r2, [sp, #4]
 8004f06:	1e5a      	subs	r2, r3, #1
 8004f08:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004f0c:	bf88      	it	hi
 8004f0e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004f12:	4627      	mov	r7, r4
 8004f14:	bf82      	ittt	hi
 8004f16:	eb03 0905 	addhi.w	r9, r3, r5
 8004f1a:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004f1e:	60a3      	strhi	r3, [r4, #8]
 8004f20:	f857 3b1c 	ldr.w	r3, [r7], #28
 8004f24:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8004f28:	bf98      	it	ls
 8004f2a:	f04f 0900 	movls.w	r9, #0
 8004f2e:	6023      	str	r3, [r4, #0]
 8004f30:	463d      	mov	r5, r7
 8004f32:	f04f 0b00 	mov.w	fp, #0
 8004f36:	6831      	ldr	r1, [r6, #0]
 8004f38:	ab03      	add	r3, sp, #12
 8004f3a:	7809      	ldrb	r1, [r1, #0]
 8004f3c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8004f40:	2202      	movs	r2, #2
 8004f42:	f7fb f97d 	bl	8000240 <memchr>
 8004f46:	b328      	cbz	r0, 8004f94 <_scanf_i+0xb8>
 8004f48:	f1bb 0f01 	cmp.w	fp, #1
 8004f4c:	d159      	bne.n	8005002 <_scanf_i+0x126>
 8004f4e:	6862      	ldr	r2, [r4, #4]
 8004f50:	b92a      	cbnz	r2, 8004f5e <_scanf_i+0x82>
 8004f52:	6822      	ldr	r2, [r4, #0]
 8004f54:	2308      	movs	r3, #8
 8004f56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f5a:	6063      	str	r3, [r4, #4]
 8004f5c:	6022      	str	r2, [r4, #0]
 8004f5e:	6822      	ldr	r2, [r4, #0]
 8004f60:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8004f64:	6022      	str	r2, [r4, #0]
 8004f66:	68a2      	ldr	r2, [r4, #8]
 8004f68:	1e51      	subs	r1, r2, #1
 8004f6a:	60a1      	str	r1, [r4, #8]
 8004f6c:	b192      	cbz	r2, 8004f94 <_scanf_i+0xb8>
 8004f6e:	6832      	ldr	r2, [r6, #0]
 8004f70:	1c51      	adds	r1, r2, #1
 8004f72:	6031      	str	r1, [r6, #0]
 8004f74:	7812      	ldrb	r2, [r2, #0]
 8004f76:	f805 2b01 	strb.w	r2, [r5], #1
 8004f7a:	6872      	ldr	r2, [r6, #4]
 8004f7c:	3a01      	subs	r2, #1
 8004f7e:	2a00      	cmp	r2, #0
 8004f80:	6072      	str	r2, [r6, #4]
 8004f82:	dc07      	bgt.n	8004f94 <_scanf_i+0xb8>
 8004f84:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8004f88:	4631      	mov	r1, r6
 8004f8a:	4650      	mov	r0, sl
 8004f8c:	4790      	blx	r2
 8004f8e:	2800      	cmp	r0, #0
 8004f90:	f040 8085 	bne.w	800509e <_scanf_i+0x1c2>
 8004f94:	f10b 0b01 	add.w	fp, fp, #1
 8004f98:	f1bb 0f03 	cmp.w	fp, #3
 8004f9c:	d1cb      	bne.n	8004f36 <_scanf_i+0x5a>
 8004f9e:	6863      	ldr	r3, [r4, #4]
 8004fa0:	b90b      	cbnz	r3, 8004fa6 <_scanf_i+0xca>
 8004fa2:	230a      	movs	r3, #10
 8004fa4:	6063      	str	r3, [r4, #4]
 8004fa6:	6863      	ldr	r3, [r4, #4]
 8004fa8:	4947      	ldr	r1, [pc, #284]	; (80050c8 <_scanf_i+0x1ec>)
 8004faa:	6960      	ldr	r0, [r4, #20]
 8004fac:	1ac9      	subs	r1, r1, r3
 8004fae:	f000 f88d 	bl	80050cc <__sccl>
 8004fb2:	f04f 0b00 	mov.w	fp, #0
 8004fb6:	68a3      	ldr	r3, [r4, #8]
 8004fb8:	6822      	ldr	r2, [r4, #0]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d03d      	beq.n	800503a <_scanf_i+0x15e>
 8004fbe:	6831      	ldr	r1, [r6, #0]
 8004fc0:	6960      	ldr	r0, [r4, #20]
 8004fc2:	f891 c000 	ldrb.w	ip, [r1]
 8004fc6:	f810 000c 	ldrb.w	r0, [r0, ip]
 8004fca:	2800      	cmp	r0, #0
 8004fcc:	d035      	beq.n	800503a <_scanf_i+0x15e>
 8004fce:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8004fd2:	d124      	bne.n	800501e <_scanf_i+0x142>
 8004fd4:	0510      	lsls	r0, r2, #20
 8004fd6:	d522      	bpl.n	800501e <_scanf_i+0x142>
 8004fd8:	f10b 0b01 	add.w	fp, fp, #1
 8004fdc:	f1b9 0f00 	cmp.w	r9, #0
 8004fe0:	d003      	beq.n	8004fea <_scanf_i+0x10e>
 8004fe2:	3301      	adds	r3, #1
 8004fe4:	f109 39ff 	add.w	r9, r9, #4294967295
 8004fe8:	60a3      	str	r3, [r4, #8]
 8004fea:	6873      	ldr	r3, [r6, #4]
 8004fec:	3b01      	subs	r3, #1
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	6073      	str	r3, [r6, #4]
 8004ff2:	dd1b      	ble.n	800502c <_scanf_i+0x150>
 8004ff4:	6833      	ldr	r3, [r6, #0]
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	6033      	str	r3, [r6, #0]
 8004ffa:	68a3      	ldr	r3, [r4, #8]
 8004ffc:	3b01      	subs	r3, #1
 8004ffe:	60a3      	str	r3, [r4, #8]
 8005000:	e7d9      	b.n	8004fb6 <_scanf_i+0xda>
 8005002:	f1bb 0f02 	cmp.w	fp, #2
 8005006:	d1ae      	bne.n	8004f66 <_scanf_i+0x8a>
 8005008:	6822      	ldr	r2, [r4, #0]
 800500a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800500e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8005012:	d1bf      	bne.n	8004f94 <_scanf_i+0xb8>
 8005014:	2310      	movs	r3, #16
 8005016:	6063      	str	r3, [r4, #4]
 8005018:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800501c:	e7a2      	b.n	8004f64 <_scanf_i+0x88>
 800501e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8005022:	6022      	str	r2, [r4, #0]
 8005024:	780b      	ldrb	r3, [r1, #0]
 8005026:	f805 3b01 	strb.w	r3, [r5], #1
 800502a:	e7de      	b.n	8004fea <_scanf_i+0x10e>
 800502c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005030:	4631      	mov	r1, r6
 8005032:	4650      	mov	r0, sl
 8005034:	4798      	blx	r3
 8005036:	2800      	cmp	r0, #0
 8005038:	d0df      	beq.n	8004ffa <_scanf_i+0x11e>
 800503a:	6823      	ldr	r3, [r4, #0]
 800503c:	05db      	lsls	r3, r3, #23
 800503e:	d50d      	bpl.n	800505c <_scanf_i+0x180>
 8005040:	42bd      	cmp	r5, r7
 8005042:	d909      	bls.n	8005058 <_scanf_i+0x17c>
 8005044:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8005048:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800504c:	4632      	mov	r2, r6
 800504e:	4650      	mov	r0, sl
 8005050:	4798      	blx	r3
 8005052:	f105 39ff 	add.w	r9, r5, #4294967295
 8005056:	464d      	mov	r5, r9
 8005058:	42bd      	cmp	r5, r7
 800505a:	d02d      	beq.n	80050b8 <_scanf_i+0x1dc>
 800505c:	6822      	ldr	r2, [r4, #0]
 800505e:	f012 0210 	ands.w	r2, r2, #16
 8005062:	d113      	bne.n	800508c <_scanf_i+0x1b0>
 8005064:	702a      	strb	r2, [r5, #0]
 8005066:	6863      	ldr	r3, [r4, #4]
 8005068:	9e01      	ldr	r6, [sp, #4]
 800506a:	4639      	mov	r1, r7
 800506c:	4650      	mov	r0, sl
 800506e:	47b0      	blx	r6
 8005070:	6821      	ldr	r1, [r4, #0]
 8005072:	f8d8 3000 	ldr.w	r3, [r8]
 8005076:	f011 0f20 	tst.w	r1, #32
 800507a:	d013      	beq.n	80050a4 <_scanf_i+0x1c8>
 800507c:	1d1a      	adds	r2, r3, #4
 800507e:	f8c8 2000 	str.w	r2, [r8]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	6018      	str	r0, [r3, #0]
 8005086:	68e3      	ldr	r3, [r4, #12]
 8005088:	3301      	adds	r3, #1
 800508a:	60e3      	str	r3, [r4, #12]
 800508c:	1bed      	subs	r5, r5, r7
 800508e:	44ab      	add	fp, r5
 8005090:	6925      	ldr	r5, [r4, #16]
 8005092:	445d      	add	r5, fp
 8005094:	6125      	str	r5, [r4, #16]
 8005096:	2000      	movs	r0, #0
 8005098:	b007      	add	sp, #28
 800509a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800509e:	f04f 0b00 	mov.w	fp, #0
 80050a2:	e7ca      	b.n	800503a <_scanf_i+0x15e>
 80050a4:	1d1a      	adds	r2, r3, #4
 80050a6:	f8c8 2000 	str.w	r2, [r8]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f011 0f01 	tst.w	r1, #1
 80050b0:	bf14      	ite	ne
 80050b2:	8018      	strhne	r0, [r3, #0]
 80050b4:	6018      	streq	r0, [r3, #0]
 80050b6:	e7e6      	b.n	8005086 <_scanf_i+0x1aa>
 80050b8:	2001      	movs	r0, #1
 80050ba:	e7ed      	b.n	8005098 <_scanf_i+0x1bc>
 80050bc:	08005694 	.word	0x08005694
 80050c0:	08005329 	.word	0x08005329
 80050c4:	08005241 	.word	0x08005241
 80050c8:	080056d5 	.word	0x080056d5

080050cc <__sccl>:
 80050cc:	b570      	push	{r4, r5, r6, lr}
 80050ce:	780b      	ldrb	r3, [r1, #0]
 80050d0:	4604      	mov	r4, r0
 80050d2:	2b5e      	cmp	r3, #94	; 0x5e
 80050d4:	bf0b      	itete	eq
 80050d6:	784b      	ldrbeq	r3, [r1, #1]
 80050d8:	1c48      	addne	r0, r1, #1
 80050da:	1c88      	addeq	r0, r1, #2
 80050dc:	2200      	movne	r2, #0
 80050de:	bf08      	it	eq
 80050e0:	2201      	moveq	r2, #1
 80050e2:	1e61      	subs	r1, r4, #1
 80050e4:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80050e8:	f801 2f01 	strb.w	r2, [r1, #1]!
 80050ec:	42a9      	cmp	r1, r5
 80050ee:	d1fb      	bne.n	80050e8 <__sccl+0x1c>
 80050f0:	b90b      	cbnz	r3, 80050f6 <__sccl+0x2a>
 80050f2:	3801      	subs	r0, #1
 80050f4:	bd70      	pop	{r4, r5, r6, pc}
 80050f6:	f082 0201 	eor.w	r2, r2, #1
 80050fa:	54e2      	strb	r2, [r4, r3]
 80050fc:	4605      	mov	r5, r0
 80050fe:	4628      	mov	r0, r5
 8005100:	f810 1b01 	ldrb.w	r1, [r0], #1
 8005104:	292d      	cmp	r1, #45	; 0x2d
 8005106:	d006      	beq.n	8005116 <__sccl+0x4a>
 8005108:	295d      	cmp	r1, #93	; 0x5d
 800510a:	d0f3      	beq.n	80050f4 <__sccl+0x28>
 800510c:	b909      	cbnz	r1, 8005112 <__sccl+0x46>
 800510e:	4628      	mov	r0, r5
 8005110:	e7f0      	b.n	80050f4 <__sccl+0x28>
 8005112:	460b      	mov	r3, r1
 8005114:	e7f1      	b.n	80050fa <__sccl+0x2e>
 8005116:	786e      	ldrb	r6, [r5, #1]
 8005118:	2e5d      	cmp	r6, #93	; 0x5d
 800511a:	d0fa      	beq.n	8005112 <__sccl+0x46>
 800511c:	42b3      	cmp	r3, r6
 800511e:	dcf8      	bgt.n	8005112 <__sccl+0x46>
 8005120:	3502      	adds	r5, #2
 8005122:	4619      	mov	r1, r3
 8005124:	3101      	adds	r1, #1
 8005126:	428e      	cmp	r6, r1
 8005128:	5462      	strb	r2, [r4, r1]
 800512a:	dcfb      	bgt.n	8005124 <__sccl+0x58>
 800512c:	1af1      	subs	r1, r6, r3
 800512e:	3901      	subs	r1, #1
 8005130:	1c58      	adds	r0, r3, #1
 8005132:	42b3      	cmp	r3, r6
 8005134:	bfa8      	it	ge
 8005136:	2100      	movge	r1, #0
 8005138:	1843      	adds	r3, r0, r1
 800513a:	e7e0      	b.n	80050fe <__sccl+0x32>

0800513c <_strtol_l.constprop.0>:
 800513c:	2b01      	cmp	r3, #1
 800513e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005142:	d001      	beq.n	8005148 <_strtol_l.constprop.0+0xc>
 8005144:	2b24      	cmp	r3, #36	; 0x24
 8005146:	d906      	bls.n	8005156 <_strtol_l.constprop.0+0x1a>
 8005148:	f7ff fc3c 	bl	80049c4 <__errno>
 800514c:	2316      	movs	r3, #22
 800514e:	6003      	str	r3, [r0, #0]
 8005150:	2000      	movs	r0, #0
 8005152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005156:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800523c <_strtol_l.constprop.0+0x100>
 800515a:	460d      	mov	r5, r1
 800515c:	462e      	mov	r6, r5
 800515e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005162:	f814 700c 	ldrb.w	r7, [r4, ip]
 8005166:	f017 0708 	ands.w	r7, r7, #8
 800516a:	d1f7      	bne.n	800515c <_strtol_l.constprop.0+0x20>
 800516c:	2c2d      	cmp	r4, #45	; 0x2d
 800516e:	d132      	bne.n	80051d6 <_strtol_l.constprop.0+0x9a>
 8005170:	782c      	ldrb	r4, [r5, #0]
 8005172:	2701      	movs	r7, #1
 8005174:	1cb5      	adds	r5, r6, #2
 8005176:	2b00      	cmp	r3, #0
 8005178:	d05b      	beq.n	8005232 <_strtol_l.constprop.0+0xf6>
 800517a:	2b10      	cmp	r3, #16
 800517c:	d109      	bne.n	8005192 <_strtol_l.constprop.0+0x56>
 800517e:	2c30      	cmp	r4, #48	; 0x30
 8005180:	d107      	bne.n	8005192 <_strtol_l.constprop.0+0x56>
 8005182:	782c      	ldrb	r4, [r5, #0]
 8005184:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005188:	2c58      	cmp	r4, #88	; 0x58
 800518a:	d14d      	bne.n	8005228 <_strtol_l.constprop.0+0xec>
 800518c:	786c      	ldrb	r4, [r5, #1]
 800518e:	2310      	movs	r3, #16
 8005190:	3502      	adds	r5, #2
 8005192:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8005196:	f108 38ff 	add.w	r8, r8, #4294967295
 800519a:	f04f 0c00 	mov.w	ip, #0
 800519e:	fbb8 f9f3 	udiv	r9, r8, r3
 80051a2:	4666      	mov	r6, ip
 80051a4:	fb03 8a19 	mls	sl, r3, r9, r8
 80051a8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80051ac:	f1be 0f09 	cmp.w	lr, #9
 80051b0:	d816      	bhi.n	80051e0 <_strtol_l.constprop.0+0xa4>
 80051b2:	4674      	mov	r4, lr
 80051b4:	42a3      	cmp	r3, r4
 80051b6:	dd24      	ble.n	8005202 <_strtol_l.constprop.0+0xc6>
 80051b8:	f1bc 0f00 	cmp.w	ip, #0
 80051bc:	db1e      	blt.n	80051fc <_strtol_l.constprop.0+0xc0>
 80051be:	45b1      	cmp	r9, r6
 80051c0:	d31c      	bcc.n	80051fc <_strtol_l.constprop.0+0xc0>
 80051c2:	d101      	bne.n	80051c8 <_strtol_l.constprop.0+0x8c>
 80051c4:	45a2      	cmp	sl, r4
 80051c6:	db19      	blt.n	80051fc <_strtol_l.constprop.0+0xc0>
 80051c8:	fb06 4603 	mla	r6, r6, r3, r4
 80051cc:	f04f 0c01 	mov.w	ip, #1
 80051d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80051d4:	e7e8      	b.n	80051a8 <_strtol_l.constprop.0+0x6c>
 80051d6:	2c2b      	cmp	r4, #43	; 0x2b
 80051d8:	bf04      	itt	eq
 80051da:	782c      	ldrbeq	r4, [r5, #0]
 80051dc:	1cb5      	addeq	r5, r6, #2
 80051de:	e7ca      	b.n	8005176 <_strtol_l.constprop.0+0x3a>
 80051e0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80051e4:	f1be 0f19 	cmp.w	lr, #25
 80051e8:	d801      	bhi.n	80051ee <_strtol_l.constprop.0+0xb2>
 80051ea:	3c37      	subs	r4, #55	; 0x37
 80051ec:	e7e2      	b.n	80051b4 <_strtol_l.constprop.0+0x78>
 80051ee:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80051f2:	f1be 0f19 	cmp.w	lr, #25
 80051f6:	d804      	bhi.n	8005202 <_strtol_l.constprop.0+0xc6>
 80051f8:	3c57      	subs	r4, #87	; 0x57
 80051fa:	e7db      	b.n	80051b4 <_strtol_l.constprop.0+0x78>
 80051fc:	f04f 3cff 	mov.w	ip, #4294967295
 8005200:	e7e6      	b.n	80051d0 <_strtol_l.constprop.0+0x94>
 8005202:	f1bc 0f00 	cmp.w	ip, #0
 8005206:	da05      	bge.n	8005214 <_strtol_l.constprop.0+0xd8>
 8005208:	2322      	movs	r3, #34	; 0x22
 800520a:	6003      	str	r3, [r0, #0]
 800520c:	4646      	mov	r6, r8
 800520e:	b942      	cbnz	r2, 8005222 <_strtol_l.constprop.0+0xe6>
 8005210:	4630      	mov	r0, r6
 8005212:	e79e      	b.n	8005152 <_strtol_l.constprop.0+0x16>
 8005214:	b107      	cbz	r7, 8005218 <_strtol_l.constprop.0+0xdc>
 8005216:	4276      	negs	r6, r6
 8005218:	2a00      	cmp	r2, #0
 800521a:	d0f9      	beq.n	8005210 <_strtol_l.constprop.0+0xd4>
 800521c:	f1bc 0f00 	cmp.w	ip, #0
 8005220:	d000      	beq.n	8005224 <_strtol_l.constprop.0+0xe8>
 8005222:	1e69      	subs	r1, r5, #1
 8005224:	6011      	str	r1, [r2, #0]
 8005226:	e7f3      	b.n	8005210 <_strtol_l.constprop.0+0xd4>
 8005228:	2430      	movs	r4, #48	; 0x30
 800522a:	2b00      	cmp	r3, #0
 800522c:	d1b1      	bne.n	8005192 <_strtol_l.constprop.0+0x56>
 800522e:	2308      	movs	r3, #8
 8005230:	e7af      	b.n	8005192 <_strtol_l.constprop.0+0x56>
 8005232:	2c30      	cmp	r4, #48	; 0x30
 8005234:	d0a5      	beq.n	8005182 <_strtol_l.constprop.0+0x46>
 8005236:	230a      	movs	r3, #10
 8005238:	e7ab      	b.n	8005192 <_strtol_l.constprop.0+0x56>
 800523a:	bf00      	nop
 800523c:	080056d8 	.word	0x080056d8

08005240 <_strtol_r>:
 8005240:	f7ff bf7c 	b.w	800513c <_strtol_l.constprop.0>

08005244 <_strtoul_l.constprop.0>:
 8005244:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005248:	4f36      	ldr	r7, [pc, #216]	; (8005324 <_strtoul_l.constprop.0+0xe0>)
 800524a:	4686      	mov	lr, r0
 800524c:	460d      	mov	r5, r1
 800524e:	4628      	mov	r0, r5
 8005250:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005254:	5de6      	ldrb	r6, [r4, r7]
 8005256:	f016 0608 	ands.w	r6, r6, #8
 800525a:	d1f8      	bne.n	800524e <_strtoul_l.constprop.0+0xa>
 800525c:	2c2d      	cmp	r4, #45	; 0x2d
 800525e:	d12f      	bne.n	80052c0 <_strtoul_l.constprop.0+0x7c>
 8005260:	782c      	ldrb	r4, [r5, #0]
 8005262:	2601      	movs	r6, #1
 8005264:	1c85      	adds	r5, r0, #2
 8005266:	2b00      	cmp	r3, #0
 8005268:	d057      	beq.n	800531a <_strtoul_l.constprop.0+0xd6>
 800526a:	2b10      	cmp	r3, #16
 800526c:	d109      	bne.n	8005282 <_strtoul_l.constprop.0+0x3e>
 800526e:	2c30      	cmp	r4, #48	; 0x30
 8005270:	d107      	bne.n	8005282 <_strtoul_l.constprop.0+0x3e>
 8005272:	7828      	ldrb	r0, [r5, #0]
 8005274:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8005278:	2858      	cmp	r0, #88	; 0x58
 800527a:	d149      	bne.n	8005310 <_strtoul_l.constprop.0+0xcc>
 800527c:	786c      	ldrb	r4, [r5, #1]
 800527e:	2310      	movs	r3, #16
 8005280:	3502      	adds	r5, #2
 8005282:	f04f 38ff 	mov.w	r8, #4294967295
 8005286:	2700      	movs	r7, #0
 8005288:	fbb8 f8f3 	udiv	r8, r8, r3
 800528c:	fb03 f908 	mul.w	r9, r3, r8
 8005290:	ea6f 0909 	mvn.w	r9, r9
 8005294:	4638      	mov	r0, r7
 8005296:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800529a:	f1bc 0f09 	cmp.w	ip, #9
 800529e:	d814      	bhi.n	80052ca <_strtoul_l.constprop.0+0x86>
 80052a0:	4664      	mov	r4, ip
 80052a2:	42a3      	cmp	r3, r4
 80052a4:	dd22      	ble.n	80052ec <_strtoul_l.constprop.0+0xa8>
 80052a6:	2f00      	cmp	r7, #0
 80052a8:	db1d      	blt.n	80052e6 <_strtoul_l.constprop.0+0xa2>
 80052aa:	4580      	cmp	r8, r0
 80052ac:	d31b      	bcc.n	80052e6 <_strtoul_l.constprop.0+0xa2>
 80052ae:	d101      	bne.n	80052b4 <_strtoul_l.constprop.0+0x70>
 80052b0:	45a1      	cmp	r9, r4
 80052b2:	db18      	blt.n	80052e6 <_strtoul_l.constprop.0+0xa2>
 80052b4:	fb00 4003 	mla	r0, r0, r3, r4
 80052b8:	2701      	movs	r7, #1
 80052ba:	f815 4b01 	ldrb.w	r4, [r5], #1
 80052be:	e7ea      	b.n	8005296 <_strtoul_l.constprop.0+0x52>
 80052c0:	2c2b      	cmp	r4, #43	; 0x2b
 80052c2:	bf04      	itt	eq
 80052c4:	782c      	ldrbeq	r4, [r5, #0]
 80052c6:	1c85      	addeq	r5, r0, #2
 80052c8:	e7cd      	b.n	8005266 <_strtoul_l.constprop.0+0x22>
 80052ca:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80052ce:	f1bc 0f19 	cmp.w	ip, #25
 80052d2:	d801      	bhi.n	80052d8 <_strtoul_l.constprop.0+0x94>
 80052d4:	3c37      	subs	r4, #55	; 0x37
 80052d6:	e7e4      	b.n	80052a2 <_strtoul_l.constprop.0+0x5e>
 80052d8:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80052dc:	f1bc 0f19 	cmp.w	ip, #25
 80052e0:	d804      	bhi.n	80052ec <_strtoul_l.constprop.0+0xa8>
 80052e2:	3c57      	subs	r4, #87	; 0x57
 80052e4:	e7dd      	b.n	80052a2 <_strtoul_l.constprop.0+0x5e>
 80052e6:	f04f 37ff 	mov.w	r7, #4294967295
 80052ea:	e7e6      	b.n	80052ba <_strtoul_l.constprop.0+0x76>
 80052ec:	2f00      	cmp	r7, #0
 80052ee:	da07      	bge.n	8005300 <_strtoul_l.constprop.0+0xbc>
 80052f0:	2322      	movs	r3, #34	; 0x22
 80052f2:	f8ce 3000 	str.w	r3, [lr]
 80052f6:	f04f 30ff 	mov.w	r0, #4294967295
 80052fa:	b932      	cbnz	r2, 800530a <_strtoul_l.constprop.0+0xc6>
 80052fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005300:	b106      	cbz	r6, 8005304 <_strtoul_l.constprop.0+0xc0>
 8005302:	4240      	negs	r0, r0
 8005304:	2a00      	cmp	r2, #0
 8005306:	d0f9      	beq.n	80052fc <_strtoul_l.constprop.0+0xb8>
 8005308:	b107      	cbz	r7, 800530c <_strtoul_l.constprop.0+0xc8>
 800530a:	1e69      	subs	r1, r5, #1
 800530c:	6011      	str	r1, [r2, #0]
 800530e:	e7f5      	b.n	80052fc <_strtoul_l.constprop.0+0xb8>
 8005310:	2430      	movs	r4, #48	; 0x30
 8005312:	2b00      	cmp	r3, #0
 8005314:	d1b5      	bne.n	8005282 <_strtoul_l.constprop.0+0x3e>
 8005316:	2308      	movs	r3, #8
 8005318:	e7b3      	b.n	8005282 <_strtoul_l.constprop.0+0x3e>
 800531a:	2c30      	cmp	r4, #48	; 0x30
 800531c:	d0a9      	beq.n	8005272 <_strtoul_l.constprop.0+0x2e>
 800531e:	230a      	movs	r3, #10
 8005320:	e7af      	b.n	8005282 <_strtoul_l.constprop.0+0x3e>
 8005322:	bf00      	nop
 8005324:	080056d8 	.word	0x080056d8

08005328 <_strtoul_r>:
 8005328:	f7ff bf8c 	b.w	8005244 <_strtoul_l.constprop.0>

0800532c <__submore>:
 800532c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005330:	460c      	mov	r4, r1
 8005332:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005334:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005338:	4299      	cmp	r1, r3
 800533a:	d11d      	bne.n	8005378 <__submore+0x4c>
 800533c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005340:	f000 f8aa 	bl	8005498 <_malloc_r>
 8005344:	b918      	cbnz	r0, 800534e <__submore+0x22>
 8005346:	f04f 30ff 	mov.w	r0, #4294967295
 800534a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800534e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005352:	63a3      	str	r3, [r4, #56]	; 0x38
 8005354:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8005358:	6360      	str	r0, [r4, #52]	; 0x34
 800535a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800535e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005362:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8005366:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800536a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800536e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8005372:	6020      	str	r0, [r4, #0]
 8005374:	2000      	movs	r0, #0
 8005376:	e7e8      	b.n	800534a <__submore+0x1e>
 8005378:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800537a:	0077      	lsls	r7, r6, #1
 800537c:	463a      	mov	r2, r7
 800537e:	f000 f8ff 	bl	8005580 <_realloc_r>
 8005382:	4605      	mov	r5, r0
 8005384:	2800      	cmp	r0, #0
 8005386:	d0de      	beq.n	8005346 <__submore+0x1a>
 8005388:	eb00 0806 	add.w	r8, r0, r6
 800538c:	4601      	mov	r1, r0
 800538e:	4632      	mov	r2, r6
 8005390:	4640      	mov	r0, r8
 8005392:	f000 f807 	bl	80053a4 <memcpy>
 8005396:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800539a:	f8c4 8000 	str.w	r8, [r4]
 800539e:	e7e9      	b.n	8005374 <__submore+0x48>

080053a0 <__retarget_lock_acquire_recursive>:
 80053a0:	4770      	bx	lr

080053a2 <__retarget_lock_release_recursive>:
 80053a2:	4770      	bx	lr

080053a4 <memcpy>:
 80053a4:	440a      	add	r2, r1
 80053a6:	4291      	cmp	r1, r2
 80053a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80053ac:	d100      	bne.n	80053b0 <memcpy+0xc>
 80053ae:	4770      	bx	lr
 80053b0:	b510      	push	{r4, lr}
 80053b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80053ba:	4291      	cmp	r1, r2
 80053bc:	d1f9      	bne.n	80053b2 <memcpy+0xe>
 80053be:	bd10      	pop	{r4, pc}

080053c0 <_free_r>:
 80053c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80053c2:	2900      	cmp	r1, #0
 80053c4:	d044      	beq.n	8005450 <_free_r+0x90>
 80053c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053ca:	9001      	str	r0, [sp, #4]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	f1a1 0404 	sub.w	r4, r1, #4
 80053d2:	bfb8      	it	lt
 80053d4:	18e4      	addlt	r4, r4, r3
 80053d6:	f000 f913 	bl	8005600 <__malloc_lock>
 80053da:	4a1e      	ldr	r2, [pc, #120]	; (8005454 <_free_r+0x94>)
 80053dc:	9801      	ldr	r0, [sp, #4]
 80053de:	6813      	ldr	r3, [r2, #0]
 80053e0:	b933      	cbnz	r3, 80053f0 <_free_r+0x30>
 80053e2:	6063      	str	r3, [r4, #4]
 80053e4:	6014      	str	r4, [r2, #0]
 80053e6:	b003      	add	sp, #12
 80053e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80053ec:	f000 b90e 	b.w	800560c <__malloc_unlock>
 80053f0:	42a3      	cmp	r3, r4
 80053f2:	d908      	bls.n	8005406 <_free_r+0x46>
 80053f4:	6825      	ldr	r5, [r4, #0]
 80053f6:	1961      	adds	r1, r4, r5
 80053f8:	428b      	cmp	r3, r1
 80053fa:	bf01      	itttt	eq
 80053fc:	6819      	ldreq	r1, [r3, #0]
 80053fe:	685b      	ldreq	r3, [r3, #4]
 8005400:	1949      	addeq	r1, r1, r5
 8005402:	6021      	streq	r1, [r4, #0]
 8005404:	e7ed      	b.n	80053e2 <_free_r+0x22>
 8005406:	461a      	mov	r2, r3
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	b10b      	cbz	r3, 8005410 <_free_r+0x50>
 800540c:	42a3      	cmp	r3, r4
 800540e:	d9fa      	bls.n	8005406 <_free_r+0x46>
 8005410:	6811      	ldr	r1, [r2, #0]
 8005412:	1855      	adds	r5, r2, r1
 8005414:	42a5      	cmp	r5, r4
 8005416:	d10b      	bne.n	8005430 <_free_r+0x70>
 8005418:	6824      	ldr	r4, [r4, #0]
 800541a:	4421      	add	r1, r4
 800541c:	1854      	adds	r4, r2, r1
 800541e:	42a3      	cmp	r3, r4
 8005420:	6011      	str	r1, [r2, #0]
 8005422:	d1e0      	bne.n	80053e6 <_free_r+0x26>
 8005424:	681c      	ldr	r4, [r3, #0]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	6053      	str	r3, [r2, #4]
 800542a:	4421      	add	r1, r4
 800542c:	6011      	str	r1, [r2, #0]
 800542e:	e7da      	b.n	80053e6 <_free_r+0x26>
 8005430:	d902      	bls.n	8005438 <_free_r+0x78>
 8005432:	230c      	movs	r3, #12
 8005434:	6003      	str	r3, [r0, #0]
 8005436:	e7d6      	b.n	80053e6 <_free_r+0x26>
 8005438:	6825      	ldr	r5, [r4, #0]
 800543a:	1961      	adds	r1, r4, r5
 800543c:	428b      	cmp	r3, r1
 800543e:	bf04      	itt	eq
 8005440:	6819      	ldreq	r1, [r3, #0]
 8005442:	685b      	ldreq	r3, [r3, #4]
 8005444:	6063      	str	r3, [r4, #4]
 8005446:	bf04      	itt	eq
 8005448:	1949      	addeq	r1, r1, r5
 800544a:	6021      	streq	r1, [r4, #0]
 800544c:	6054      	str	r4, [r2, #4]
 800544e:	e7ca      	b.n	80053e6 <_free_r+0x26>
 8005450:	b003      	add	sp, #12
 8005452:	bd30      	pop	{r4, r5, pc}
 8005454:	2000024c 	.word	0x2000024c

08005458 <sbrk_aligned>:
 8005458:	b570      	push	{r4, r5, r6, lr}
 800545a:	4e0e      	ldr	r6, [pc, #56]	; (8005494 <sbrk_aligned+0x3c>)
 800545c:	460c      	mov	r4, r1
 800545e:	6831      	ldr	r1, [r6, #0]
 8005460:	4605      	mov	r5, r0
 8005462:	b911      	cbnz	r1, 800546a <sbrk_aligned+0x12>
 8005464:	f000 f8bc 	bl	80055e0 <_sbrk_r>
 8005468:	6030      	str	r0, [r6, #0]
 800546a:	4621      	mov	r1, r4
 800546c:	4628      	mov	r0, r5
 800546e:	f000 f8b7 	bl	80055e0 <_sbrk_r>
 8005472:	1c43      	adds	r3, r0, #1
 8005474:	d00a      	beq.n	800548c <sbrk_aligned+0x34>
 8005476:	1cc4      	adds	r4, r0, #3
 8005478:	f024 0403 	bic.w	r4, r4, #3
 800547c:	42a0      	cmp	r0, r4
 800547e:	d007      	beq.n	8005490 <sbrk_aligned+0x38>
 8005480:	1a21      	subs	r1, r4, r0
 8005482:	4628      	mov	r0, r5
 8005484:	f000 f8ac 	bl	80055e0 <_sbrk_r>
 8005488:	3001      	adds	r0, #1
 800548a:	d101      	bne.n	8005490 <sbrk_aligned+0x38>
 800548c:	f04f 34ff 	mov.w	r4, #4294967295
 8005490:	4620      	mov	r0, r4
 8005492:	bd70      	pop	{r4, r5, r6, pc}
 8005494:	20000250 	.word	0x20000250

08005498 <_malloc_r>:
 8005498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800549c:	1ccd      	adds	r5, r1, #3
 800549e:	f025 0503 	bic.w	r5, r5, #3
 80054a2:	3508      	adds	r5, #8
 80054a4:	2d0c      	cmp	r5, #12
 80054a6:	bf38      	it	cc
 80054a8:	250c      	movcc	r5, #12
 80054aa:	2d00      	cmp	r5, #0
 80054ac:	4607      	mov	r7, r0
 80054ae:	db01      	blt.n	80054b4 <_malloc_r+0x1c>
 80054b0:	42a9      	cmp	r1, r5
 80054b2:	d905      	bls.n	80054c0 <_malloc_r+0x28>
 80054b4:	230c      	movs	r3, #12
 80054b6:	603b      	str	r3, [r7, #0]
 80054b8:	2600      	movs	r6, #0
 80054ba:	4630      	mov	r0, r6
 80054bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054c0:	4e2e      	ldr	r6, [pc, #184]	; (800557c <_malloc_r+0xe4>)
 80054c2:	f000 f89d 	bl	8005600 <__malloc_lock>
 80054c6:	6833      	ldr	r3, [r6, #0]
 80054c8:	461c      	mov	r4, r3
 80054ca:	bb34      	cbnz	r4, 800551a <_malloc_r+0x82>
 80054cc:	4629      	mov	r1, r5
 80054ce:	4638      	mov	r0, r7
 80054d0:	f7ff ffc2 	bl	8005458 <sbrk_aligned>
 80054d4:	1c43      	adds	r3, r0, #1
 80054d6:	4604      	mov	r4, r0
 80054d8:	d14d      	bne.n	8005576 <_malloc_r+0xde>
 80054da:	6834      	ldr	r4, [r6, #0]
 80054dc:	4626      	mov	r6, r4
 80054de:	2e00      	cmp	r6, #0
 80054e0:	d140      	bne.n	8005564 <_malloc_r+0xcc>
 80054e2:	6823      	ldr	r3, [r4, #0]
 80054e4:	4631      	mov	r1, r6
 80054e6:	4638      	mov	r0, r7
 80054e8:	eb04 0803 	add.w	r8, r4, r3
 80054ec:	f000 f878 	bl	80055e0 <_sbrk_r>
 80054f0:	4580      	cmp	r8, r0
 80054f2:	d13a      	bne.n	800556a <_malloc_r+0xd2>
 80054f4:	6821      	ldr	r1, [r4, #0]
 80054f6:	3503      	adds	r5, #3
 80054f8:	1a6d      	subs	r5, r5, r1
 80054fa:	f025 0503 	bic.w	r5, r5, #3
 80054fe:	3508      	adds	r5, #8
 8005500:	2d0c      	cmp	r5, #12
 8005502:	bf38      	it	cc
 8005504:	250c      	movcc	r5, #12
 8005506:	4629      	mov	r1, r5
 8005508:	4638      	mov	r0, r7
 800550a:	f7ff ffa5 	bl	8005458 <sbrk_aligned>
 800550e:	3001      	adds	r0, #1
 8005510:	d02b      	beq.n	800556a <_malloc_r+0xd2>
 8005512:	6823      	ldr	r3, [r4, #0]
 8005514:	442b      	add	r3, r5
 8005516:	6023      	str	r3, [r4, #0]
 8005518:	e00e      	b.n	8005538 <_malloc_r+0xa0>
 800551a:	6822      	ldr	r2, [r4, #0]
 800551c:	1b52      	subs	r2, r2, r5
 800551e:	d41e      	bmi.n	800555e <_malloc_r+0xc6>
 8005520:	2a0b      	cmp	r2, #11
 8005522:	d916      	bls.n	8005552 <_malloc_r+0xba>
 8005524:	1961      	adds	r1, r4, r5
 8005526:	42a3      	cmp	r3, r4
 8005528:	6025      	str	r5, [r4, #0]
 800552a:	bf18      	it	ne
 800552c:	6059      	strne	r1, [r3, #4]
 800552e:	6863      	ldr	r3, [r4, #4]
 8005530:	bf08      	it	eq
 8005532:	6031      	streq	r1, [r6, #0]
 8005534:	5162      	str	r2, [r4, r5]
 8005536:	604b      	str	r3, [r1, #4]
 8005538:	4638      	mov	r0, r7
 800553a:	f104 060b 	add.w	r6, r4, #11
 800553e:	f000 f865 	bl	800560c <__malloc_unlock>
 8005542:	f026 0607 	bic.w	r6, r6, #7
 8005546:	1d23      	adds	r3, r4, #4
 8005548:	1af2      	subs	r2, r6, r3
 800554a:	d0b6      	beq.n	80054ba <_malloc_r+0x22>
 800554c:	1b9b      	subs	r3, r3, r6
 800554e:	50a3      	str	r3, [r4, r2]
 8005550:	e7b3      	b.n	80054ba <_malloc_r+0x22>
 8005552:	6862      	ldr	r2, [r4, #4]
 8005554:	42a3      	cmp	r3, r4
 8005556:	bf0c      	ite	eq
 8005558:	6032      	streq	r2, [r6, #0]
 800555a:	605a      	strne	r2, [r3, #4]
 800555c:	e7ec      	b.n	8005538 <_malloc_r+0xa0>
 800555e:	4623      	mov	r3, r4
 8005560:	6864      	ldr	r4, [r4, #4]
 8005562:	e7b2      	b.n	80054ca <_malloc_r+0x32>
 8005564:	4634      	mov	r4, r6
 8005566:	6876      	ldr	r6, [r6, #4]
 8005568:	e7b9      	b.n	80054de <_malloc_r+0x46>
 800556a:	230c      	movs	r3, #12
 800556c:	603b      	str	r3, [r7, #0]
 800556e:	4638      	mov	r0, r7
 8005570:	f000 f84c 	bl	800560c <__malloc_unlock>
 8005574:	e7a1      	b.n	80054ba <_malloc_r+0x22>
 8005576:	6025      	str	r5, [r4, #0]
 8005578:	e7de      	b.n	8005538 <_malloc_r+0xa0>
 800557a:	bf00      	nop
 800557c:	2000024c 	.word	0x2000024c

08005580 <_realloc_r>:
 8005580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005584:	4680      	mov	r8, r0
 8005586:	4614      	mov	r4, r2
 8005588:	460e      	mov	r6, r1
 800558a:	b921      	cbnz	r1, 8005596 <_realloc_r+0x16>
 800558c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005590:	4611      	mov	r1, r2
 8005592:	f7ff bf81 	b.w	8005498 <_malloc_r>
 8005596:	b92a      	cbnz	r2, 80055a4 <_realloc_r+0x24>
 8005598:	f7ff ff12 	bl	80053c0 <_free_r>
 800559c:	4625      	mov	r5, r4
 800559e:	4628      	mov	r0, r5
 80055a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055a4:	f000 f838 	bl	8005618 <_malloc_usable_size_r>
 80055a8:	4284      	cmp	r4, r0
 80055aa:	4607      	mov	r7, r0
 80055ac:	d802      	bhi.n	80055b4 <_realloc_r+0x34>
 80055ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80055b2:	d812      	bhi.n	80055da <_realloc_r+0x5a>
 80055b4:	4621      	mov	r1, r4
 80055b6:	4640      	mov	r0, r8
 80055b8:	f7ff ff6e 	bl	8005498 <_malloc_r>
 80055bc:	4605      	mov	r5, r0
 80055be:	2800      	cmp	r0, #0
 80055c0:	d0ed      	beq.n	800559e <_realloc_r+0x1e>
 80055c2:	42bc      	cmp	r4, r7
 80055c4:	4622      	mov	r2, r4
 80055c6:	4631      	mov	r1, r6
 80055c8:	bf28      	it	cs
 80055ca:	463a      	movcs	r2, r7
 80055cc:	f7ff feea 	bl	80053a4 <memcpy>
 80055d0:	4631      	mov	r1, r6
 80055d2:	4640      	mov	r0, r8
 80055d4:	f7ff fef4 	bl	80053c0 <_free_r>
 80055d8:	e7e1      	b.n	800559e <_realloc_r+0x1e>
 80055da:	4635      	mov	r5, r6
 80055dc:	e7df      	b.n	800559e <_realloc_r+0x1e>
	...

080055e0 <_sbrk_r>:
 80055e0:	b538      	push	{r3, r4, r5, lr}
 80055e2:	4d06      	ldr	r5, [pc, #24]	; (80055fc <_sbrk_r+0x1c>)
 80055e4:	2300      	movs	r3, #0
 80055e6:	4604      	mov	r4, r0
 80055e8:	4608      	mov	r0, r1
 80055ea:	602b      	str	r3, [r5, #0]
 80055ec:	f7fb fe7e 	bl	80012ec <_sbrk>
 80055f0:	1c43      	adds	r3, r0, #1
 80055f2:	d102      	bne.n	80055fa <_sbrk_r+0x1a>
 80055f4:	682b      	ldr	r3, [r5, #0]
 80055f6:	b103      	cbz	r3, 80055fa <_sbrk_r+0x1a>
 80055f8:	6023      	str	r3, [r4, #0]
 80055fa:	bd38      	pop	{r3, r4, r5, pc}
 80055fc:	20000244 	.word	0x20000244

08005600 <__malloc_lock>:
 8005600:	4801      	ldr	r0, [pc, #4]	; (8005608 <__malloc_lock+0x8>)
 8005602:	f7ff becd 	b.w	80053a0 <__retarget_lock_acquire_recursive>
 8005606:	bf00      	nop
 8005608:	20000248 	.word	0x20000248

0800560c <__malloc_unlock>:
 800560c:	4801      	ldr	r0, [pc, #4]	; (8005614 <__malloc_unlock+0x8>)
 800560e:	f7ff bec8 	b.w	80053a2 <__retarget_lock_release_recursive>
 8005612:	bf00      	nop
 8005614:	20000248 	.word	0x20000248

08005618 <_malloc_usable_size_r>:
 8005618:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800561c:	1f18      	subs	r0, r3, #4
 800561e:	2b00      	cmp	r3, #0
 8005620:	bfbc      	itt	lt
 8005622:	580b      	ldrlt	r3, [r1, r0]
 8005624:	18c0      	addlt	r0, r0, r3
 8005626:	4770      	bx	lr

08005628 <_init>:
 8005628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800562a:	bf00      	nop
 800562c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800562e:	bc08      	pop	{r3}
 8005630:	469e      	mov	lr, r3
 8005632:	4770      	bx	lr

08005634 <_fini>:
 8005634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005636:	bf00      	nop
 8005638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800563a:	bc08      	pop	{r3}
 800563c:	469e      	mov	lr, r3
 800563e:	4770      	bx	lr
