
MotorAcceleration.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fbc  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08003180  08003180  00013180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031b4  080031b4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080031b4  080031b4  000131b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080031bc  080031bc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031bc  080031bc  000131bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080031c0  080031c0  000131c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080031c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004f00  2000000c  080031d0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004f0c  080031d0  00024f0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009cc2  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000196c  00000000  00000000  00029cfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000750  00000000  00000000  0002b670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006b8  00000000  00000000  0002bdc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021702  00000000  00000000  0002c478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a39b  00000000  00000000  0004db7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c8551  00000000  00000000  00057f15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00120466  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d14  00000000  00000000  001204b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003168 	.word	0x08003168

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08003168 	.word	0x08003168

08000204 <strcmp>:
 8000204:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
 800020c:	2a01      	cmp	r2, #1
 800020e:	bf28      	it	cs
 8000210:	429a      	cmpcs	r2, r3
 8000212:	d0f7      	beq.n	8000204 <strcmp>
 8000214:	1ad0      	subs	r0, r2, r3
 8000216:	4770      	bx	lr

08000218 <strlen>:
 8000218:	4603      	mov	r3, r0
 800021a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021e:	2a00      	cmp	r2, #0
 8000220:	d1fb      	bne.n	800021a <strlen+0x2>
 8000222:	1a18      	subs	r0, r3, r0
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr

08000228 <__aeabi_uldivmod>:
 8000228:	b953      	cbnz	r3, 8000240 <__aeabi_uldivmod+0x18>
 800022a:	b94a      	cbnz	r2, 8000240 <__aeabi_uldivmod+0x18>
 800022c:	2900      	cmp	r1, #0
 800022e:	bf08      	it	eq
 8000230:	2800      	cmpeq	r0, #0
 8000232:	bf1c      	itt	ne
 8000234:	f04f 31ff 	movne.w	r1, #4294967295
 8000238:	f04f 30ff 	movne.w	r0, #4294967295
 800023c:	f000 b974 	b.w	8000528 <__aeabi_idiv0>
 8000240:	f1ad 0c08 	sub.w	ip, sp, #8
 8000244:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000248:	f000 f806 	bl	8000258 <__udivmoddi4>
 800024c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000250:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000254:	b004      	add	sp, #16
 8000256:	4770      	bx	lr

08000258 <__udivmoddi4>:
 8000258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800025c:	9d08      	ldr	r5, [sp, #32]
 800025e:	4604      	mov	r4, r0
 8000260:	468e      	mov	lr, r1
 8000262:	2b00      	cmp	r3, #0
 8000264:	d14d      	bne.n	8000302 <__udivmoddi4+0xaa>
 8000266:	428a      	cmp	r2, r1
 8000268:	4694      	mov	ip, r2
 800026a:	d969      	bls.n	8000340 <__udivmoddi4+0xe8>
 800026c:	fab2 f282 	clz	r2, r2
 8000270:	b152      	cbz	r2, 8000288 <__udivmoddi4+0x30>
 8000272:	fa01 f302 	lsl.w	r3, r1, r2
 8000276:	f1c2 0120 	rsb	r1, r2, #32
 800027a:	fa20 f101 	lsr.w	r1, r0, r1
 800027e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000282:	ea41 0e03 	orr.w	lr, r1, r3
 8000286:	4094      	lsls	r4, r2
 8000288:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800028c:	0c21      	lsrs	r1, r4, #16
 800028e:	fbbe f6f8 	udiv	r6, lr, r8
 8000292:	fa1f f78c 	uxth.w	r7, ip
 8000296:	fb08 e316 	mls	r3, r8, r6, lr
 800029a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800029e:	fb06 f107 	mul.w	r1, r6, r7
 80002a2:	4299      	cmp	r1, r3
 80002a4:	d90a      	bls.n	80002bc <__udivmoddi4+0x64>
 80002a6:	eb1c 0303 	adds.w	r3, ip, r3
 80002aa:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ae:	f080 811f 	bcs.w	80004f0 <__udivmoddi4+0x298>
 80002b2:	4299      	cmp	r1, r3
 80002b4:	f240 811c 	bls.w	80004f0 <__udivmoddi4+0x298>
 80002b8:	3e02      	subs	r6, #2
 80002ba:	4463      	add	r3, ip
 80002bc:	1a5b      	subs	r3, r3, r1
 80002be:	b2a4      	uxth	r4, r4
 80002c0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002c4:	fb08 3310 	mls	r3, r8, r0, r3
 80002c8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002cc:	fb00 f707 	mul.w	r7, r0, r7
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	d90a      	bls.n	80002ea <__udivmoddi4+0x92>
 80002d4:	eb1c 0404 	adds.w	r4, ip, r4
 80002d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002dc:	f080 810a 	bcs.w	80004f4 <__udivmoddi4+0x29c>
 80002e0:	42a7      	cmp	r7, r4
 80002e2:	f240 8107 	bls.w	80004f4 <__udivmoddi4+0x29c>
 80002e6:	4464      	add	r4, ip
 80002e8:	3802      	subs	r0, #2
 80002ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ee:	1be4      	subs	r4, r4, r7
 80002f0:	2600      	movs	r6, #0
 80002f2:	b11d      	cbz	r5, 80002fc <__udivmoddi4+0xa4>
 80002f4:	40d4      	lsrs	r4, r2
 80002f6:	2300      	movs	r3, #0
 80002f8:	e9c5 4300 	strd	r4, r3, [r5]
 80002fc:	4631      	mov	r1, r6
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	428b      	cmp	r3, r1
 8000304:	d909      	bls.n	800031a <__udivmoddi4+0xc2>
 8000306:	2d00      	cmp	r5, #0
 8000308:	f000 80ef 	beq.w	80004ea <__udivmoddi4+0x292>
 800030c:	2600      	movs	r6, #0
 800030e:	e9c5 0100 	strd	r0, r1, [r5]
 8000312:	4630      	mov	r0, r6
 8000314:	4631      	mov	r1, r6
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	fab3 f683 	clz	r6, r3
 800031e:	2e00      	cmp	r6, #0
 8000320:	d14a      	bne.n	80003b8 <__udivmoddi4+0x160>
 8000322:	428b      	cmp	r3, r1
 8000324:	d302      	bcc.n	800032c <__udivmoddi4+0xd4>
 8000326:	4282      	cmp	r2, r0
 8000328:	f200 80f9 	bhi.w	800051e <__udivmoddi4+0x2c6>
 800032c:	1a84      	subs	r4, r0, r2
 800032e:	eb61 0303 	sbc.w	r3, r1, r3
 8000332:	2001      	movs	r0, #1
 8000334:	469e      	mov	lr, r3
 8000336:	2d00      	cmp	r5, #0
 8000338:	d0e0      	beq.n	80002fc <__udivmoddi4+0xa4>
 800033a:	e9c5 4e00 	strd	r4, lr, [r5]
 800033e:	e7dd      	b.n	80002fc <__udivmoddi4+0xa4>
 8000340:	b902      	cbnz	r2, 8000344 <__udivmoddi4+0xec>
 8000342:	deff      	udf	#255	; 0xff
 8000344:	fab2 f282 	clz	r2, r2
 8000348:	2a00      	cmp	r2, #0
 800034a:	f040 8092 	bne.w	8000472 <__udivmoddi4+0x21a>
 800034e:	eba1 010c 	sub.w	r1, r1, ip
 8000352:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000356:	fa1f fe8c 	uxth.w	lr, ip
 800035a:	2601      	movs	r6, #1
 800035c:	0c20      	lsrs	r0, r4, #16
 800035e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000362:	fb07 1113 	mls	r1, r7, r3, r1
 8000366:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800036a:	fb0e f003 	mul.w	r0, lr, r3
 800036e:	4288      	cmp	r0, r1
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0x12c>
 8000372:	eb1c 0101 	adds.w	r1, ip, r1
 8000376:	f103 38ff 	add.w	r8, r3, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x12a>
 800037c:	4288      	cmp	r0, r1
 800037e:	f200 80cb 	bhi.w	8000518 <__udivmoddi4+0x2c0>
 8000382:	4643      	mov	r3, r8
 8000384:	1a09      	subs	r1, r1, r0
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb1 f0f7 	udiv	r0, r1, r7
 800038c:	fb07 1110 	mls	r1, r7, r0, r1
 8000390:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000394:	fb0e fe00 	mul.w	lr, lr, r0
 8000398:	45a6      	cmp	lr, r4
 800039a:	d908      	bls.n	80003ae <__udivmoddi4+0x156>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a4:	d202      	bcs.n	80003ac <__udivmoddi4+0x154>
 80003a6:	45a6      	cmp	lr, r4
 80003a8:	f200 80bb 	bhi.w	8000522 <__udivmoddi4+0x2ca>
 80003ac:	4608      	mov	r0, r1
 80003ae:	eba4 040e 	sub.w	r4, r4, lr
 80003b2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003b6:	e79c      	b.n	80002f2 <__udivmoddi4+0x9a>
 80003b8:	f1c6 0720 	rsb	r7, r6, #32
 80003bc:	40b3      	lsls	r3, r6
 80003be:	fa22 fc07 	lsr.w	ip, r2, r7
 80003c2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003c6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ca:	fa01 f306 	lsl.w	r3, r1, r6
 80003ce:	431c      	orrs	r4, r3
 80003d0:	40f9      	lsrs	r1, r7
 80003d2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003d6:	fa00 f306 	lsl.w	r3, r0, r6
 80003da:	fbb1 f8f9 	udiv	r8, r1, r9
 80003de:	0c20      	lsrs	r0, r4, #16
 80003e0:	fa1f fe8c 	uxth.w	lr, ip
 80003e4:	fb09 1118 	mls	r1, r9, r8, r1
 80003e8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003ec:	fb08 f00e 	mul.w	r0, r8, lr
 80003f0:	4288      	cmp	r0, r1
 80003f2:	fa02 f206 	lsl.w	r2, r2, r6
 80003f6:	d90b      	bls.n	8000410 <__udivmoddi4+0x1b8>
 80003f8:	eb1c 0101 	adds.w	r1, ip, r1
 80003fc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000400:	f080 8088 	bcs.w	8000514 <__udivmoddi4+0x2bc>
 8000404:	4288      	cmp	r0, r1
 8000406:	f240 8085 	bls.w	8000514 <__udivmoddi4+0x2bc>
 800040a:	f1a8 0802 	sub.w	r8, r8, #2
 800040e:	4461      	add	r1, ip
 8000410:	1a09      	subs	r1, r1, r0
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb1 f0f9 	udiv	r0, r1, r9
 8000418:	fb09 1110 	mls	r1, r9, r0, r1
 800041c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000420:	fb00 fe0e 	mul.w	lr, r0, lr
 8000424:	458e      	cmp	lr, r1
 8000426:	d908      	bls.n	800043a <__udivmoddi4+0x1e2>
 8000428:	eb1c 0101 	adds.w	r1, ip, r1
 800042c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000430:	d26c      	bcs.n	800050c <__udivmoddi4+0x2b4>
 8000432:	458e      	cmp	lr, r1
 8000434:	d96a      	bls.n	800050c <__udivmoddi4+0x2b4>
 8000436:	3802      	subs	r0, #2
 8000438:	4461      	add	r1, ip
 800043a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800043e:	fba0 9402 	umull	r9, r4, r0, r2
 8000442:	eba1 010e 	sub.w	r1, r1, lr
 8000446:	42a1      	cmp	r1, r4
 8000448:	46c8      	mov	r8, r9
 800044a:	46a6      	mov	lr, r4
 800044c:	d356      	bcc.n	80004fc <__udivmoddi4+0x2a4>
 800044e:	d053      	beq.n	80004f8 <__udivmoddi4+0x2a0>
 8000450:	b15d      	cbz	r5, 800046a <__udivmoddi4+0x212>
 8000452:	ebb3 0208 	subs.w	r2, r3, r8
 8000456:	eb61 010e 	sbc.w	r1, r1, lr
 800045a:	fa01 f707 	lsl.w	r7, r1, r7
 800045e:	fa22 f306 	lsr.w	r3, r2, r6
 8000462:	40f1      	lsrs	r1, r6
 8000464:	431f      	orrs	r7, r3
 8000466:	e9c5 7100 	strd	r7, r1, [r5]
 800046a:	2600      	movs	r6, #0
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	f1c2 0320 	rsb	r3, r2, #32
 8000476:	40d8      	lsrs	r0, r3
 8000478:	fa0c fc02 	lsl.w	ip, ip, r2
 800047c:	fa21 f303 	lsr.w	r3, r1, r3
 8000480:	4091      	lsls	r1, r2
 8000482:	4301      	orrs	r1, r0
 8000484:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000488:	fa1f fe8c 	uxth.w	lr, ip
 800048c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000490:	fb07 3610 	mls	r6, r7, r0, r3
 8000494:	0c0b      	lsrs	r3, r1, #16
 8000496:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800049a:	fb00 f60e 	mul.w	r6, r0, lr
 800049e:	429e      	cmp	r6, r3
 80004a0:	fa04 f402 	lsl.w	r4, r4, r2
 80004a4:	d908      	bls.n	80004b8 <__udivmoddi4+0x260>
 80004a6:	eb1c 0303 	adds.w	r3, ip, r3
 80004aa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ae:	d22f      	bcs.n	8000510 <__udivmoddi4+0x2b8>
 80004b0:	429e      	cmp	r6, r3
 80004b2:	d92d      	bls.n	8000510 <__udivmoddi4+0x2b8>
 80004b4:	3802      	subs	r0, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	1b9b      	subs	r3, r3, r6
 80004ba:	b289      	uxth	r1, r1
 80004bc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004c0:	fb07 3316 	mls	r3, r7, r6, r3
 80004c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c8:	fb06 f30e 	mul.w	r3, r6, lr
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x28a>
 80004d0:	eb1c 0101 	adds.w	r1, ip, r1
 80004d4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004d8:	d216      	bcs.n	8000508 <__udivmoddi4+0x2b0>
 80004da:	428b      	cmp	r3, r1
 80004dc:	d914      	bls.n	8000508 <__udivmoddi4+0x2b0>
 80004de:	3e02      	subs	r6, #2
 80004e0:	4461      	add	r1, ip
 80004e2:	1ac9      	subs	r1, r1, r3
 80004e4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004e8:	e738      	b.n	800035c <__udivmoddi4+0x104>
 80004ea:	462e      	mov	r6, r5
 80004ec:	4628      	mov	r0, r5
 80004ee:	e705      	b.n	80002fc <__udivmoddi4+0xa4>
 80004f0:	4606      	mov	r6, r0
 80004f2:	e6e3      	b.n	80002bc <__udivmoddi4+0x64>
 80004f4:	4618      	mov	r0, r3
 80004f6:	e6f8      	b.n	80002ea <__udivmoddi4+0x92>
 80004f8:	454b      	cmp	r3, r9
 80004fa:	d2a9      	bcs.n	8000450 <__udivmoddi4+0x1f8>
 80004fc:	ebb9 0802 	subs.w	r8, r9, r2
 8000500:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000504:	3801      	subs	r0, #1
 8000506:	e7a3      	b.n	8000450 <__udivmoddi4+0x1f8>
 8000508:	4646      	mov	r6, r8
 800050a:	e7ea      	b.n	80004e2 <__udivmoddi4+0x28a>
 800050c:	4620      	mov	r0, r4
 800050e:	e794      	b.n	800043a <__udivmoddi4+0x1e2>
 8000510:	4640      	mov	r0, r8
 8000512:	e7d1      	b.n	80004b8 <__udivmoddi4+0x260>
 8000514:	46d0      	mov	r8, sl
 8000516:	e77b      	b.n	8000410 <__udivmoddi4+0x1b8>
 8000518:	3b02      	subs	r3, #2
 800051a:	4461      	add	r1, ip
 800051c:	e732      	b.n	8000384 <__udivmoddi4+0x12c>
 800051e:	4630      	mov	r0, r6
 8000520:	e709      	b.n	8000336 <__udivmoddi4+0xde>
 8000522:	4464      	add	r4, ip
 8000524:	3802      	subs	r0, #2
 8000526:	e742      	b.n	80003ae <__udivmoddi4+0x156>

08000528 <__aeabi_idiv0>:
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop

0800052c <initializeBuffer>:
#include "UARTBuffer.h"
#include "main.h"
#include "stm32f4xx_hal.h"

// Function to initialize the circular buffer
void initializeBuffer(UartBuffer *buffer) {
 800052c:	b480      	push	{r7}
 800052e:	b083      	sub	sp, #12
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
	buffer->front = 0;
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800053a:	461a      	mov	r2, r3
 800053c:	2300      	movs	r3, #0
 800053e:	f8c2 3e20 	str.w	r3, [r2, #3616]	; 0xe20
	buffer->rear = -1;
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000548:	461a      	mov	r2, r3
 800054a:	f04f 33ff 	mov.w	r3, #4294967295
 800054e:	f8c2 3e24 	str.w	r3, [r2, #3620]	; 0xe24
	buffer->count = 0;
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000558:	461a      	mov	r2, r3
 800055a:	2300      	movs	r3, #0
 800055c:	f8c2 3e28 	str.w	r3, [r2, #3624]	; 0xe28
}
 8000560:	bf00      	nop
 8000562:	370c      	adds	r7, #12
 8000564:	46bd      	mov	sp, r7
 8000566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056a:	4770      	bx	lr

0800056c <addToBuffer>:

// Function to add to the circular buffer
// returns 1 if successfully adds to buffer, 0 if buffer is full
int addToBuffer(UartBuffer * buffer, const char * message, UART_HandleTypeDef *huart) {
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	60b9      	str	r1, [r7, #8]
 8000576:	607a      	str	r2, [r7, #4]
	if (buffer->count < BUFFER_SIZE) {
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800057e:	f8d3 3e28 	ldr.w	r3, [r3, #3624]	; 0xe28
 8000582:	2b63      	cmp	r3, #99	; 0x63
 8000584:	dc3d      	bgt.n	8000602 <addToBuffer+0x96>
        buffer->rear = (buffer->rear + 1) % BUFFER_SIZE;
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800058c:	f8d3 3e24 	ldr.w	r3, [r3, #3620]	; 0xe24
 8000590:	1c5a      	adds	r2, r3, #1
 8000592:	4b1e      	ldr	r3, [pc, #120]	; (800060c <addToBuffer+0xa0>)
 8000594:	fb83 1302 	smull	r1, r3, r3, r2
 8000598:	1159      	asrs	r1, r3, #5
 800059a:	17d3      	asrs	r3, r2, #31
 800059c:	1acb      	subs	r3, r1, r3
 800059e:	2164      	movs	r1, #100	; 0x64
 80005a0:	fb01 f303 	mul.w	r3, r1, r3
 80005a4:	1ad3      	subs	r3, r2, r3
 80005a6:	68fa      	ldr	r2, [r7, #12]
 80005a8:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 80005ac:	f8c2 3e24 	str.w	r3, [r2, #3620]	; 0xe24
        strncpy(buffer->messages[buffer->rear].message, message, MAX_MESSAGE_SIZE - 1);
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80005b6:	f8d3 3e24 	ldr.w	r3, [r3, #3620]	; 0xe24
 80005ba:	22c8      	movs	r2, #200	; 0xc8
 80005bc:	fb02 f303 	mul.w	r3, r2, r3
 80005c0:	68fa      	ldr	r2, [r7, #12]
 80005c2:	4413      	add	r3, r2
 80005c4:	22c7      	movs	r2, #199	; 0xc7
 80005c6:	68b9      	ldr	r1, [r7, #8]
 80005c8:	4618      	mov	r0, r3
 80005ca:	f002 fdb9 	bl	8003140 <strncpy>
        buffer->messages[buffer->rear].message[MAX_MESSAGE_SIZE - 1] = '\0'; // Ensure null-termination
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80005d4:	f8d3 3e24 	ldr.w	r3, [r3, #3620]	; 0xe24
 80005d8:	68fa      	ldr	r2, [r7, #12]
 80005da:	21c8      	movs	r1, #200	; 0xc8
 80005dc:	fb01 f303 	mul.w	r3, r1, r3
 80005e0:	4413      	add	r3, r2
 80005e2:	33c7      	adds	r3, #199	; 0xc7
 80005e4:	2200      	movs	r2, #0
 80005e6:	701a      	strb	r2, [r3, #0]
        buffer->count++;
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80005ee:	f8d3 3e28 	ldr.w	r3, [r3, #3624]	; 0xe28
 80005f2:	3301      	adds	r3, #1
 80005f4:	68fa      	ldr	r2, [r7, #12]
 80005f6:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 80005fa:	f8c2 3e28 	str.w	r3, [r2, #3624]	; 0xe28
        return 1;
 80005fe:	2301      	movs	r3, #1
 8000600:	e000      	b.n	8000604 <addToBuffer+0x98>
	} else {
		return 0;
 8000602:	2300      	movs	r3, #0
	}
}
 8000604:	4618      	mov	r0, r3
 8000606:	3710      	adds	r7, #16
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	51eb851f 	.word	0x51eb851f

08000610 <removeFromBuffer>:

// Function to remove from the circular buffer
UartMessage removeFromBuffer(UartBuffer * buffer, UART_HandleTypeDef *huart) {
 8000610:	b580      	push	{r7, lr}
 8000612:	b0e8      	sub	sp, #416	; 0x1a0
 8000614:	af00      	add	r7, sp, #0
 8000616:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800061a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800061e:	6018      	str	r0, [r3, #0]
 8000620:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000624:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8000628:	6019      	str	r1, [r3, #0]
 800062a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800062e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8000632:	601a      	str	r2, [r3, #0]
	UartMessage underflowMessage;
	underflowMessage.message[0] = '\0';
 8000634:	2300      	movs	r3, #0
 8000636:	f887 30d8 	strb.w	r3, [r7, #216]	; 0xd8

	if (buffer->count > 0) {
 800063a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800063e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000648:	f8d3 3e28 	ldr.w	r3, [r3, #3624]	; 0xe28
 800064c:	2b00      	cmp	r3, #0
 800064e:	dd5a      	ble.n	8000706 <removeFromBuffer+0xf6>
        UartMessage dequeuedMessage = buffer->messages[buffer->front];
 8000650:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000654:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800065e:	f8d3 3e20 	ldr.w	r3, [r3, #3616]	; 0xe20
 8000662:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8000666:	f5a2 70c8 	sub.w	r0, r2, #400	; 0x190
 800066a:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 800066e:	f5a2 72cc 	sub.w	r2, r2, #408	; 0x198
 8000672:	6812      	ldr	r2, [r2, #0]
 8000674:	21c8      	movs	r1, #200	; 0xc8
 8000676:	fb01 f303 	mul.w	r3, r1, r3
 800067a:	4413      	add	r3, r2
 800067c:	4619      	mov	r1, r3
 800067e:	23c8      	movs	r3, #200	; 0xc8
 8000680:	461a      	mov	r2, r3
 8000682:	f002 fd47 	bl	8003114 <memcpy>
        buffer->front = (buffer->front + 1) % BUFFER_SIZE;
 8000686:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800068a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000694:	f8d3 3e20 	ldr.w	r3, [r3, #3616]	; 0xe20
 8000698:	1c5a      	adds	r2, r3, #1
 800069a:	4b25      	ldr	r3, [pc, #148]	; (8000730 <removeFromBuffer+0x120>)
 800069c:	fb83 1302 	smull	r1, r3, r3, r2
 80006a0:	1159      	asrs	r1, r3, #5
 80006a2:	17d3      	asrs	r3, r2, #31
 80006a4:	1acb      	subs	r3, r1, r3
 80006a6:	2164      	movs	r1, #100	; 0x64
 80006a8:	fb01 f303 	mul.w	r3, r1, r3
 80006ac:	1ad3      	subs	r3, r2, r3
 80006ae:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 80006b2:	f5a2 72cc 	sub.w	r2, r2, #408	; 0x198
 80006b6:	6812      	ldr	r2, [r2, #0]
 80006b8:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 80006bc:	f8c2 3e20 	str.w	r3, [r2, #3616]	; 0xe20
        buffer->count--;
 80006c0:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80006c4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80006ce:	f8d3 3e28 	ldr.w	r3, [r3, #3624]	; 0xe28
 80006d2:	3b01      	subs	r3, #1
 80006d4:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 80006d8:	f5a2 72cc 	sub.w	r2, r2, #408	; 0x198
 80006dc:	6812      	ldr	r2, [r2, #0]
 80006de:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 80006e2:	f8c2 3e28 	str.w	r3, [r2, #3624]	; 0xe28
        return dequeuedMessage;
 80006e6:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80006ea:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80006ee:	681a      	ldr	r2, [r3, #0]
 80006f0:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80006f4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80006f8:	4610      	mov	r0, r2
 80006fa:	4619      	mov	r1, r3
 80006fc:	23c8      	movs	r3, #200	; 0xc8
 80006fe:	461a      	mov	r2, r3
 8000700:	f002 fd08 	bl	8003114 <memcpy>
	} else {
		return underflowMessage;
	}
}
 8000704:	e00b      	b.n	800071e <removeFromBuffer+0x10e>
		return underflowMessage;
 8000706:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800070a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4618      	mov	r0, r3
 8000712:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8000716:	22c8      	movs	r2, #200	; 0xc8
 8000718:	4619      	mov	r1, r3
 800071a:	f002 fcfb 	bl	8003114 <memcpy>
}
 800071e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000722:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8000726:	6818      	ldr	r0, [r3, #0]
 8000728:	f507 77d0 	add.w	r7, r7, #416	; 0x1a0
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	51eb851f 	.word	0x51eb851f

08000734 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b0b2      	sub	sp, #200	; 0xc8
 8000738:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800073a:	f000 faa3 	bl	8000c84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800073e:	f000 f83b 	bl	80007b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000742:	f000 f8d1 	bl	80008e8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000746:	f000 f8a5 	bl	8000894 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  // start UART:
  HAL_UART_Receive_IT(&huart2, rx_data, 1); // interrupt based UART receive
 800074a:	2201      	movs	r2, #1
 800074c:	4914      	ldr	r1, [pc, #80]	; (80007a0 <main+0x6c>)
 800074e:	4815      	ldr	r0, [pc, #84]	; (80007a4 <main+0x70>)
 8000750:	f001 fd23 	bl	800219a <HAL_UART_Receive_IT>

  // initialize UART buffer:
  initializeBuffer(&IK_Message_Buffer);
 8000754:	4814      	ldr	r0, [pc, #80]	; (80007a8 <main+0x74>)
 8000756:	f7ff fee9 	bl	800052c <initializeBuffer>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  UartMessage recent_command = removeFromBuffer(&IK_Message_Buffer, &huart2);
 800075a:	463b      	mov	r3, r7
 800075c:	4a11      	ldr	r2, [pc, #68]	; (80007a4 <main+0x70>)
 800075e:	4912      	ldr	r1, [pc, #72]	; (80007a8 <main+0x74>)
 8000760:	4618      	mov	r0, r3
 8000762:	f7ff ff55 	bl	8000610 <removeFromBuffer>
	  if (!(strcmp(recent_command.message, "ON"))) {
 8000766:	463b      	mov	r3, r7
 8000768:	4910      	ldr	r1, [pc, #64]	; (80007ac <main+0x78>)
 800076a:	4618      	mov	r0, r3
 800076c:	f7ff fd4a 	bl	8000204 <strcmp>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d105      	bne.n	8000782 <main+0x4e>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000776:	2201      	movs	r2, #1
 8000778:	2120      	movs	r1, #32
 800077a:	480d      	ldr	r0, [pc, #52]	; (80007b0 <main+0x7c>)
 800077c:	f000 fe2c 	bl	80013d8 <HAL_GPIO_WritePin>
 8000780:	e7eb      	b.n	800075a <main+0x26>
	  } else if (!(strcmp(recent_command.message, "OFF"))) {
 8000782:	463b      	mov	r3, r7
 8000784:	490b      	ldr	r1, [pc, #44]	; (80007b4 <main+0x80>)
 8000786:	4618      	mov	r0, r3
 8000788:	f7ff fd3c 	bl	8000204 <strcmp>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d1e3      	bne.n	800075a <main+0x26>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000792:	2200      	movs	r2, #0
 8000794:	2120      	movs	r1, #32
 8000796:	4806      	ldr	r0, [pc, #24]	; (80007b0 <main+0x7c>)
 8000798:	f000 fe1e 	bl	80013d8 <HAL_GPIO_WritePin>
  {
 800079c:	e7dd      	b.n	800075a <main+0x26>
 800079e:	bf00      	nop
 80007a0:	20000070 	.word	0x20000070
 80007a4:	20000028 	.word	0x20000028
 80007a8:	200000dc 	.word	0x200000dc
 80007ac:	08003180 	.word	0x08003180
 80007b0:	40020000 	.word	0x40020000
 80007b4:	08003184 	.word	0x08003184

080007b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b094      	sub	sp, #80	; 0x50
 80007bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007be:	f107 031c 	add.w	r3, r7, #28
 80007c2:	2234      	movs	r2, #52	; 0x34
 80007c4:	2100      	movs	r1, #0
 80007c6:	4618      	mov	r0, r3
 80007c8:	f002 fcb2 	bl	8003130 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007cc:	f107 0308 	add.w	r3, r7, #8
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	605a      	str	r2, [r3, #4]
 80007d6:	609a      	str	r2, [r3, #8]
 80007d8:	60da      	str	r2, [r3, #12]
 80007da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007dc:	2300      	movs	r3, #0
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	4b2a      	ldr	r3, [pc, #168]	; (800088c <SystemClock_Config+0xd4>)
 80007e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e4:	4a29      	ldr	r2, [pc, #164]	; (800088c <SystemClock_Config+0xd4>)
 80007e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ea:	6413      	str	r3, [r2, #64]	; 0x40
 80007ec:	4b27      	ldr	r3, [pc, #156]	; (800088c <SystemClock_Config+0xd4>)
 80007ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007f4:	607b      	str	r3, [r7, #4]
 80007f6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007f8:	2300      	movs	r3, #0
 80007fa:	603b      	str	r3, [r7, #0]
 80007fc:	4b24      	ldr	r3, [pc, #144]	; (8000890 <SystemClock_Config+0xd8>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000804:	4a22      	ldr	r2, [pc, #136]	; (8000890 <SystemClock_Config+0xd8>)
 8000806:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800080a:	6013      	str	r3, [r2, #0]
 800080c:	4b20      	ldr	r3, [pc, #128]	; (8000890 <SystemClock_Config+0xd8>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000814:	603b      	str	r3, [r7, #0]
 8000816:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000818:	2302      	movs	r3, #2
 800081a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800081c:	2301      	movs	r3, #1
 800081e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000820:	2310      	movs	r3, #16
 8000822:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000824:	2302      	movs	r3, #2
 8000826:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000828:	2300      	movs	r3, #0
 800082a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800082c:	2310      	movs	r3, #16
 800082e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000830:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000834:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000836:	2304      	movs	r3, #4
 8000838:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800083a:	2302      	movs	r3, #2
 800083c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800083e:	2302      	movs	r3, #2
 8000840:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000842:	f107 031c 	add.w	r3, r7, #28
 8000846:	4618      	mov	r0, r3
 8000848:	f001 f92a 	bl	8001aa0 <HAL_RCC_OscConfig>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000852:	f000 f929 	bl	8000aa8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000856:	230f      	movs	r3, #15
 8000858:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800085a:	2302      	movs	r3, #2
 800085c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800085e:	2300      	movs	r3, #0
 8000860:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000862:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000866:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000868:	2300      	movs	r3, #0
 800086a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800086c:	f107 0308 	add.w	r3, r7, #8
 8000870:	2102      	movs	r1, #2
 8000872:	4618      	mov	r0, r3
 8000874:	f000 fdca 	bl	800140c <HAL_RCC_ClockConfig>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800087e:	f000 f913 	bl	8000aa8 <Error_Handler>
  }
}
 8000882:	bf00      	nop
 8000884:	3750      	adds	r7, #80	; 0x50
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40023800 	.word	0x40023800
 8000890:	40007000 	.word	0x40007000

08000894 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000898:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 800089a:	4a12      	ldr	r2, [pc, #72]	; (80008e4 <MX_USART2_UART_Init+0x50>)
 800089c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800089e:	4b10      	ldr	r3, [pc, #64]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008a6:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008ac:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008b2:	4b0b      	ldr	r3, [pc, #44]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008b8:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008ba:	220c      	movs	r2, #12
 80008bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008be:	4b08      	ldr	r3, [pc, #32]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c4:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008ca:	4805      	ldr	r0, [pc, #20]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008cc:	f001 fb86 	bl	8001fdc <HAL_UART_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008d6:	f000 f8e7 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	20000028 	.word	0x20000028
 80008e4:	40004400 	.word	0x40004400

080008e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08a      	sub	sp, #40	; 0x28
 80008ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ee:	f107 0314 	add.w	r3, r7, #20
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]
 80008f8:	609a      	str	r2, [r3, #8]
 80008fa:	60da      	str	r2, [r3, #12]
 80008fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	613b      	str	r3, [r7, #16]
 8000902:	4b2d      	ldr	r3, [pc, #180]	; (80009b8 <MX_GPIO_Init+0xd0>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	4a2c      	ldr	r2, [pc, #176]	; (80009b8 <MX_GPIO_Init+0xd0>)
 8000908:	f043 0304 	orr.w	r3, r3, #4
 800090c:	6313      	str	r3, [r2, #48]	; 0x30
 800090e:	4b2a      	ldr	r3, [pc, #168]	; (80009b8 <MX_GPIO_Init+0xd0>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	f003 0304 	and.w	r3, r3, #4
 8000916:	613b      	str	r3, [r7, #16]
 8000918:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	60fb      	str	r3, [r7, #12]
 800091e:	4b26      	ldr	r3, [pc, #152]	; (80009b8 <MX_GPIO_Init+0xd0>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a25      	ldr	r2, [pc, #148]	; (80009b8 <MX_GPIO_Init+0xd0>)
 8000924:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
 800092a:	4b23      	ldr	r3, [pc, #140]	; (80009b8 <MX_GPIO_Init+0xd0>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000932:	60fb      	str	r3, [r7, #12]
 8000934:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	60bb      	str	r3, [r7, #8]
 800093a:	4b1f      	ldr	r3, [pc, #124]	; (80009b8 <MX_GPIO_Init+0xd0>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a1e      	ldr	r2, [pc, #120]	; (80009b8 <MX_GPIO_Init+0xd0>)
 8000940:	f043 0301 	orr.w	r3, r3, #1
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b1c      	ldr	r3, [pc, #112]	; (80009b8 <MX_GPIO_Init+0xd0>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0301 	and.w	r3, r3, #1
 800094e:	60bb      	str	r3, [r7, #8]
 8000950:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	607b      	str	r3, [r7, #4]
 8000956:	4b18      	ldr	r3, [pc, #96]	; (80009b8 <MX_GPIO_Init+0xd0>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a17      	ldr	r2, [pc, #92]	; (80009b8 <MX_GPIO_Init+0xd0>)
 800095c:	f043 0302 	orr.w	r3, r3, #2
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
 8000962:	4b15      	ldr	r3, [pc, #84]	; (80009b8 <MX_GPIO_Init+0xd0>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f003 0302 	and.w	r3, r3, #2
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800096e:	2200      	movs	r2, #0
 8000970:	2120      	movs	r1, #32
 8000972:	4812      	ldr	r0, [pc, #72]	; (80009bc <MX_GPIO_Init+0xd4>)
 8000974:	f000 fd30 	bl	80013d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000978:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800097c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800097e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000982:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000988:	f107 0314 	add.w	r3, r7, #20
 800098c:	4619      	mov	r1, r3
 800098e:	480c      	ldr	r0, [pc, #48]	; (80009c0 <MX_GPIO_Init+0xd8>)
 8000990:	f000 fb8e 	bl	80010b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000994:	2320      	movs	r3, #32
 8000996:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000998:	2301      	movs	r3, #1
 800099a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a0:	2300      	movs	r3, #0
 80009a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009a4:	f107 0314 	add.w	r3, r7, #20
 80009a8:	4619      	mov	r1, r3
 80009aa:	4804      	ldr	r0, [pc, #16]	; (80009bc <MX_GPIO_Init+0xd4>)
 80009ac:	f000 fb80 	bl	80010b0 <HAL_GPIO_Init>

}
 80009b0:	bf00      	nop
 80009b2:	3728      	adds	r7, #40	; 0x28
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	40023800 	.word	0x40023800
 80009bc:	40020000 	.word	0x40020000
 80009c0:	40020800 	.word	0x40020800

080009c4 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 4 */

// we come to this function after a successful receive
// huart = the uart that was configured for this receive
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b084      	sub	sp, #16
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009cc:	b672      	cpsid	i
}
 80009ce:	bf00      	nop
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
  __disable_irq();

  uint8_t i;
  if (huart->Instance == USART2) { // make sure we're working with our correct instance of UART (PA2-3 = USART2 TX/RX)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a2b      	ldr	r2, [pc, #172]	; (8000a84 <HAL_UART_RxCpltCallback+0xc0>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d14d      	bne.n	8000a76 <HAL_UART_RxCpltCallback+0xb2>

	  if (rx_indx == 0) {
 80009da:	4b2b      	ldr	r3, [pc, #172]	; (8000a88 <HAL_UART_RxCpltCallback+0xc4>)
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d10c      	bne.n	80009fc <HAL_UART_RxCpltCallback+0x38>
		  for (i = 0; i < 100; i++) {
 80009e2:	2300      	movs	r3, #0
 80009e4:	73fb      	strb	r3, [r7, #15]
 80009e6:	e006      	b.n	80009f6 <HAL_UART_RxCpltCallback+0x32>
			  rx_buffer[i] = 0; // clear the buffer for a new message once the user clicked enter
 80009e8:	7bfb      	ldrb	r3, [r7, #15]
 80009ea:	4a28      	ldr	r2, [pc, #160]	; (8000a8c <HAL_UART_RxCpltCallback+0xc8>)
 80009ec:	2100      	movs	r1, #0
 80009ee:	54d1      	strb	r1, [r2, r3]
		  for (i = 0; i < 100; i++) {
 80009f0:	7bfb      	ldrb	r3, [r7, #15]
 80009f2:	3301      	adds	r3, #1
 80009f4:	73fb      	strb	r3, [r7, #15]
 80009f6:	7bfb      	ldrb	r3, [r7, #15]
 80009f8:	2b63      	cmp	r3, #99	; 0x63
 80009fa:	d9f5      	bls.n	80009e8 <HAL_UART_RxCpltCallback+0x24>
		  }
	  }

	  if (rx_data[0] != 13) { // enter button = ascii 13
 80009fc:	4b24      	ldr	r3, [pc, #144]	; (8000a90 <HAL_UART_RxCpltCallback+0xcc>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	2b0d      	cmp	r3, #13
 8000a02:	d015      	beq.n	8000a30 <HAL_UART_RxCpltCallback+0x6c>
		  rx_buffer[rx_indx++] = rx_data[0]; // reading a byte at a time in our RX buffer
 8000a04:	4b20      	ldr	r3, [pc, #128]	; (8000a88 <HAL_UART_RxCpltCallback+0xc4>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	1c5a      	adds	r2, r3, #1
 8000a0a:	b2d1      	uxtb	r1, r2
 8000a0c:	4a1e      	ldr	r2, [pc, #120]	; (8000a88 <HAL_UART_RxCpltCallback+0xc4>)
 8000a0e:	7011      	strb	r1, [r2, #0]
 8000a10:	461a      	mov	r2, r3
 8000a12:	4b1f      	ldr	r3, [pc, #124]	; (8000a90 <HAL_UART_RxCpltCallback+0xcc>)
 8000a14:	7819      	ldrb	r1, [r3, #0]
 8000a16:	4b1d      	ldr	r3, [pc, #116]	; (8000a8c <HAL_UART_RxCpltCallback+0xc8>)
 8000a18:	5499      	strb	r1, [r3, r2]
 8000a1a:	e01d      	b.n	8000a58 <HAL_UART_RxCpltCallback+0x94>
	  } else {

		  /* NOW NEED TO ADD THIS TO OUR UART BUFFER */
		  while (!addToBuffer(&IK_Message_Buffer, (const char *) rx_buffer, huart)) {
			  HAL_UART_Transmit(&huart2, (uint8_t *) "Buffer Full\n", 12, 100);
 8000a1c:	2364      	movs	r3, #100	; 0x64
 8000a1e:	220c      	movs	r2, #12
 8000a20:	491c      	ldr	r1, [pc, #112]	; (8000a94 <HAL_UART_RxCpltCallback+0xd0>)
 8000a22:	481d      	ldr	r0, [pc, #116]	; (8000a98 <HAL_UART_RxCpltCallback+0xd4>)
 8000a24:	f001 fb27 	bl	8002076 <HAL_UART_Transmit>
  __ASM volatile ("cpsie i" : : : "memory");
 8000a28:	b662      	cpsie	i
}
 8000a2a:	bf00      	nop
  __ASM volatile ("cpsid i" : : : "memory");
 8000a2c:	b672      	cpsid	i
}
 8000a2e:	bf00      	nop
		  while (!addToBuffer(&IK_Message_Buffer, (const char *) rx_buffer, huart)) {
 8000a30:	687a      	ldr	r2, [r7, #4]
 8000a32:	4916      	ldr	r1, [pc, #88]	; (8000a8c <HAL_UART_RxCpltCallback+0xc8>)
 8000a34:	4819      	ldr	r0, [pc, #100]	; (8000a9c <HAL_UART_RxCpltCallback+0xd8>)
 8000a36:	f7ff fd99 	bl	800056c <addToBuffer>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d0ed      	beq.n	8000a1c <HAL_UART_RxCpltCallback+0x58>
			  __enable_irq();
			  // if all pwm callbacks are done then we can reliably push a message off the uart buffer here
			  __disable_irq();
		  } // keep spinning until we can successfully add to the buffer

		  rx_indx = 0; // if user has clicked the enter button, compare our rx_buffer with desired string, then clear the buffer for next message
 8000a40:	4b11      	ldr	r3, [pc, #68]	; (8000a88 <HAL_UART_RxCpltCallback+0xc4>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	701a      	strb	r2, [r3, #0]
		  transfer_cplt = 1; // set flag
 8000a46:	4b16      	ldr	r3, [pc, #88]	; (8000aa0 <HAL_UART_RxCpltCallback+0xdc>)
 8000a48:	2201      	movs	r2, #1
 8000a4a:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart2, (uint8_t *)"\n\r", 2, 100);
 8000a4c:	2364      	movs	r3, #100	; 0x64
 8000a4e:	2202      	movs	r2, #2
 8000a50:	4914      	ldr	r1, [pc, #80]	; (8000aa4 <HAL_UART_RxCpltCallback+0xe0>)
 8000a52:	4811      	ldr	r0, [pc, #68]	; (8000a98 <HAL_UART_RxCpltCallback+0xd4>)
 8000a54:	f001 fb0f 	bl	8002076 <HAL_UART_Transmit>
	  }

	  HAL_UART_Receive_IT(&huart2, rx_data, 1); // initialize to interrupt based receive
 8000a58:	2201      	movs	r2, #1
 8000a5a:	490d      	ldr	r1, [pc, #52]	; (8000a90 <HAL_UART_RxCpltCallback+0xcc>)
 8000a5c:	480e      	ldr	r0, [pc, #56]	; (8000a98 <HAL_UART_RxCpltCallback+0xd4>)
 8000a5e:	f001 fb9c 	bl	800219a <HAL_UART_Receive_IT>
	  HAL_UART_Transmit(&huart2, rx_data, strlen((char *)rx_data), 100); // initialize to transmit as we write new data to the rx_data byte(s)
 8000a62:	480b      	ldr	r0, [pc, #44]	; (8000a90 <HAL_UART_RxCpltCallback+0xcc>)
 8000a64:	f7ff fbd8 	bl	8000218 <strlen>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	b29a      	uxth	r2, r3
 8000a6c:	2364      	movs	r3, #100	; 0x64
 8000a6e:	4908      	ldr	r1, [pc, #32]	; (8000a90 <HAL_UART_RxCpltCallback+0xcc>)
 8000a70:	4809      	ldr	r0, [pc, #36]	; (8000a98 <HAL_UART_RxCpltCallback+0xd4>)
 8000a72:	f001 fb00 	bl	8002076 <HAL_UART_Transmit>
  __ASM volatile ("cpsie i" : : : "memory");
 8000a76:	b662      	cpsie	i
}
 8000a78:	bf00      	nop

  }

  __enable_irq();
}
 8000a7a:	bf00      	nop
 8000a7c:	3710      	adds	r7, #16
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40004400 	.word	0x40004400
 8000a88:	2000006c 	.word	0x2000006c
 8000a8c:	20000074 	.word	0x20000074
 8000a90:	20000070 	.word	0x20000070
 8000a94:	08003188 	.word	0x08003188
 8000a98:	20000028 	.word	0x20000028
 8000a9c:	200000dc 	.word	0x200000dc
 8000aa0:	200000d8 	.word	0x200000d8
 8000aa4:	08003198 	.word	0x08003198

08000aa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000aac:	b672      	cpsid	i
}
 8000aae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <Error_Handler+0x8>
	...

08000ab4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	607b      	str	r3, [r7, #4]
 8000abe:	4b10      	ldr	r3, [pc, #64]	; (8000b00 <HAL_MspInit+0x4c>)
 8000ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac2:	4a0f      	ldr	r2, [pc, #60]	; (8000b00 <HAL_MspInit+0x4c>)
 8000ac4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ac8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aca:	4b0d      	ldr	r3, [pc, #52]	; (8000b00 <HAL_MspInit+0x4c>)
 8000acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ace:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	603b      	str	r3, [r7, #0]
 8000ada:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <HAL_MspInit+0x4c>)
 8000adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ade:	4a08      	ldr	r2, [pc, #32]	; (8000b00 <HAL_MspInit+0x4c>)
 8000ae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae6:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <HAL_MspInit+0x4c>)
 8000ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aee:	603b      	str	r3, [r7, #0]
 8000af0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000af2:	2007      	movs	r0, #7
 8000af4:	f000 fa08 	bl	8000f08 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000af8:	bf00      	nop
 8000afa:	3708      	adds	r7, #8
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	40023800 	.word	0x40023800

08000b04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08a      	sub	sp, #40	; 0x28
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a1d      	ldr	r2, [pc, #116]	; (8000b98 <HAL_UART_MspInit+0x94>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d133      	bne.n	8000b8e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	613b      	str	r3, [r7, #16]
 8000b2a:	4b1c      	ldr	r3, [pc, #112]	; (8000b9c <HAL_UART_MspInit+0x98>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2e:	4a1b      	ldr	r2, [pc, #108]	; (8000b9c <HAL_UART_MspInit+0x98>)
 8000b30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b34:	6413      	str	r3, [r2, #64]	; 0x40
 8000b36:	4b19      	ldr	r3, [pc, #100]	; (8000b9c <HAL_UART_MspInit+0x98>)
 8000b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b3e:	613b      	str	r3, [r7, #16]
 8000b40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	60fb      	str	r3, [r7, #12]
 8000b46:	4b15      	ldr	r3, [pc, #84]	; (8000b9c <HAL_UART_MspInit+0x98>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	4a14      	ldr	r2, [pc, #80]	; (8000b9c <HAL_UART_MspInit+0x98>)
 8000b4c:	f043 0301 	orr.w	r3, r3, #1
 8000b50:	6313      	str	r3, [r2, #48]	; 0x30
 8000b52:	4b12      	ldr	r3, [pc, #72]	; (8000b9c <HAL_UART_MspInit+0x98>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b5e:	230c      	movs	r3, #12
 8000b60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b62:	2302      	movs	r3, #2
 8000b64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6a:	2303      	movs	r3, #3
 8000b6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b6e:	2307      	movs	r3, #7
 8000b70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b72:	f107 0314 	add.w	r3, r7, #20
 8000b76:	4619      	mov	r1, r3
 8000b78:	4809      	ldr	r0, [pc, #36]	; (8000ba0 <HAL_UART_MspInit+0x9c>)
 8000b7a:	f000 fa99 	bl	80010b0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2100      	movs	r1, #0
 8000b82:	2026      	movs	r0, #38	; 0x26
 8000b84:	f000 f9cb 	bl	8000f1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b88:	2026      	movs	r0, #38	; 0x26
 8000b8a:	f000 f9e4 	bl	8000f56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b8e:	bf00      	nop
 8000b90:	3728      	adds	r7, #40	; 0x28
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40004400 	.word	0x40004400
 8000b9c:	40023800 	.word	0x40023800
 8000ba0:	40020000 	.word	0x40020000

08000ba4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ba8:	e7fe      	b.n	8000ba8 <NMI_Handler+0x4>

08000baa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000baa:	b480      	push	{r7}
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bae:	e7fe      	b.n	8000bae <HardFault_Handler+0x4>

08000bb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bb4:	e7fe      	b.n	8000bb4 <MemManage_Handler+0x4>

08000bb6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bba:	e7fe      	b.n	8000bba <BusFault_Handler+0x4>

08000bbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bc0:	e7fe      	b.n	8000bc0 <UsageFault_Handler+0x4>

08000bc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr

08000bd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bd4:	bf00      	nop
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr

08000bde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bde:	b480      	push	{r7}
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr

08000bec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bf0:	f000 f89a 	bl	8000d28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bf4:	bf00      	nop
 8000bf6:	bd80      	pop	{r7, pc}

08000bf8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000bfc:	4802      	ldr	r0, [pc, #8]	; (8000c08 <USART2_IRQHandler+0x10>)
 8000bfe:	f001 fafd 	bl	80021fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	20000028 	.word	0x20000028

08000c0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c10:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <SystemInit+0x20>)
 8000c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c16:	4a05      	ldr	r2, [pc, #20]	; (8000c2c <SystemInit+0x20>)
 8000c18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	e000ed00 	.word	0xe000ed00

08000c30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c68 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c34:	480d      	ldr	r0, [pc, #52]	; (8000c6c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c36:	490e      	ldr	r1, [pc, #56]	; (8000c70 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c38:	4a0e      	ldr	r2, [pc, #56]	; (8000c74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c3c:	e002      	b.n	8000c44 <LoopCopyDataInit>

08000c3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c42:	3304      	adds	r3, #4

08000c44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c48:	d3f9      	bcc.n	8000c3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c4a:	4a0b      	ldr	r2, [pc, #44]	; (8000c78 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c4c:	4c0b      	ldr	r4, [pc, #44]	; (8000c7c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c50:	e001      	b.n	8000c56 <LoopFillZerobss>

08000c52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c54:	3204      	adds	r2, #4

08000c56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c58:	d3fb      	bcc.n	8000c52 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c5a:	f7ff ffd7 	bl	8000c0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c5e:	f002 fa35 	bl	80030cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c62:	f7ff fd67 	bl	8000734 <main>
  bx  lr    
 8000c66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c70:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c74:	080031c4 	.word	0x080031c4
  ldr r2, =_sbss
 8000c78:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c7c:	20004f0c 	.word	0x20004f0c

08000c80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c80:	e7fe      	b.n	8000c80 <ADC_IRQHandler>
	...

08000c84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c88:	4b0e      	ldr	r3, [pc, #56]	; (8000cc4 <HAL_Init+0x40>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a0d      	ldr	r2, [pc, #52]	; (8000cc4 <HAL_Init+0x40>)
 8000c8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c94:	4b0b      	ldr	r3, [pc, #44]	; (8000cc4 <HAL_Init+0x40>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a0a      	ldr	r2, [pc, #40]	; (8000cc4 <HAL_Init+0x40>)
 8000c9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ca0:	4b08      	ldr	r3, [pc, #32]	; (8000cc4 <HAL_Init+0x40>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a07      	ldr	r2, [pc, #28]	; (8000cc4 <HAL_Init+0x40>)
 8000ca6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000caa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cac:	2003      	movs	r0, #3
 8000cae:	f000 f92b 	bl	8000f08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cb2:	2000      	movs	r0, #0
 8000cb4:	f000 f808 	bl	8000cc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cb8:	f7ff fefc 	bl	8000ab4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cbc:	2300      	movs	r3, #0
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40023c00 	.word	0x40023c00

08000cc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cd0:	4b12      	ldr	r3, [pc, #72]	; (8000d1c <HAL_InitTick+0x54>)
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	4b12      	ldr	r3, [pc, #72]	; (8000d20 <HAL_InitTick+0x58>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	4619      	mov	r1, r3
 8000cda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cde:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f000 f943 	bl	8000f72 <HAL_SYSTICK_Config>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	e00e      	b.n	8000d14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2b0f      	cmp	r3, #15
 8000cfa:	d80a      	bhi.n	8000d12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	6879      	ldr	r1, [r7, #4]
 8000d00:	f04f 30ff 	mov.w	r0, #4294967295
 8000d04:	f000 f90b 	bl	8000f1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d08:	4a06      	ldr	r2, [pc, #24]	; (8000d24 <HAL_InitTick+0x5c>)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	e000      	b.n	8000d14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d12:	2301      	movs	r3, #1
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	3708      	adds	r7, #8
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	20000000 	.word	0x20000000
 8000d20:	20000008 	.word	0x20000008
 8000d24:	20000004 	.word	0x20000004

08000d28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d2c:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <HAL_IncTick+0x20>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	461a      	mov	r2, r3
 8000d32:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <HAL_IncTick+0x24>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4413      	add	r3, r2
 8000d38:	4a04      	ldr	r2, [pc, #16]	; (8000d4c <HAL_IncTick+0x24>)
 8000d3a:	6013      	str	r3, [r2, #0]
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	20000008 	.word	0x20000008
 8000d4c:	20004f08 	.word	0x20004f08

08000d50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  return uwTick;
 8000d54:	4b03      	ldr	r3, [pc, #12]	; (8000d64 <HAL_GetTick+0x14>)
 8000d56:	681b      	ldr	r3, [r3, #0]
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	20004f08 	.word	0x20004f08

08000d68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b085      	sub	sp, #20
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	f003 0307 	and.w	r3, r3, #7
 8000d76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d78:	4b0c      	ldr	r3, [pc, #48]	; (8000dac <__NVIC_SetPriorityGrouping+0x44>)
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d7e:	68ba      	ldr	r2, [r7, #8]
 8000d80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d84:	4013      	ands	r3, r2
 8000d86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d9a:	4a04      	ldr	r2, [pc, #16]	; (8000dac <__NVIC_SetPriorityGrouping+0x44>)
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	60d3      	str	r3, [r2, #12]
}
 8000da0:	bf00      	nop
 8000da2:	3714      	adds	r7, #20
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	e000ed00 	.word	0xe000ed00

08000db0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000db4:	4b04      	ldr	r3, [pc, #16]	; (8000dc8 <__NVIC_GetPriorityGrouping+0x18>)
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	0a1b      	lsrs	r3, r3, #8
 8000dba:	f003 0307 	and.w	r3, r3, #7
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	e000ed00 	.word	0xe000ed00

08000dcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	db0b      	blt.n	8000df6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dde:	79fb      	ldrb	r3, [r7, #7]
 8000de0:	f003 021f 	and.w	r2, r3, #31
 8000de4:	4907      	ldr	r1, [pc, #28]	; (8000e04 <__NVIC_EnableIRQ+0x38>)
 8000de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dea:	095b      	lsrs	r3, r3, #5
 8000dec:	2001      	movs	r0, #1
 8000dee:	fa00 f202 	lsl.w	r2, r0, r2
 8000df2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000df6:	bf00      	nop
 8000df8:	370c      	adds	r7, #12
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	e000e100 	.word	0xe000e100

08000e08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	6039      	str	r1, [r7, #0]
 8000e12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	db0a      	blt.n	8000e32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	b2da      	uxtb	r2, r3
 8000e20:	490c      	ldr	r1, [pc, #48]	; (8000e54 <__NVIC_SetPriority+0x4c>)
 8000e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e26:	0112      	lsls	r2, r2, #4
 8000e28:	b2d2      	uxtb	r2, r2
 8000e2a:	440b      	add	r3, r1
 8000e2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e30:	e00a      	b.n	8000e48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	b2da      	uxtb	r2, r3
 8000e36:	4908      	ldr	r1, [pc, #32]	; (8000e58 <__NVIC_SetPriority+0x50>)
 8000e38:	79fb      	ldrb	r3, [r7, #7]
 8000e3a:	f003 030f 	and.w	r3, r3, #15
 8000e3e:	3b04      	subs	r3, #4
 8000e40:	0112      	lsls	r2, r2, #4
 8000e42:	b2d2      	uxtb	r2, r2
 8000e44:	440b      	add	r3, r1
 8000e46:	761a      	strb	r2, [r3, #24]
}
 8000e48:	bf00      	nop
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	e000e100 	.word	0xe000e100
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b089      	sub	sp, #36	; 0x24
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	60f8      	str	r0, [r7, #12]
 8000e64:	60b9      	str	r1, [r7, #8]
 8000e66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	f003 0307 	and.w	r3, r3, #7
 8000e6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	f1c3 0307 	rsb	r3, r3, #7
 8000e76:	2b04      	cmp	r3, #4
 8000e78:	bf28      	it	cs
 8000e7a:	2304      	movcs	r3, #4
 8000e7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	3304      	adds	r3, #4
 8000e82:	2b06      	cmp	r3, #6
 8000e84:	d902      	bls.n	8000e8c <NVIC_EncodePriority+0x30>
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	3b03      	subs	r3, #3
 8000e8a:	e000      	b.n	8000e8e <NVIC_EncodePriority+0x32>
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e90:	f04f 32ff 	mov.w	r2, #4294967295
 8000e94:	69bb      	ldr	r3, [r7, #24]
 8000e96:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9a:	43da      	mvns	r2, r3
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	401a      	ands	r2, r3
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ea4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8000eae:	43d9      	mvns	r1, r3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb4:	4313      	orrs	r3, r2
         );
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3724      	adds	r7, #36	; 0x24
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
	...

08000ec4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	3b01      	subs	r3, #1
 8000ed0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ed4:	d301      	bcc.n	8000eda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e00f      	b.n	8000efa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eda:	4a0a      	ldr	r2, [pc, #40]	; (8000f04 <SysTick_Config+0x40>)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	3b01      	subs	r3, #1
 8000ee0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ee2:	210f      	movs	r1, #15
 8000ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee8:	f7ff ff8e 	bl	8000e08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eec:	4b05      	ldr	r3, [pc, #20]	; (8000f04 <SysTick_Config+0x40>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ef2:	4b04      	ldr	r3, [pc, #16]	; (8000f04 <SysTick_Config+0x40>)
 8000ef4:	2207      	movs	r2, #7
 8000ef6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ef8:	2300      	movs	r3, #0
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	e000e010 	.word	0xe000e010

08000f08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f7ff ff29 	bl	8000d68 <__NVIC_SetPriorityGrouping>
}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b086      	sub	sp, #24
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	4603      	mov	r3, r0
 8000f26:	60b9      	str	r1, [r7, #8]
 8000f28:	607a      	str	r2, [r7, #4]
 8000f2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f30:	f7ff ff3e 	bl	8000db0 <__NVIC_GetPriorityGrouping>
 8000f34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f36:	687a      	ldr	r2, [r7, #4]
 8000f38:	68b9      	ldr	r1, [r7, #8]
 8000f3a:	6978      	ldr	r0, [r7, #20]
 8000f3c:	f7ff ff8e 	bl	8000e5c <NVIC_EncodePriority>
 8000f40:	4602      	mov	r2, r0
 8000f42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f46:	4611      	mov	r1, r2
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff ff5d 	bl	8000e08 <__NVIC_SetPriority>
}
 8000f4e:	bf00      	nop
 8000f50:	3718      	adds	r7, #24
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b082      	sub	sp, #8
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff ff31 	bl	8000dcc <__NVIC_EnableIRQ>
}
 8000f6a:	bf00      	nop
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b082      	sub	sp, #8
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f7ff ffa2 	bl	8000ec4 <SysTick_Config>
 8000f80:	4603      	mov	r3, r0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b084      	sub	sp, #16
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f96:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000f98:	f7ff feda 	bl	8000d50 <HAL_GetTick>
 8000f9c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	2b02      	cmp	r3, #2
 8000fa8:	d008      	beq.n	8000fbc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2280      	movs	r2, #128	; 0x80
 8000fae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	e052      	b.n	8001062 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f022 0216 	bic.w	r2, r2, #22
 8000fca:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	695a      	ldr	r2, [r3, #20]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000fda:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d103      	bne.n	8000fec <HAL_DMA_Abort+0x62>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d007      	beq.n	8000ffc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f022 0208 	bic.w	r2, r2, #8
 8000ffa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f022 0201 	bic.w	r2, r2, #1
 800100a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800100c:	e013      	b.n	8001036 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800100e:	f7ff fe9f 	bl	8000d50 <HAL_GetTick>
 8001012:	4602      	mov	r2, r0
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	1ad3      	subs	r3, r2, r3
 8001018:	2b05      	cmp	r3, #5
 800101a:	d90c      	bls.n	8001036 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2220      	movs	r2, #32
 8001020:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2203      	movs	r2, #3
 8001026:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2200      	movs	r2, #0
 800102e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001032:	2303      	movs	r3, #3
 8001034:	e015      	b.n	8001062 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f003 0301 	and.w	r3, r3, #1
 8001040:	2b00      	cmp	r3, #0
 8001042:	d1e4      	bne.n	800100e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001048:	223f      	movs	r2, #63	; 0x3f
 800104a:	409a      	lsls	r2, r3
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2201      	movs	r2, #1
 8001054:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2200      	movs	r2, #0
 800105c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001060:	2300      	movs	r3, #0
}
 8001062:	4618      	mov	r0, r3
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800106a:	b480      	push	{r7}
 800106c:	b083      	sub	sp, #12
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001078:	b2db      	uxtb	r3, r3
 800107a:	2b02      	cmp	r3, #2
 800107c:	d004      	beq.n	8001088 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2280      	movs	r2, #128	; 0x80
 8001082:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001084:	2301      	movs	r3, #1
 8001086:	e00c      	b.n	80010a2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2205      	movs	r2, #5
 800108c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f022 0201 	bic.w	r2, r2, #1
 800109e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80010a0:	2300      	movs	r3, #0
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	370c      	adds	r7, #12
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
	...

080010b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b089      	sub	sp, #36	; 0x24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010ba:	2300      	movs	r3, #0
 80010bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010be:	2300      	movs	r3, #0
 80010c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010c2:	2300      	movs	r3, #0
 80010c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010c6:	2300      	movs	r3, #0
 80010c8:	61fb      	str	r3, [r7, #28]
 80010ca:	e165      	b.n	8001398 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010cc:	2201      	movs	r2, #1
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	697a      	ldr	r2, [r7, #20]
 80010dc:	4013      	ands	r3, r2
 80010de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010e0:	693a      	ldr	r2, [r7, #16]
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	f040 8154 	bne.w	8001392 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f003 0303 	and.w	r3, r3, #3
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d005      	beq.n	8001102 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010fe:	2b02      	cmp	r3, #2
 8001100:	d130      	bne.n	8001164 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	2203      	movs	r2, #3
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	43db      	mvns	r3, r3
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	4013      	ands	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	68da      	ldr	r2, [r3, #12]
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	4313      	orrs	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001138:	2201      	movs	r2, #1
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	43db      	mvns	r3, r3
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	4013      	ands	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	091b      	lsrs	r3, r3, #4
 800114e:	f003 0201 	and.w	r2, r3, #1
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	4313      	orrs	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f003 0303 	and.w	r3, r3, #3
 800116c:	2b03      	cmp	r3, #3
 800116e:	d017      	beq.n	80011a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	2203      	movs	r2, #3
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	43db      	mvns	r3, r3
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	4013      	ands	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	689a      	ldr	r2, [r3, #8]
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	4313      	orrs	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f003 0303 	and.w	r3, r3, #3
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d123      	bne.n	80011f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	08da      	lsrs	r2, r3, #3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	3208      	adds	r2, #8
 80011b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	f003 0307 	and.w	r3, r3, #7
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	220f      	movs	r2, #15
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	43db      	mvns	r3, r3
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	4013      	ands	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	691a      	ldr	r2, [r3, #16]
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	f003 0307 	and.w	r3, r3, #7
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	08da      	lsrs	r2, r3, #3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	3208      	adds	r2, #8
 80011ee:	69b9      	ldr	r1, [r7, #24]
 80011f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	2203      	movs	r2, #3
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	43db      	mvns	r3, r3
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	4013      	ands	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f003 0203 	and.w	r2, r3, #3
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	4313      	orrs	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001230:	2b00      	cmp	r3, #0
 8001232:	f000 80ae 	beq.w	8001392 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	60fb      	str	r3, [r7, #12]
 800123a:	4b5d      	ldr	r3, [pc, #372]	; (80013b0 <HAL_GPIO_Init+0x300>)
 800123c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123e:	4a5c      	ldr	r2, [pc, #368]	; (80013b0 <HAL_GPIO_Init+0x300>)
 8001240:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001244:	6453      	str	r3, [r2, #68]	; 0x44
 8001246:	4b5a      	ldr	r3, [pc, #360]	; (80013b0 <HAL_GPIO_Init+0x300>)
 8001248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001252:	4a58      	ldr	r2, [pc, #352]	; (80013b4 <HAL_GPIO_Init+0x304>)
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	089b      	lsrs	r3, r3, #2
 8001258:	3302      	adds	r3, #2
 800125a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800125e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	f003 0303 	and.w	r3, r3, #3
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	220f      	movs	r2, #15
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	43db      	mvns	r3, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4013      	ands	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a4f      	ldr	r2, [pc, #316]	; (80013b8 <HAL_GPIO_Init+0x308>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d025      	beq.n	80012ca <HAL_GPIO_Init+0x21a>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a4e      	ldr	r2, [pc, #312]	; (80013bc <HAL_GPIO_Init+0x30c>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d01f      	beq.n	80012c6 <HAL_GPIO_Init+0x216>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a4d      	ldr	r2, [pc, #308]	; (80013c0 <HAL_GPIO_Init+0x310>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d019      	beq.n	80012c2 <HAL_GPIO_Init+0x212>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a4c      	ldr	r2, [pc, #304]	; (80013c4 <HAL_GPIO_Init+0x314>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d013      	beq.n	80012be <HAL_GPIO_Init+0x20e>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a4b      	ldr	r2, [pc, #300]	; (80013c8 <HAL_GPIO_Init+0x318>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d00d      	beq.n	80012ba <HAL_GPIO_Init+0x20a>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4a4a      	ldr	r2, [pc, #296]	; (80013cc <HAL_GPIO_Init+0x31c>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d007      	beq.n	80012b6 <HAL_GPIO_Init+0x206>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4a49      	ldr	r2, [pc, #292]	; (80013d0 <HAL_GPIO_Init+0x320>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d101      	bne.n	80012b2 <HAL_GPIO_Init+0x202>
 80012ae:	2306      	movs	r3, #6
 80012b0:	e00c      	b.n	80012cc <HAL_GPIO_Init+0x21c>
 80012b2:	2307      	movs	r3, #7
 80012b4:	e00a      	b.n	80012cc <HAL_GPIO_Init+0x21c>
 80012b6:	2305      	movs	r3, #5
 80012b8:	e008      	b.n	80012cc <HAL_GPIO_Init+0x21c>
 80012ba:	2304      	movs	r3, #4
 80012bc:	e006      	b.n	80012cc <HAL_GPIO_Init+0x21c>
 80012be:	2303      	movs	r3, #3
 80012c0:	e004      	b.n	80012cc <HAL_GPIO_Init+0x21c>
 80012c2:	2302      	movs	r3, #2
 80012c4:	e002      	b.n	80012cc <HAL_GPIO_Init+0x21c>
 80012c6:	2301      	movs	r3, #1
 80012c8:	e000      	b.n	80012cc <HAL_GPIO_Init+0x21c>
 80012ca:	2300      	movs	r3, #0
 80012cc:	69fa      	ldr	r2, [r7, #28]
 80012ce:	f002 0203 	and.w	r2, r2, #3
 80012d2:	0092      	lsls	r2, r2, #2
 80012d4:	4093      	lsls	r3, r2
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	4313      	orrs	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012dc:	4935      	ldr	r1, [pc, #212]	; (80013b4 <HAL_GPIO_Init+0x304>)
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	089b      	lsrs	r3, r3, #2
 80012e2:	3302      	adds	r3, #2
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012ea:	4b3a      	ldr	r3, [pc, #232]	; (80013d4 <HAL_GPIO_Init+0x324>)
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	43db      	mvns	r3, r3
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	4013      	ands	r3, r2
 80012f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d003      	beq.n	800130e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	4313      	orrs	r3, r2
 800130c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800130e:	4a31      	ldr	r2, [pc, #196]	; (80013d4 <HAL_GPIO_Init+0x324>)
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001314:	4b2f      	ldr	r3, [pc, #188]	; (80013d4 <HAL_GPIO_Init+0x324>)
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	43db      	mvns	r3, r3
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	4013      	ands	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800132c:	2b00      	cmp	r3, #0
 800132e:	d003      	beq.n	8001338 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	4313      	orrs	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001338:	4a26      	ldr	r2, [pc, #152]	; (80013d4 <HAL_GPIO_Init+0x324>)
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800133e:	4b25      	ldr	r3, [pc, #148]	; (80013d4 <HAL_GPIO_Init+0x324>)
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	43db      	mvns	r3, r3
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	4013      	ands	r3, r2
 800134c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d003      	beq.n	8001362 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	4313      	orrs	r3, r2
 8001360:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001362:	4a1c      	ldr	r2, [pc, #112]	; (80013d4 <HAL_GPIO_Init+0x324>)
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001368:	4b1a      	ldr	r3, [pc, #104]	; (80013d4 <HAL_GPIO_Init+0x324>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	43db      	mvns	r3, r3
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	4013      	ands	r3, r2
 8001376:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001380:	2b00      	cmp	r3, #0
 8001382:	d003      	beq.n	800138c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	4313      	orrs	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800138c:	4a11      	ldr	r2, [pc, #68]	; (80013d4 <HAL_GPIO_Init+0x324>)
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	3301      	adds	r3, #1
 8001396:	61fb      	str	r3, [r7, #28]
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	2b0f      	cmp	r3, #15
 800139c:	f67f ae96 	bls.w	80010cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013a0:	bf00      	nop
 80013a2:	bf00      	nop
 80013a4:	3724      	adds	r7, #36	; 0x24
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	40023800 	.word	0x40023800
 80013b4:	40013800 	.word	0x40013800
 80013b8:	40020000 	.word	0x40020000
 80013bc:	40020400 	.word	0x40020400
 80013c0:	40020800 	.word	0x40020800
 80013c4:	40020c00 	.word	0x40020c00
 80013c8:	40021000 	.word	0x40021000
 80013cc:	40021400 	.word	0x40021400
 80013d0:	40021800 	.word	0x40021800
 80013d4:	40013c00 	.word	0x40013c00

080013d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	460b      	mov	r3, r1
 80013e2:	807b      	strh	r3, [r7, #2]
 80013e4:	4613      	mov	r3, r2
 80013e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013e8:	787b      	ldrb	r3, [r7, #1]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d003      	beq.n	80013f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013ee:	887a      	ldrh	r2, [r7, #2]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013f4:	e003      	b.n	80013fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013f6:	887b      	ldrh	r3, [r7, #2]
 80013f8:	041a      	lsls	r2, r3, #16
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	619a      	str	r2, [r3, #24]
}
 80013fe:	bf00      	nop
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
	...

0800140c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d101      	bne.n	8001420 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	e0cc      	b.n	80015ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001420:	4b68      	ldr	r3, [pc, #416]	; (80015c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 030f 	and.w	r3, r3, #15
 8001428:	683a      	ldr	r2, [r7, #0]
 800142a:	429a      	cmp	r2, r3
 800142c:	d90c      	bls.n	8001448 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800142e:	4b65      	ldr	r3, [pc, #404]	; (80015c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001430:	683a      	ldr	r2, [r7, #0]
 8001432:	b2d2      	uxtb	r2, r2
 8001434:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001436:	4b63      	ldr	r3, [pc, #396]	; (80015c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 030f 	and.w	r3, r3, #15
 800143e:	683a      	ldr	r2, [r7, #0]
 8001440:	429a      	cmp	r2, r3
 8001442:	d001      	beq.n	8001448 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	e0b8      	b.n	80015ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 0302 	and.w	r3, r3, #2
 8001450:	2b00      	cmp	r3, #0
 8001452:	d020      	beq.n	8001496 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 0304 	and.w	r3, r3, #4
 800145c:	2b00      	cmp	r3, #0
 800145e:	d005      	beq.n	800146c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001460:	4b59      	ldr	r3, [pc, #356]	; (80015c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	4a58      	ldr	r2, [pc, #352]	; (80015c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001466:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800146a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 0308 	and.w	r3, r3, #8
 8001474:	2b00      	cmp	r3, #0
 8001476:	d005      	beq.n	8001484 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001478:	4b53      	ldr	r3, [pc, #332]	; (80015c8 <HAL_RCC_ClockConfig+0x1bc>)
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	4a52      	ldr	r2, [pc, #328]	; (80015c8 <HAL_RCC_ClockConfig+0x1bc>)
 800147e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001482:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001484:	4b50      	ldr	r3, [pc, #320]	; (80015c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	494d      	ldr	r1, [pc, #308]	; (80015c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001492:	4313      	orrs	r3, r2
 8001494:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d044      	beq.n	800152c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d107      	bne.n	80014ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014aa:	4b47      	ldr	r3, [pc, #284]	; (80015c8 <HAL_RCC_ClockConfig+0x1bc>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d119      	bne.n	80014ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e07f      	b.n	80015ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d003      	beq.n	80014ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014c6:	2b03      	cmp	r3, #3
 80014c8:	d107      	bne.n	80014da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014ca:	4b3f      	ldr	r3, [pc, #252]	; (80015c8 <HAL_RCC_ClockConfig+0x1bc>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d109      	bne.n	80014ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e06f      	b.n	80015ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014da:	4b3b      	ldr	r3, [pc, #236]	; (80015c8 <HAL_RCC_ClockConfig+0x1bc>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d101      	bne.n	80014ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e067      	b.n	80015ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014ea:	4b37      	ldr	r3, [pc, #220]	; (80015c8 <HAL_RCC_ClockConfig+0x1bc>)
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	f023 0203 	bic.w	r2, r3, #3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	4934      	ldr	r1, [pc, #208]	; (80015c8 <HAL_RCC_ClockConfig+0x1bc>)
 80014f8:	4313      	orrs	r3, r2
 80014fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014fc:	f7ff fc28 	bl	8000d50 <HAL_GetTick>
 8001500:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001502:	e00a      	b.n	800151a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001504:	f7ff fc24 	bl	8000d50 <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001512:	4293      	cmp	r3, r2
 8001514:	d901      	bls.n	800151a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e04f      	b.n	80015ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800151a:	4b2b      	ldr	r3, [pc, #172]	; (80015c8 <HAL_RCC_ClockConfig+0x1bc>)
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	f003 020c 	and.w	r2, r3, #12
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	429a      	cmp	r2, r3
 800152a:	d1eb      	bne.n	8001504 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800152c:	4b25      	ldr	r3, [pc, #148]	; (80015c4 <HAL_RCC_ClockConfig+0x1b8>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 030f 	and.w	r3, r3, #15
 8001534:	683a      	ldr	r2, [r7, #0]
 8001536:	429a      	cmp	r2, r3
 8001538:	d20c      	bcs.n	8001554 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800153a:	4b22      	ldr	r3, [pc, #136]	; (80015c4 <HAL_RCC_ClockConfig+0x1b8>)
 800153c:	683a      	ldr	r2, [r7, #0]
 800153e:	b2d2      	uxtb	r2, r2
 8001540:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001542:	4b20      	ldr	r3, [pc, #128]	; (80015c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 030f 	and.w	r3, r3, #15
 800154a:	683a      	ldr	r2, [r7, #0]
 800154c:	429a      	cmp	r2, r3
 800154e:	d001      	beq.n	8001554 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	e032      	b.n	80015ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 0304 	and.w	r3, r3, #4
 800155c:	2b00      	cmp	r3, #0
 800155e:	d008      	beq.n	8001572 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001560:	4b19      	ldr	r3, [pc, #100]	; (80015c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	4916      	ldr	r1, [pc, #88]	; (80015c8 <HAL_RCC_ClockConfig+0x1bc>)
 800156e:	4313      	orrs	r3, r2
 8001570:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0308 	and.w	r3, r3, #8
 800157a:	2b00      	cmp	r3, #0
 800157c:	d009      	beq.n	8001592 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800157e:	4b12      	ldr	r3, [pc, #72]	; (80015c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	691b      	ldr	r3, [r3, #16]
 800158a:	00db      	lsls	r3, r3, #3
 800158c:	490e      	ldr	r1, [pc, #56]	; (80015c8 <HAL_RCC_ClockConfig+0x1bc>)
 800158e:	4313      	orrs	r3, r2
 8001590:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001592:	f000 f855 	bl	8001640 <HAL_RCC_GetSysClockFreq>
 8001596:	4602      	mov	r2, r0
 8001598:	4b0b      	ldr	r3, [pc, #44]	; (80015c8 <HAL_RCC_ClockConfig+0x1bc>)
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	091b      	lsrs	r3, r3, #4
 800159e:	f003 030f 	and.w	r3, r3, #15
 80015a2:	490a      	ldr	r1, [pc, #40]	; (80015cc <HAL_RCC_ClockConfig+0x1c0>)
 80015a4:	5ccb      	ldrb	r3, [r1, r3]
 80015a6:	fa22 f303 	lsr.w	r3, r2, r3
 80015aa:	4a09      	ldr	r2, [pc, #36]	; (80015d0 <HAL_RCC_ClockConfig+0x1c4>)
 80015ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80015ae:	4b09      	ldr	r3, [pc, #36]	; (80015d4 <HAL_RCC_ClockConfig+0x1c8>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7ff fb88 	bl	8000cc8 <HAL_InitTick>

  return HAL_OK;
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3710      	adds	r7, #16
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40023c00 	.word	0x40023c00
 80015c8:	40023800 	.word	0x40023800
 80015cc:	0800319c 	.word	0x0800319c
 80015d0:	20000000 	.word	0x20000000
 80015d4:	20000004 	.word	0x20000004

080015d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015dc:	4b03      	ldr	r3, [pc, #12]	; (80015ec <HAL_RCC_GetHCLKFreq+0x14>)
 80015de:	681b      	ldr	r3, [r3, #0]
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	20000000 	.word	0x20000000

080015f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80015f4:	f7ff fff0 	bl	80015d8 <HAL_RCC_GetHCLKFreq>
 80015f8:	4602      	mov	r2, r0
 80015fa:	4b05      	ldr	r3, [pc, #20]	; (8001610 <HAL_RCC_GetPCLK1Freq+0x20>)
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	0a9b      	lsrs	r3, r3, #10
 8001600:	f003 0307 	and.w	r3, r3, #7
 8001604:	4903      	ldr	r1, [pc, #12]	; (8001614 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001606:	5ccb      	ldrb	r3, [r1, r3]
 8001608:	fa22 f303 	lsr.w	r3, r2, r3
}
 800160c:	4618      	mov	r0, r3
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40023800 	.word	0x40023800
 8001614:	080031ac 	.word	0x080031ac

08001618 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800161c:	f7ff ffdc 	bl	80015d8 <HAL_RCC_GetHCLKFreq>
 8001620:	4602      	mov	r2, r0
 8001622:	4b05      	ldr	r3, [pc, #20]	; (8001638 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	0b5b      	lsrs	r3, r3, #13
 8001628:	f003 0307 	and.w	r3, r3, #7
 800162c:	4903      	ldr	r1, [pc, #12]	; (800163c <HAL_RCC_GetPCLK2Freq+0x24>)
 800162e:	5ccb      	ldrb	r3, [r1, r3]
 8001630:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001634:	4618      	mov	r0, r3
 8001636:	bd80      	pop	{r7, pc}
 8001638:	40023800 	.word	0x40023800
 800163c:	080031ac 	.word	0x080031ac

08001640 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001640:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001644:	b0ae      	sub	sp, #184	; 0xb8
 8001646:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001648:	2300      	movs	r3, #0
 800164a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800164e:	2300      	movs	r3, #0
 8001650:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001654:	2300      	movs	r3, #0
 8001656:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800165a:	2300      	movs	r3, #0
 800165c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001660:	2300      	movs	r3, #0
 8001662:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001666:	4bcb      	ldr	r3, [pc, #812]	; (8001994 <HAL_RCC_GetSysClockFreq+0x354>)
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	f003 030c 	and.w	r3, r3, #12
 800166e:	2b0c      	cmp	r3, #12
 8001670:	f200 8206 	bhi.w	8001a80 <HAL_RCC_GetSysClockFreq+0x440>
 8001674:	a201      	add	r2, pc, #4	; (adr r2, 800167c <HAL_RCC_GetSysClockFreq+0x3c>)
 8001676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800167a:	bf00      	nop
 800167c:	080016b1 	.word	0x080016b1
 8001680:	08001a81 	.word	0x08001a81
 8001684:	08001a81 	.word	0x08001a81
 8001688:	08001a81 	.word	0x08001a81
 800168c:	080016b9 	.word	0x080016b9
 8001690:	08001a81 	.word	0x08001a81
 8001694:	08001a81 	.word	0x08001a81
 8001698:	08001a81 	.word	0x08001a81
 800169c:	080016c1 	.word	0x080016c1
 80016a0:	08001a81 	.word	0x08001a81
 80016a4:	08001a81 	.word	0x08001a81
 80016a8:	08001a81 	.word	0x08001a81
 80016ac:	080018b1 	.word	0x080018b1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80016b0:	4bb9      	ldr	r3, [pc, #740]	; (8001998 <HAL_RCC_GetSysClockFreq+0x358>)
 80016b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80016b6:	e1e7      	b.n	8001a88 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80016b8:	4bb8      	ldr	r3, [pc, #736]	; (800199c <HAL_RCC_GetSysClockFreq+0x35c>)
 80016ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80016be:	e1e3      	b.n	8001a88 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016c0:	4bb4      	ldr	r3, [pc, #720]	; (8001994 <HAL_RCC_GetSysClockFreq+0x354>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016cc:	4bb1      	ldr	r3, [pc, #708]	; (8001994 <HAL_RCC_GetSysClockFreq+0x354>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d071      	beq.n	80017bc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016d8:	4bae      	ldr	r3, [pc, #696]	; (8001994 <HAL_RCC_GetSysClockFreq+0x354>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	099b      	lsrs	r3, r3, #6
 80016de:	2200      	movs	r2, #0
 80016e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80016e4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80016e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80016ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80016f4:	2300      	movs	r3, #0
 80016f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80016fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80016fe:	4622      	mov	r2, r4
 8001700:	462b      	mov	r3, r5
 8001702:	f04f 0000 	mov.w	r0, #0
 8001706:	f04f 0100 	mov.w	r1, #0
 800170a:	0159      	lsls	r1, r3, #5
 800170c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001710:	0150      	lsls	r0, r2, #5
 8001712:	4602      	mov	r2, r0
 8001714:	460b      	mov	r3, r1
 8001716:	4621      	mov	r1, r4
 8001718:	1a51      	subs	r1, r2, r1
 800171a:	6439      	str	r1, [r7, #64]	; 0x40
 800171c:	4629      	mov	r1, r5
 800171e:	eb63 0301 	sbc.w	r3, r3, r1
 8001722:	647b      	str	r3, [r7, #68]	; 0x44
 8001724:	f04f 0200 	mov.w	r2, #0
 8001728:	f04f 0300 	mov.w	r3, #0
 800172c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001730:	4649      	mov	r1, r9
 8001732:	018b      	lsls	r3, r1, #6
 8001734:	4641      	mov	r1, r8
 8001736:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800173a:	4641      	mov	r1, r8
 800173c:	018a      	lsls	r2, r1, #6
 800173e:	4641      	mov	r1, r8
 8001740:	1a51      	subs	r1, r2, r1
 8001742:	63b9      	str	r1, [r7, #56]	; 0x38
 8001744:	4649      	mov	r1, r9
 8001746:	eb63 0301 	sbc.w	r3, r3, r1
 800174a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800174c:	f04f 0200 	mov.w	r2, #0
 8001750:	f04f 0300 	mov.w	r3, #0
 8001754:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001758:	4649      	mov	r1, r9
 800175a:	00cb      	lsls	r3, r1, #3
 800175c:	4641      	mov	r1, r8
 800175e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001762:	4641      	mov	r1, r8
 8001764:	00ca      	lsls	r2, r1, #3
 8001766:	4610      	mov	r0, r2
 8001768:	4619      	mov	r1, r3
 800176a:	4603      	mov	r3, r0
 800176c:	4622      	mov	r2, r4
 800176e:	189b      	adds	r3, r3, r2
 8001770:	633b      	str	r3, [r7, #48]	; 0x30
 8001772:	462b      	mov	r3, r5
 8001774:	460a      	mov	r2, r1
 8001776:	eb42 0303 	adc.w	r3, r2, r3
 800177a:	637b      	str	r3, [r7, #52]	; 0x34
 800177c:	f04f 0200 	mov.w	r2, #0
 8001780:	f04f 0300 	mov.w	r3, #0
 8001784:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001788:	4629      	mov	r1, r5
 800178a:	024b      	lsls	r3, r1, #9
 800178c:	4621      	mov	r1, r4
 800178e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001792:	4621      	mov	r1, r4
 8001794:	024a      	lsls	r2, r1, #9
 8001796:	4610      	mov	r0, r2
 8001798:	4619      	mov	r1, r3
 800179a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800179e:	2200      	movs	r2, #0
 80017a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80017a4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80017a8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80017ac:	f7fe fd3c 	bl	8000228 <__aeabi_uldivmod>
 80017b0:	4602      	mov	r2, r0
 80017b2:	460b      	mov	r3, r1
 80017b4:	4613      	mov	r3, r2
 80017b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80017ba:	e067      	b.n	800188c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017bc:	4b75      	ldr	r3, [pc, #468]	; (8001994 <HAL_RCC_GetSysClockFreq+0x354>)
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	099b      	lsrs	r3, r3, #6
 80017c2:	2200      	movs	r2, #0
 80017c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80017c8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80017cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80017d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80017d6:	2300      	movs	r3, #0
 80017d8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80017da:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80017de:	4622      	mov	r2, r4
 80017e0:	462b      	mov	r3, r5
 80017e2:	f04f 0000 	mov.w	r0, #0
 80017e6:	f04f 0100 	mov.w	r1, #0
 80017ea:	0159      	lsls	r1, r3, #5
 80017ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017f0:	0150      	lsls	r0, r2, #5
 80017f2:	4602      	mov	r2, r0
 80017f4:	460b      	mov	r3, r1
 80017f6:	4621      	mov	r1, r4
 80017f8:	1a51      	subs	r1, r2, r1
 80017fa:	62b9      	str	r1, [r7, #40]	; 0x28
 80017fc:	4629      	mov	r1, r5
 80017fe:	eb63 0301 	sbc.w	r3, r3, r1
 8001802:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001804:	f04f 0200 	mov.w	r2, #0
 8001808:	f04f 0300 	mov.w	r3, #0
 800180c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001810:	4649      	mov	r1, r9
 8001812:	018b      	lsls	r3, r1, #6
 8001814:	4641      	mov	r1, r8
 8001816:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800181a:	4641      	mov	r1, r8
 800181c:	018a      	lsls	r2, r1, #6
 800181e:	4641      	mov	r1, r8
 8001820:	ebb2 0a01 	subs.w	sl, r2, r1
 8001824:	4649      	mov	r1, r9
 8001826:	eb63 0b01 	sbc.w	fp, r3, r1
 800182a:	f04f 0200 	mov.w	r2, #0
 800182e:	f04f 0300 	mov.w	r3, #0
 8001832:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001836:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800183a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800183e:	4692      	mov	sl, r2
 8001840:	469b      	mov	fp, r3
 8001842:	4623      	mov	r3, r4
 8001844:	eb1a 0303 	adds.w	r3, sl, r3
 8001848:	623b      	str	r3, [r7, #32]
 800184a:	462b      	mov	r3, r5
 800184c:	eb4b 0303 	adc.w	r3, fp, r3
 8001850:	627b      	str	r3, [r7, #36]	; 0x24
 8001852:	f04f 0200 	mov.w	r2, #0
 8001856:	f04f 0300 	mov.w	r3, #0
 800185a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800185e:	4629      	mov	r1, r5
 8001860:	028b      	lsls	r3, r1, #10
 8001862:	4621      	mov	r1, r4
 8001864:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001868:	4621      	mov	r1, r4
 800186a:	028a      	lsls	r2, r1, #10
 800186c:	4610      	mov	r0, r2
 800186e:	4619      	mov	r1, r3
 8001870:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001874:	2200      	movs	r2, #0
 8001876:	673b      	str	r3, [r7, #112]	; 0x70
 8001878:	677a      	str	r2, [r7, #116]	; 0x74
 800187a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800187e:	f7fe fcd3 	bl	8000228 <__aeabi_uldivmod>
 8001882:	4602      	mov	r2, r0
 8001884:	460b      	mov	r3, r1
 8001886:	4613      	mov	r3, r2
 8001888:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800188c:	4b41      	ldr	r3, [pc, #260]	; (8001994 <HAL_RCC_GetSysClockFreq+0x354>)
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	0c1b      	lsrs	r3, r3, #16
 8001892:	f003 0303 	and.w	r3, r3, #3
 8001896:	3301      	adds	r3, #1
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800189e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80018a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80018a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80018ae:	e0eb      	b.n	8001a88 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018b0:	4b38      	ldr	r3, [pc, #224]	; (8001994 <HAL_RCC_GetSysClockFreq+0x354>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018bc:	4b35      	ldr	r3, [pc, #212]	; (8001994 <HAL_RCC_GetSysClockFreq+0x354>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d06b      	beq.n	80019a0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018c8:	4b32      	ldr	r3, [pc, #200]	; (8001994 <HAL_RCC_GetSysClockFreq+0x354>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	099b      	lsrs	r3, r3, #6
 80018ce:	2200      	movs	r2, #0
 80018d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80018d2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80018d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80018d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018da:	663b      	str	r3, [r7, #96]	; 0x60
 80018dc:	2300      	movs	r3, #0
 80018de:	667b      	str	r3, [r7, #100]	; 0x64
 80018e0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80018e4:	4622      	mov	r2, r4
 80018e6:	462b      	mov	r3, r5
 80018e8:	f04f 0000 	mov.w	r0, #0
 80018ec:	f04f 0100 	mov.w	r1, #0
 80018f0:	0159      	lsls	r1, r3, #5
 80018f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018f6:	0150      	lsls	r0, r2, #5
 80018f8:	4602      	mov	r2, r0
 80018fa:	460b      	mov	r3, r1
 80018fc:	4621      	mov	r1, r4
 80018fe:	1a51      	subs	r1, r2, r1
 8001900:	61b9      	str	r1, [r7, #24]
 8001902:	4629      	mov	r1, r5
 8001904:	eb63 0301 	sbc.w	r3, r3, r1
 8001908:	61fb      	str	r3, [r7, #28]
 800190a:	f04f 0200 	mov.w	r2, #0
 800190e:	f04f 0300 	mov.w	r3, #0
 8001912:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001916:	4659      	mov	r1, fp
 8001918:	018b      	lsls	r3, r1, #6
 800191a:	4651      	mov	r1, sl
 800191c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001920:	4651      	mov	r1, sl
 8001922:	018a      	lsls	r2, r1, #6
 8001924:	4651      	mov	r1, sl
 8001926:	ebb2 0801 	subs.w	r8, r2, r1
 800192a:	4659      	mov	r1, fp
 800192c:	eb63 0901 	sbc.w	r9, r3, r1
 8001930:	f04f 0200 	mov.w	r2, #0
 8001934:	f04f 0300 	mov.w	r3, #0
 8001938:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800193c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001940:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001944:	4690      	mov	r8, r2
 8001946:	4699      	mov	r9, r3
 8001948:	4623      	mov	r3, r4
 800194a:	eb18 0303 	adds.w	r3, r8, r3
 800194e:	613b      	str	r3, [r7, #16]
 8001950:	462b      	mov	r3, r5
 8001952:	eb49 0303 	adc.w	r3, r9, r3
 8001956:	617b      	str	r3, [r7, #20]
 8001958:	f04f 0200 	mov.w	r2, #0
 800195c:	f04f 0300 	mov.w	r3, #0
 8001960:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001964:	4629      	mov	r1, r5
 8001966:	024b      	lsls	r3, r1, #9
 8001968:	4621      	mov	r1, r4
 800196a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800196e:	4621      	mov	r1, r4
 8001970:	024a      	lsls	r2, r1, #9
 8001972:	4610      	mov	r0, r2
 8001974:	4619      	mov	r1, r3
 8001976:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800197a:	2200      	movs	r2, #0
 800197c:	65bb      	str	r3, [r7, #88]	; 0x58
 800197e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001980:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001984:	f7fe fc50 	bl	8000228 <__aeabi_uldivmod>
 8001988:	4602      	mov	r2, r0
 800198a:	460b      	mov	r3, r1
 800198c:	4613      	mov	r3, r2
 800198e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001992:	e065      	b.n	8001a60 <HAL_RCC_GetSysClockFreq+0x420>
 8001994:	40023800 	.word	0x40023800
 8001998:	00f42400 	.word	0x00f42400
 800199c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019a0:	4b3d      	ldr	r3, [pc, #244]	; (8001a98 <HAL_RCC_GetSysClockFreq+0x458>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	099b      	lsrs	r3, r3, #6
 80019a6:	2200      	movs	r2, #0
 80019a8:	4618      	mov	r0, r3
 80019aa:	4611      	mov	r1, r2
 80019ac:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80019b0:	653b      	str	r3, [r7, #80]	; 0x50
 80019b2:	2300      	movs	r3, #0
 80019b4:	657b      	str	r3, [r7, #84]	; 0x54
 80019b6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80019ba:	4642      	mov	r2, r8
 80019bc:	464b      	mov	r3, r9
 80019be:	f04f 0000 	mov.w	r0, #0
 80019c2:	f04f 0100 	mov.w	r1, #0
 80019c6:	0159      	lsls	r1, r3, #5
 80019c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019cc:	0150      	lsls	r0, r2, #5
 80019ce:	4602      	mov	r2, r0
 80019d0:	460b      	mov	r3, r1
 80019d2:	4641      	mov	r1, r8
 80019d4:	1a51      	subs	r1, r2, r1
 80019d6:	60b9      	str	r1, [r7, #8]
 80019d8:	4649      	mov	r1, r9
 80019da:	eb63 0301 	sbc.w	r3, r3, r1
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	f04f 0200 	mov.w	r2, #0
 80019e4:	f04f 0300 	mov.w	r3, #0
 80019e8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80019ec:	4659      	mov	r1, fp
 80019ee:	018b      	lsls	r3, r1, #6
 80019f0:	4651      	mov	r1, sl
 80019f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019f6:	4651      	mov	r1, sl
 80019f8:	018a      	lsls	r2, r1, #6
 80019fa:	4651      	mov	r1, sl
 80019fc:	1a54      	subs	r4, r2, r1
 80019fe:	4659      	mov	r1, fp
 8001a00:	eb63 0501 	sbc.w	r5, r3, r1
 8001a04:	f04f 0200 	mov.w	r2, #0
 8001a08:	f04f 0300 	mov.w	r3, #0
 8001a0c:	00eb      	lsls	r3, r5, #3
 8001a0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a12:	00e2      	lsls	r2, r4, #3
 8001a14:	4614      	mov	r4, r2
 8001a16:	461d      	mov	r5, r3
 8001a18:	4643      	mov	r3, r8
 8001a1a:	18e3      	adds	r3, r4, r3
 8001a1c:	603b      	str	r3, [r7, #0]
 8001a1e:	464b      	mov	r3, r9
 8001a20:	eb45 0303 	adc.w	r3, r5, r3
 8001a24:	607b      	str	r3, [r7, #4]
 8001a26:	f04f 0200 	mov.w	r2, #0
 8001a2a:	f04f 0300 	mov.w	r3, #0
 8001a2e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a32:	4629      	mov	r1, r5
 8001a34:	028b      	lsls	r3, r1, #10
 8001a36:	4621      	mov	r1, r4
 8001a38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a3c:	4621      	mov	r1, r4
 8001a3e:	028a      	lsls	r2, r1, #10
 8001a40:	4610      	mov	r0, r2
 8001a42:	4619      	mov	r1, r3
 8001a44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001a48:	2200      	movs	r2, #0
 8001a4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8001a4c:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001a4e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001a52:	f7fe fbe9 	bl	8000228 <__aeabi_uldivmod>
 8001a56:	4602      	mov	r2, r0
 8001a58:	460b      	mov	r3, r1
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001a60:	4b0d      	ldr	r3, [pc, #52]	; (8001a98 <HAL_RCC_GetSysClockFreq+0x458>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	0f1b      	lsrs	r3, r3, #28
 8001a66:	f003 0307 	and.w	r3, r3, #7
 8001a6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001a6e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001a72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a7a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001a7e:	e003      	b.n	8001a88 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a80:	4b06      	ldr	r3, [pc, #24]	; (8001a9c <HAL_RCC_GetSysClockFreq+0x45c>)
 8001a82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001a86:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a88:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	37b8      	adds	r7, #184	; 0xb8
 8001a90:	46bd      	mov	sp, r7
 8001a92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a96:	bf00      	nop
 8001a98:	40023800 	.word	0x40023800
 8001a9c:	00f42400 	.word	0x00f42400

08001aa0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b086      	sub	sp, #24
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d101      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e28d      	b.n	8001fce <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	f000 8083 	beq.w	8001bc6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001ac0:	4b94      	ldr	r3, [pc, #592]	; (8001d14 <HAL_RCC_OscConfig+0x274>)
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	f003 030c 	and.w	r3, r3, #12
 8001ac8:	2b04      	cmp	r3, #4
 8001aca:	d019      	beq.n	8001b00 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001acc:	4b91      	ldr	r3, [pc, #580]	; (8001d14 <HAL_RCC_OscConfig+0x274>)
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001ad4:	2b08      	cmp	r3, #8
 8001ad6:	d106      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001ad8:	4b8e      	ldr	r3, [pc, #568]	; (8001d14 <HAL_RCC_OscConfig+0x274>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ae0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ae4:	d00c      	beq.n	8001b00 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ae6:	4b8b      	ldr	r3, [pc, #556]	; (8001d14 <HAL_RCC_OscConfig+0x274>)
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001aee:	2b0c      	cmp	r3, #12
 8001af0:	d112      	bne.n	8001b18 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001af2:	4b88      	ldr	r3, [pc, #544]	; (8001d14 <HAL_RCC_OscConfig+0x274>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001afa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001afe:	d10b      	bne.n	8001b18 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b00:	4b84      	ldr	r3, [pc, #528]	; (8001d14 <HAL_RCC_OscConfig+0x274>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d05b      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x124>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d157      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e25a      	b.n	8001fce <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b20:	d106      	bne.n	8001b30 <HAL_RCC_OscConfig+0x90>
 8001b22:	4b7c      	ldr	r3, [pc, #496]	; (8001d14 <HAL_RCC_OscConfig+0x274>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a7b      	ldr	r2, [pc, #492]	; (8001d14 <HAL_RCC_OscConfig+0x274>)
 8001b28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b2c:	6013      	str	r3, [r2, #0]
 8001b2e:	e01d      	b.n	8001b6c <HAL_RCC_OscConfig+0xcc>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b38:	d10c      	bne.n	8001b54 <HAL_RCC_OscConfig+0xb4>
 8001b3a:	4b76      	ldr	r3, [pc, #472]	; (8001d14 <HAL_RCC_OscConfig+0x274>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a75      	ldr	r2, [pc, #468]	; (8001d14 <HAL_RCC_OscConfig+0x274>)
 8001b40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b44:	6013      	str	r3, [r2, #0]
 8001b46:	4b73      	ldr	r3, [pc, #460]	; (8001d14 <HAL_RCC_OscConfig+0x274>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a72      	ldr	r2, [pc, #456]	; (8001d14 <HAL_RCC_OscConfig+0x274>)
 8001b4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b50:	6013      	str	r3, [r2, #0]
 8001b52:	e00b      	b.n	8001b6c <HAL_RCC_OscConfig+0xcc>
 8001b54:	4b6f      	ldr	r3, [pc, #444]	; (8001d14 <HAL_RCC_OscConfig+0x274>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a6e      	ldr	r2, [pc, #440]	; (8001d14 <HAL_RCC_OscConfig+0x274>)
 8001b5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b5e:	6013      	str	r3, [r2, #0]
 8001b60:	4b6c      	ldr	r3, [pc, #432]	; (8001d14 <HAL_RCC_OscConfig+0x274>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a6b      	ldr	r2, [pc, #428]	; (8001d14 <HAL_RCC_OscConfig+0x274>)
 8001b66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d013      	beq.n	8001b9c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b74:	f7ff f8ec 	bl	8000d50 <HAL_GetTick>
 8001b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b7a:	e008      	b.n	8001b8e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b7c:	f7ff f8e8 	bl	8000d50 <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	2b64      	cmp	r3, #100	; 0x64
 8001b88:	d901      	bls.n	8001b8e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e21f      	b.n	8001fce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b8e:	4b61      	ldr	r3, [pc, #388]	; (8001d14 <HAL_RCC_OscConfig+0x274>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d0f0      	beq.n	8001b7c <HAL_RCC_OscConfig+0xdc>
 8001b9a:	e014      	b.n	8001bc6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b9c:	f7ff f8d8 	bl	8000d50 <HAL_GetTick>
 8001ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ba2:	e008      	b.n	8001bb6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ba4:	f7ff f8d4 	bl	8000d50 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	2b64      	cmp	r3, #100	; 0x64
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e20b      	b.n	8001fce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bb6:	4b57      	ldr	r3, [pc, #348]	; (8001d14 <HAL_RCC_OscConfig+0x274>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d1f0      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x104>
 8001bc2:	e000      	b.n	8001bc6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d06f      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001bd2:	4b50      	ldr	r3, [pc, #320]	; (8001d14 <HAL_RCC_OscConfig+0x274>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f003 030c 	and.w	r3, r3, #12
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d017      	beq.n	8001c0e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001bde:	4b4d      	ldr	r3, [pc, #308]	; (8001d14 <HAL_RCC_OscConfig+0x274>)
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001be6:	2b08      	cmp	r3, #8
 8001be8:	d105      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001bea:	4b4a      	ldr	r3, [pc, #296]	; (8001d14 <HAL_RCC_OscConfig+0x274>)
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d00b      	beq.n	8001c0e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bf6:	4b47      	ldr	r3, [pc, #284]	; (8001d14 <HAL_RCC_OscConfig+0x274>)
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001bfe:	2b0c      	cmp	r3, #12
 8001c00:	d11c      	bne.n	8001c3c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c02:	4b44      	ldr	r3, [pc, #272]	; (8001d14 <HAL_RCC_OscConfig+0x274>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d116      	bne.n	8001c3c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c0e:	4b41      	ldr	r3, [pc, #260]	; (8001d14 <HAL_RCC_OscConfig+0x274>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d005      	beq.n	8001c26 <HAL_RCC_OscConfig+0x186>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d001      	beq.n	8001c26 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e1d3      	b.n	8001fce <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c26:	4b3b      	ldr	r3, [pc, #236]	; (8001d14 <HAL_RCC_OscConfig+0x274>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	691b      	ldr	r3, [r3, #16]
 8001c32:	00db      	lsls	r3, r3, #3
 8001c34:	4937      	ldr	r1, [pc, #220]	; (8001d14 <HAL_RCC_OscConfig+0x274>)
 8001c36:	4313      	orrs	r3, r2
 8001c38:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c3a:	e03a      	b.n	8001cb2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d020      	beq.n	8001c86 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c44:	4b34      	ldr	r3, [pc, #208]	; (8001d18 <HAL_RCC_OscConfig+0x278>)
 8001c46:	2201      	movs	r2, #1
 8001c48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c4a:	f7ff f881 	bl	8000d50 <HAL_GetTick>
 8001c4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c50:	e008      	b.n	8001c64 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c52:	f7ff f87d 	bl	8000d50 <HAL_GetTick>
 8001c56:	4602      	mov	r2, r0
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d901      	bls.n	8001c64 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001c60:	2303      	movs	r3, #3
 8001c62:	e1b4      	b.n	8001fce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c64:	4b2b      	ldr	r3, [pc, #172]	; (8001d14 <HAL_RCC_OscConfig+0x274>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0302 	and.w	r3, r3, #2
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d0f0      	beq.n	8001c52 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c70:	4b28      	ldr	r3, [pc, #160]	; (8001d14 <HAL_RCC_OscConfig+0x274>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	691b      	ldr	r3, [r3, #16]
 8001c7c:	00db      	lsls	r3, r3, #3
 8001c7e:	4925      	ldr	r1, [pc, #148]	; (8001d14 <HAL_RCC_OscConfig+0x274>)
 8001c80:	4313      	orrs	r3, r2
 8001c82:	600b      	str	r3, [r1, #0]
 8001c84:	e015      	b.n	8001cb2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c86:	4b24      	ldr	r3, [pc, #144]	; (8001d18 <HAL_RCC_OscConfig+0x278>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c8c:	f7ff f860 	bl	8000d50 <HAL_GetTick>
 8001c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c92:	e008      	b.n	8001ca6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c94:	f7ff f85c 	bl	8000d50 <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d901      	bls.n	8001ca6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e193      	b.n	8001fce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ca6:	4b1b      	ldr	r3, [pc, #108]	; (8001d14 <HAL_RCC_OscConfig+0x274>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0302 	and.w	r3, r3, #2
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d1f0      	bne.n	8001c94 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0308 	and.w	r3, r3, #8
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d036      	beq.n	8001d2c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	695b      	ldr	r3, [r3, #20]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d016      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cc6:	4b15      	ldr	r3, [pc, #84]	; (8001d1c <HAL_RCC_OscConfig+0x27c>)
 8001cc8:	2201      	movs	r2, #1
 8001cca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ccc:	f7ff f840 	bl	8000d50 <HAL_GetTick>
 8001cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cd2:	e008      	b.n	8001ce6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cd4:	f7ff f83c 	bl	8000d50 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e173      	b.n	8001fce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ce6:	4b0b      	ldr	r3, [pc, #44]	; (8001d14 <HAL_RCC_OscConfig+0x274>)
 8001ce8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cea:	f003 0302 	and.w	r3, r3, #2
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d0f0      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x234>
 8001cf2:	e01b      	b.n	8001d2c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cf4:	4b09      	ldr	r3, [pc, #36]	; (8001d1c <HAL_RCC_OscConfig+0x27c>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cfa:	f7ff f829 	bl	8000d50 <HAL_GetTick>
 8001cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d00:	e00e      	b.n	8001d20 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d02:	f7ff f825 	bl	8000d50 <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d907      	bls.n	8001d20 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	e15c      	b.n	8001fce <HAL_RCC_OscConfig+0x52e>
 8001d14:	40023800 	.word	0x40023800
 8001d18:	42470000 	.word	0x42470000
 8001d1c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d20:	4b8a      	ldr	r3, [pc, #552]	; (8001f4c <HAL_RCC_OscConfig+0x4ac>)
 8001d22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d24:	f003 0302 	and.w	r3, r3, #2
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d1ea      	bne.n	8001d02 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0304 	and.w	r3, r3, #4
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	f000 8097 	beq.w	8001e68 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d3e:	4b83      	ldr	r3, [pc, #524]	; (8001f4c <HAL_RCC_OscConfig+0x4ac>)
 8001d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d10f      	bne.n	8001d6a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	60bb      	str	r3, [r7, #8]
 8001d4e:	4b7f      	ldr	r3, [pc, #508]	; (8001f4c <HAL_RCC_OscConfig+0x4ac>)
 8001d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d52:	4a7e      	ldr	r2, [pc, #504]	; (8001f4c <HAL_RCC_OscConfig+0x4ac>)
 8001d54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d58:	6413      	str	r3, [r2, #64]	; 0x40
 8001d5a:	4b7c      	ldr	r3, [pc, #496]	; (8001f4c <HAL_RCC_OscConfig+0x4ac>)
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d62:	60bb      	str	r3, [r7, #8]
 8001d64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d66:	2301      	movs	r3, #1
 8001d68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d6a:	4b79      	ldr	r3, [pc, #484]	; (8001f50 <HAL_RCC_OscConfig+0x4b0>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d118      	bne.n	8001da8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d76:	4b76      	ldr	r3, [pc, #472]	; (8001f50 <HAL_RCC_OscConfig+0x4b0>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a75      	ldr	r2, [pc, #468]	; (8001f50 <HAL_RCC_OscConfig+0x4b0>)
 8001d7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d82:	f7fe ffe5 	bl	8000d50 <HAL_GetTick>
 8001d86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d88:	e008      	b.n	8001d9c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d8a:	f7fe ffe1 	bl	8000d50 <HAL_GetTick>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d901      	bls.n	8001d9c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	e118      	b.n	8001fce <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d9c:	4b6c      	ldr	r3, [pc, #432]	; (8001f50 <HAL_RCC_OscConfig+0x4b0>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d0f0      	beq.n	8001d8a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d106      	bne.n	8001dbe <HAL_RCC_OscConfig+0x31e>
 8001db0:	4b66      	ldr	r3, [pc, #408]	; (8001f4c <HAL_RCC_OscConfig+0x4ac>)
 8001db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001db4:	4a65      	ldr	r2, [pc, #404]	; (8001f4c <HAL_RCC_OscConfig+0x4ac>)
 8001db6:	f043 0301 	orr.w	r3, r3, #1
 8001dba:	6713      	str	r3, [r2, #112]	; 0x70
 8001dbc:	e01c      	b.n	8001df8 <HAL_RCC_OscConfig+0x358>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	2b05      	cmp	r3, #5
 8001dc4:	d10c      	bne.n	8001de0 <HAL_RCC_OscConfig+0x340>
 8001dc6:	4b61      	ldr	r3, [pc, #388]	; (8001f4c <HAL_RCC_OscConfig+0x4ac>)
 8001dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dca:	4a60      	ldr	r2, [pc, #384]	; (8001f4c <HAL_RCC_OscConfig+0x4ac>)
 8001dcc:	f043 0304 	orr.w	r3, r3, #4
 8001dd0:	6713      	str	r3, [r2, #112]	; 0x70
 8001dd2:	4b5e      	ldr	r3, [pc, #376]	; (8001f4c <HAL_RCC_OscConfig+0x4ac>)
 8001dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dd6:	4a5d      	ldr	r2, [pc, #372]	; (8001f4c <HAL_RCC_OscConfig+0x4ac>)
 8001dd8:	f043 0301 	orr.w	r3, r3, #1
 8001ddc:	6713      	str	r3, [r2, #112]	; 0x70
 8001dde:	e00b      	b.n	8001df8 <HAL_RCC_OscConfig+0x358>
 8001de0:	4b5a      	ldr	r3, [pc, #360]	; (8001f4c <HAL_RCC_OscConfig+0x4ac>)
 8001de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001de4:	4a59      	ldr	r2, [pc, #356]	; (8001f4c <HAL_RCC_OscConfig+0x4ac>)
 8001de6:	f023 0301 	bic.w	r3, r3, #1
 8001dea:	6713      	str	r3, [r2, #112]	; 0x70
 8001dec:	4b57      	ldr	r3, [pc, #348]	; (8001f4c <HAL_RCC_OscConfig+0x4ac>)
 8001dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001df0:	4a56      	ldr	r2, [pc, #344]	; (8001f4c <HAL_RCC_OscConfig+0x4ac>)
 8001df2:	f023 0304 	bic.w	r3, r3, #4
 8001df6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d015      	beq.n	8001e2c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e00:	f7fe ffa6 	bl	8000d50 <HAL_GetTick>
 8001e04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e06:	e00a      	b.n	8001e1e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e08:	f7fe ffa2 	bl	8000d50 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e0d7      	b.n	8001fce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e1e:	4b4b      	ldr	r3, [pc, #300]	; (8001f4c <HAL_RCC_OscConfig+0x4ac>)
 8001e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d0ee      	beq.n	8001e08 <HAL_RCC_OscConfig+0x368>
 8001e2a:	e014      	b.n	8001e56 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e2c:	f7fe ff90 	bl	8000d50 <HAL_GetTick>
 8001e30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e32:	e00a      	b.n	8001e4a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e34:	f7fe ff8c 	bl	8000d50 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e0c1      	b.n	8001fce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e4a:	4b40      	ldr	r3, [pc, #256]	; (8001f4c <HAL_RCC_OscConfig+0x4ac>)
 8001e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e4e:	f003 0302 	and.w	r3, r3, #2
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d1ee      	bne.n	8001e34 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e56:	7dfb      	ldrb	r3, [r7, #23]
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d105      	bne.n	8001e68 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e5c:	4b3b      	ldr	r3, [pc, #236]	; (8001f4c <HAL_RCC_OscConfig+0x4ac>)
 8001e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e60:	4a3a      	ldr	r2, [pc, #232]	; (8001f4c <HAL_RCC_OscConfig+0x4ac>)
 8001e62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e66:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	699b      	ldr	r3, [r3, #24]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	f000 80ad 	beq.w	8001fcc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e72:	4b36      	ldr	r3, [pc, #216]	; (8001f4c <HAL_RCC_OscConfig+0x4ac>)
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	f003 030c 	and.w	r3, r3, #12
 8001e7a:	2b08      	cmp	r3, #8
 8001e7c:	d060      	beq.n	8001f40 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	699b      	ldr	r3, [r3, #24]
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d145      	bne.n	8001f12 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e86:	4b33      	ldr	r3, [pc, #204]	; (8001f54 <HAL_RCC_OscConfig+0x4b4>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e8c:	f7fe ff60 	bl	8000d50 <HAL_GetTick>
 8001e90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e92:	e008      	b.n	8001ea6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e94:	f7fe ff5c 	bl	8000d50 <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e093      	b.n	8001fce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ea6:	4b29      	ldr	r3, [pc, #164]	; (8001f4c <HAL_RCC_OscConfig+0x4ac>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d1f0      	bne.n	8001e94 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	69da      	ldr	r2, [r3, #28]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6a1b      	ldr	r3, [r3, #32]
 8001eba:	431a      	orrs	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec0:	019b      	lsls	r3, r3, #6
 8001ec2:	431a      	orrs	r2, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec8:	085b      	lsrs	r3, r3, #1
 8001eca:	3b01      	subs	r3, #1
 8001ecc:	041b      	lsls	r3, r3, #16
 8001ece:	431a      	orrs	r2, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed4:	061b      	lsls	r3, r3, #24
 8001ed6:	431a      	orrs	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001edc:	071b      	lsls	r3, r3, #28
 8001ede:	491b      	ldr	r1, [pc, #108]	; (8001f4c <HAL_RCC_OscConfig+0x4ac>)
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ee4:	4b1b      	ldr	r3, [pc, #108]	; (8001f54 <HAL_RCC_OscConfig+0x4b4>)
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eea:	f7fe ff31 	bl	8000d50 <HAL_GetTick>
 8001eee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ef0:	e008      	b.n	8001f04 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ef2:	f7fe ff2d 	bl	8000d50 <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d901      	bls.n	8001f04 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e064      	b.n	8001fce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f04:	4b11      	ldr	r3, [pc, #68]	; (8001f4c <HAL_RCC_OscConfig+0x4ac>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d0f0      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x452>
 8001f10:	e05c      	b.n	8001fcc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f12:	4b10      	ldr	r3, [pc, #64]	; (8001f54 <HAL_RCC_OscConfig+0x4b4>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f18:	f7fe ff1a 	bl	8000d50 <HAL_GetTick>
 8001f1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f1e:	e008      	b.n	8001f32 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f20:	f7fe ff16 	bl	8000d50 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d901      	bls.n	8001f32 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e04d      	b.n	8001fce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f32:	4b06      	ldr	r3, [pc, #24]	; (8001f4c <HAL_RCC_OscConfig+0x4ac>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d1f0      	bne.n	8001f20 <HAL_RCC_OscConfig+0x480>
 8001f3e:	e045      	b.n	8001fcc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	699b      	ldr	r3, [r3, #24]
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d107      	bne.n	8001f58 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e040      	b.n	8001fce <HAL_RCC_OscConfig+0x52e>
 8001f4c:	40023800 	.word	0x40023800
 8001f50:	40007000 	.word	0x40007000
 8001f54:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f58:	4b1f      	ldr	r3, [pc, #124]	; (8001fd8 <HAL_RCC_OscConfig+0x538>)
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	699b      	ldr	r3, [r3, #24]
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d030      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d129      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d122      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f82:	68fa      	ldr	r2, [r7, #12]
 8001f84:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f88:	4013      	ands	r3, r2
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f8e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d119      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f9e:	085b      	lsrs	r3, r3, #1
 8001fa0:	3b01      	subs	r3, #1
 8001fa2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d10f      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d107      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d001      	beq.n	8001fcc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e000      	b.n	8001fce <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3718      	adds	r7, #24
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	40023800 	.word	0x40023800

08001fdc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d101      	bne.n	8001fee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e03f      	b.n	800206e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d106      	bne.n	8002008 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f7fe fd7e 	bl	8000b04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2224      	movs	r2, #36	; 0x24
 800200c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	68da      	ldr	r2, [r3, #12]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800201e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f000 fddf 	bl	8002be4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	691a      	ldr	r2, [r3, #16]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002034:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	695a      	ldr	r2, [r3, #20]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002044:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	68da      	ldr	r2, [r3, #12]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002054:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2220      	movs	r2, #32
 8002060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2220      	movs	r2, #32
 8002068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b08a      	sub	sp, #40	; 0x28
 800207a:	af02      	add	r7, sp, #8
 800207c:	60f8      	str	r0, [r7, #12]
 800207e:	60b9      	str	r1, [r7, #8]
 8002080:	603b      	str	r3, [r7, #0]
 8002082:	4613      	mov	r3, r2
 8002084:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002086:	2300      	movs	r3, #0
 8002088:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002090:	b2db      	uxtb	r3, r3
 8002092:	2b20      	cmp	r3, #32
 8002094:	d17c      	bne.n	8002190 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d002      	beq.n	80020a2 <HAL_UART_Transmit+0x2c>
 800209c:	88fb      	ldrh	r3, [r7, #6]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d101      	bne.n	80020a6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e075      	b.n	8002192 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d101      	bne.n	80020b4 <HAL_UART_Transmit+0x3e>
 80020b0:	2302      	movs	r3, #2
 80020b2:	e06e      	b.n	8002192 <HAL_UART_Transmit+0x11c>
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2201      	movs	r2, #1
 80020b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2200      	movs	r2, #0
 80020c0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2221      	movs	r2, #33	; 0x21
 80020c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80020ca:	f7fe fe41 	bl	8000d50 <HAL_GetTick>
 80020ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	88fa      	ldrh	r2, [r7, #6]
 80020d4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	88fa      	ldrh	r2, [r7, #6]
 80020da:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020e4:	d108      	bne.n	80020f8 <HAL_UART_Transmit+0x82>
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d104      	bne.n	80020f8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80020ee:	2300      	movs	r3, #0
 80020f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	61bb      	str	r3, [r7, #24]
 80020f6:	e003      	b.n	8002100 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80020fc:	2300      	movs	r3, #0
 80020fe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2200      	movs	r2, #0
 8002104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002108:	e02a      	b.n	8002160 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	9300      	str	r3, [sp, #0]
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	2200      	movs	r2, #0
 8002112:	2180      	movs	r1, #128	; 0x80
 8002114:	68f8      	ldr	r0, [r7, #12]
 8002116:	f000 fb1f 	bl	8002758 <UART_WaitOnFlagUntilTimeout>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	e036      	b.n	8002192 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d10b      	bne.n	8002142 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	881b      	ldrh	r3, [r3, #0]
 800212e:	461a      	mov	r2, r3
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002138:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	3302      	adds	r3, #2
 800213e:	61bb      	str	r3, [r7, #24]
 8002140:	e007      	b.n	8002152 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	781a      	ldrb	r2, [r3, #0]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	3301      	adds	r3, #1
 8002150:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002156:	b29b      	uxth	r3, r3
 8002158:	3b01      	subs	r3, #1
 800215a:	b29a      	uxth	r2, r3
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002164:	b29b      	uxth	r3, r3
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1cf      	bne.n	800210a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	9300      	str	r3, [sp, #0]
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	2200      	movs	r2, #0
 8002172:	2140      	movs	r1, #64	; 0x40
 8002174:	68f8      	ldr	r0, [r7, #12]
 8002176:	f000 faef 	bl	8002758 <UART_WaitOnFlagUntilTimeout>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	e006      	b.n	8002192 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2220      	movs	r2, #32
 8002188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800218c:	2300      	movs	r3, #0
 800218e:	e000      	b.n	8002192 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002190:	2302      	movs	r3, #2
  }
}
 8002192:	4618      	mov	r0, r3
 8002194:	3720      	adds	r7, #32
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800219a:	b580      	push	{r7, lr}
 800219c:	b084      	sub	sp, #16
 800219e:	af00      	add	r7, sp, #0
 80021a0:	60f8      	str	r0, [r7, #12]
 80021a2:	60b9      	str	r1, [r7, #8]
 80021a4:	4613      	mov	r3, r2
 80021a6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	2b20      	cmp	r3, #32
 80021b2:	d11d      	bne.n	80021f0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d002      	beq.n	80021c0 <HAL_UART_Receive_IT+0x26>
 80021ba:	88fb      	ldrh	r3, [r7, #6]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d101      	bne.n	80021c4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e016      	b.n	80021f2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d101      	bne.n	80021d2 <HAL_UART_Receive_IT+0x38>
 80021ce:	2302      	movs	r3, #2
 80021d0:	e00f      	b.n	80021f2 <HAL_UART_Receive_IT+0x58>
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2201      	movs	r2, #1
 80021d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2200      	movs	r2, #0
 80021de:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80021e0:	88fb      	ldrh	r3, [r7, #6]
 80021e2:	461a      	mov	r2, r3
 80021e4:	68b9      	ldr	r1, [r7, #8]
 80021e6:	68f8      	ldr	r0, [r7, #12]
 80021e8:	f000 fb24 	bl	8002834 <UART_Start_Receive_IT>
 80021ec:	4603      	mov	r3, r0
 80021ee:	e000      	b.n	80021f2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80021f0:	2302      	movs	r3, #2
  }
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3710      	adds	r7, #16
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
	...

080021fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b0ba      	sub	sp, #232	; 0xe8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	695b      	ldr	r3, [r3, #20]
 800221e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002222:	2300      	movs	r3, #0
 8002224:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002228:	2300      	movs	r3, #0
 800222a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800222e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002232:	f003 030f 	and.w	r3, r3, #15
 8002236:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800223a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800223e:	2b00      	cmp	r3, #0
 8002240:	d10f      	bne.n	8002262 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002242:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002246:	f003 0320 	and.w	r3, r3, #32
 800224a:	2b00      	cmp	r3, #0
 800224c:	d009      	beq.n	8002262 <HAL_UART_IRQHandler+0x66>
 800224e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002252:	f003 0320 	and.w	r3, r3, #32
 8002256:	2b00      	cmp	r3, #0
 8002258:	d003      	beq.n	8002262 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f000 fc07 	bl	8002a6e <UART_Receive_IT>
      return;
 8002260:	e256      	b.n	8002710 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002262:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002266:	2b00      	cmp	r3, #0
 8002268:	f000 80de 	beq.w	8002428 <HAL_UART_IRQHandler+0x22c>
 800226c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002270:	f003 0301 	and.w	r3, r3, #1
 8002274:	2b00      	cmp	r3, #0
 8002276:	d106      	bne.n	8002286 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002278:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800227c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002280:	2b00      	cmp	r3, #0
 8002282:	f000 80d1 	beq.w	8002428 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002286:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	2b00      	cmp	r3, #0
 8002290:	d00b      	beq.n	80022aa <HAL_UART_IRQHandler+0xae>
 8002292:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800229a:	2b00      	cmp	r3, #0
 800229c:	d005      	beq.n	80022aa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a2:	f043 0201 	orr.w	r2, r3, #1
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80022aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022ae:	f003 0304 	and.w	r3, r3, #4
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d00b      	beq.n	80022ce <HAL_UART_IRQHandler+0xd2>
 80022b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80022ba:	f003 0301 	and.w	r3, r3, #1
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d005      	beq.n	80022ce <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c6:	f043 0202 	orr.w	r2, r3, #2
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80022ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022d2:	f003 0302 	and.w	r3, r3, #2
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d00b      	beq.n	80022f2 <HAL_UART_IRQHandler+0xf6>
 80022da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d005      	beq.n	80022f2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ea:	f043 0204 	orr.w	r2, r3, #4
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80022f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022f6:	f003 0308 	and.w	r3, r3, #8
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d011      	beq.n	8002322 <HAL_UART_IRQHandler+0x126>
 80022fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002302:	f003 0320 	and.w	r3, r3, #32
 8002306:	2b00      	cmp	r3, #0
 8002308:	d105      	bne.n	8002316 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800230a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	2b00      	cmp	r3, #0
 8002314:	d005      	beq.n	8002322 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231a:	f043 0208 	orr.w	r2, r3, #8
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002326:	2b00      	cmp	r3, #0
 8002328:	f000 81ed 	beq.w	8002706 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800232c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002330:	f003 0320 	and.w	r3, r3, #32
 8002334:	2b00      	cmp	r3, #0
 8002336:	d008      	beq.n	800234a <HAL_UART_IRQHandler+0x14e>
 8002338:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800233c:	f003 0320 	and.w	r3, r3, #32
 8002340:	2b00      	cmp	r3, #0
 8002342:	d002      	beq.n	800234a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f000 fb92 	bl	8002a6e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	695b      	ldr	r3, [r3, #20]
 8002350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002354:	2b40      	cmp	r3, #64	; 0x40
 8002356:	bf0c      	ite	eq
 8002358:	2301      	moveq	r3, #1
 800235a:	2300      	movne	r3, #0
 800235c:	b2db      	uxtb	r3, r3
 800235e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002366:	f003 0308 	and.w	r3, r3, #8
 800236a:	2b00      	cmp	r3, #0
 800236c:	d103      	bne.n	8002376 <HAL_UART_IRQHandler+0x17a>
 800236e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002372:	2b00      	cmp	r3, #0
 8002374:	d04f      	beq.n	8002416 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 fa9a 	bl	80028b0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	695b      	ldr	r3, [r3, #20]
 8002382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002386:	2b40      	cmp	r3, #64	; 0x40
 8002388:	d141      	bne.n	800240e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	3314      	adds	r3, #20
 8002390:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002394:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002398:	e853 3f00 	ldrex	r3, [r3]
 800239c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80023a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80023a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80023a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	3314      	adds	r3, #20
 80023b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80023b6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80023ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80023c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80023c6:	e841 2300 	strex	r3, r2, [r1]
 80023ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80023ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d1d9      	bne.n	800238a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d013      	beq.n	8002406 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023e2:	4a7d      	ldr	r2, [pc, #500]	; (80025d8 <HAL_UART_IRQHandler+0x3dc>)
 80023e4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7fe fe3d 	bl	800106a <HAL_DMA_Abort_IT>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d016      	beq.n	8002424 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002400:	4610      	mov	r0, r2
 8002402:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002404:	e00e      	b.n	8002424 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f000 f990 	bl	800272c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800240c:	e00a      	b.n	8002424 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f000 f98c 	bl	800272c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002414:	e006      	b.n	8002424 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f000 f988 	bl	800272c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002422:	e170      	b.n	8002706 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002424:	bf00      	nop
    return;
 8002426:	e16e      	b.n	8002706 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242c:	2b01      	cmp	r3, #1
 800242e:	f040 814a 	bne.w	80026c6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002436:	f003 0310 	and.w	r3, r3, #16
 800243a:	2b00      	cmp	r3, #0
 800243c:	f000 8143 	beq.w	80026c6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002440:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002444:	f003 0310 	and.w	r3, r3, #16
 8002448:	2b00      	cmp	r3, #0
 800244a:	f000 813c 	beq.w	80026c6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800244e:	2300      	movs	r3, #0
 8002450:	60bb      	str	r3, [r7, #8]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	60bb      	str	r3, [r7, #8]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	60bb      	str	r3, [r7, #8]
 8002462:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	695b      	ldr	r3, [r3, #20]
 800246a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800246e:	2b40      	cmp	r3, #64	; 0x40
 8002470:	f040 80b4 	bne.w	80025dc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002480:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002484:	2b00      	cmp	r3, #0
 8002486:	f000 8140 	beq.w	800270a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800248e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002492:	429a      	cmp	r2, r3
 8002494:	f080 8139 	bcs.w	800270a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800249e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a4:	69db      	ldr	r3, [r3, #28]
 80024a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024aa:	f000 8088 	beq.w	80025be <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	330c      	adds	r3, #12
 80024b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80024bc:	e853 3f00 	ldrex	r3, [r3]
 80024c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80024c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80024c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	330c      	adds	r3, #12
 80024d6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80024da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80024de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80024e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80024ea:	e841 2300 	strex	r3, r2, [r1]
 80024ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80024f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d1d9      	bne.n	80024ae <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	3314      	adds	r3, #20
 8002500:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002502:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002504:	e853 3f00 	ldrex	r3, [r3]
 8002508:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800250a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800250c:	f023 0301 	bic.w	r3, r3, #1
 8002510:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	3314      	adds	r3, #20
 800251a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800251e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002522:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002524:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002526:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800252a:	e841 2300 	strex	r3, r2, [r1]
 800252e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002530:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002532:	2b00      	cmp	r3, #0
 8002534:	d1e1      	bne.n	80024fa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	3314      	adds	r3, #20
 800253c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800253e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002540:	e853 3f00 	ldrex	r3, [r3]
 8002544:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002546:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002548:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800254c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	3314      	adds	r3, #20
 8002556:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800255a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800255c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800255e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002560:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002562:	e841 2300 	strex	r3, r2, [r1]
 8002566:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002568:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1e3      	bne.n	8002536 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2220      	movs	r2, #32
 8002572:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	330c      	adds	r3, #12
 8002582:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002584:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002586:	e853 3f00 	ldrex	r3, [r3]
 800258a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800258c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800258e:	f023 0310 	bic.w	r3, r3, #16
 8002592:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	330c      	adds	r3, #12
 800259c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80025a0:	65ba      	str	r2, [r7, #88]	; 0x58
 80025a2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025a4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80025a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80025a8:	e841 2300 	strex	r3, r2, [r1]
 80025ac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80025ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d1e3      	bne.n	800257c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7fe fce6 	bl	8000f8a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	4619      	mov	r1, r3
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f000 f8b6 	bl	8002740 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80025d4:	e099      	b.n	800270a <HAL_UART_IRQHandler+0x50e>
 80025d6:	bf00      	nop
 80025d8:	08002977 	.word	0x08002977
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	f000 808b 	beq.w	800270e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80025f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	f000 8086 	beq.w	800270e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	330c      	adds	r3, #12
 8002608:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800260a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800260c:	e853 3f00 	ldrex	r3, [r3]
 8002610:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002614:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002618:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	330c      	adds	r3, #12
 8002622:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002626:	647a      	str	r2, [r7, #68]	; 0x44
 8002628:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800262a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800262c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800262e:	e841 2300 	strex	r3, r2, [r1]
 8002632:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002634:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002636:	2b00      	cmp	r3, #0
 8002638:	d1e3      	bne.n	8002602 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	3314      	adds	r3, #20
 8002640:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002644:	e853 3f00 	ldrex	r3, [r3]
 8002648:	623b      	str	r3, [r7, #32]
   return(result);
 800264a:	6a3b      	ldr	r3, [r7, #32]
 800264c:	f023 0301 	bic.w	r3, r3, #1
 8002650:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	3314      	adds	r3, #20
 800265a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800265e:	633a      	str	r2, [r7, #48]	; 0x30
 8002660:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002662:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002664:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002666:	e841 2300 	strex	r3, r2, [r1]
 800266a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800266c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800266e:	2b00      	cmp	r3, #0
 8002670:	d1e3      	bne.n	800263a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2220      	movs	r2, #32
 8002676:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	330c      	adds	r3, #12
 8002686:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	e853 3f00 	ldrex	r3, [r3]
 800268e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f023 0310 	bic.w	r3, r3, #16
 8002696:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	330c      	adds	r3, #12
 80026a0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80026a4:	61fa      	str	r2, [r7, #28]
 80026a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026a8:	69b9      	ldr	r1, [r7, #24]
 80026aa:	69fa      	ldr	r2, [r7, #28]
 80026ac:	e841 2300 	strex	r3, r2, [r1]
 80026b0:	617b      	str	r3, [r7, #20]
   return(result);
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d1e3      	bne.n	8002680 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80026b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80026bc:	4619      	mov	r1, r3
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f000 f83e 	bl	8002740 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80026c4:	e023      	b.n	800270e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80026c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d009      	beq.n	80026e6 <HAL_UART_IRQHandler+0x4ea>
 80026d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d003      	beq.n	80026e6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f000 f95d 	bl	800299e <UART_Transmit_IT>
    return;
 80026e4:	e014      	b.n	8002710 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80026e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d00e      	beq.n	8002710 <HAL_UART_IRQHandler+0x514>
 80026f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d008      	beq.n	8002710 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f000 f99d 	bl	8002a3e <UART_EndTransmit_IT>
    return;
 8002704:	e004      	b.n	8002710 <HAL_UART_IRQHandler+0x514>
    return;
 8002706:	bf00      	nop
 8002708:	e002      	b.n	8002710 <HAL_UART_IRQHandler+0x514>
      return;
 800270a:	bf00      	nop
 800270c:	e000      	b.n	8002710 <HAL_UART_IRQHandler+0x514>
      return;
 800270e:	bf00      	nop
  }
}
 8002710:	37e8      	adds	r7, #232	; 0xe8
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop

08002718 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002720:	bf00      	nop
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr

0800272c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002734:	bf00      	nop
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	460b      	mov	r3, r1
 800274a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800274c:	bf00      	nop
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr

08002758 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b090      	sub	sp, #64	; 0x40
 800275c:	af00      	add	r7, sp, #0
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	603b      	str	r3, [r7, #0]
 8002764:	4613      	mov	r3, r2
 8002766:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002768:	e050      	b.n	800280c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800276a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800276c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002770:	d04c      	beq.n	800280c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002772:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002774:	2b00      	cmp	r3, #0
 8002776:	d007      	beq.n	8002788 <UART_WaitOnFlagUntilTimeout+0x30>
 8002778:	f7fe faea 	bl	8000d50 <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002784:	429a      	cmp	r2, r3
 8002786:	d241      	bcs.n	800280c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	330c      	adds	r3, #12
 800278e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002792:	e853 3f00 	ldrex	r3, [r3]
 8002796:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800279e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	330c      	adds	r3, #12
 80027a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80027a8:	637a      	str	r2, [r7, #52]	; 0x34
 80027aa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80027ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027b0:	e841 2300 	strex	r3, r2, [r1]
 80027b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80027b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d1e5      	bne.n	8002788 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	3314      	adds	r3, #20
 80027c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	e853 3f00 	ldrex	r3, [r3]
 80027ca:	613b      	str	r3, [r7, #16]
   return(result);
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	f023 0301 	bic.w	r3, r3, #1
 80027d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	3314      	adds	r3, #20
 80027da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80027dc:	623a      	str	r2, [r7, #32]
 80027de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027e0:	69f9      	ldr	r1, [r7, #28]
 80027e2:	6a3a      	ldr	r2, [r7, #32]
 80027e4:	e841 2300 	strex	r3, r2, [r1]
 80027e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80027ea:	69bb      	ldr	r3, [r7, #24]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d1e5      	bne.n	80027bc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2220      	movs	r2, #32
 80027f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2220      	movs	r2, #32
 80027fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2200      	movs	r2, #0
 8002804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e00f      	b.n	800282c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	4013      	ands	r3, r2
 8002816:	68ba      	ldr	r2, [r7, #8]
 8002818:	429a      	cmp	r2, r3
 800281a:	bf0c      	ite	eq
 800281c:	2301      	moveq	r3, #1
 800281e:	2300      	movne	r3, #0
 8002820:	b2db      	uxtb	r3, r3
 8002822:	461a      	mov	r2, r3
 8002824:	79fb      	ldrb	r3, [r7, #7]
 8002826:	429a      	cmp	r2, r3
 8002828:	d09f      	beq.n	800276a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800282a:	2300      	movs	r3, #0
}
 800282c:	4618      	mov	r0, r3
 800282e:	3740      	adds	r7, #64	; 0x40
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}

08002834 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002834:	b480      	push	{r7}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	60b9      	str	r1, [r7, #8]
 800283e:	4613      	mov	r3, r2
 8002840:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	68ba      	ldr	r2, [r7, #8]
 8002846:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	88fa      	ldrh	r2, [r7, #6]
 800284c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	88fa      	ldrh	r2, [r7, #6]
 8002852:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2200      	movs	r2, #0
 8002858:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2222      	movs	r2, #34	; 0x22
 800285e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d007      	beq.n	8002882 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	68da      	ldr	r2, [r3, #12]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002880:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	695a      	ldr	r2, [r3, #20]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f042 0201 	orr.w	r2, r2, #1
 8002890:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	68da      	ldr	r2, [r3, #12]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f042 0220 	orr.w	r2, r2, #32
 80028a0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80028a2:	2300      	movs	r3, #0
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3714      	adds	r7, #20
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b095      	sub	sp, #84	; 0x54
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	330c      	adds	r3, #12
 80028be:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028c2:	e853 3f00 	ldrex	r3, [r3]
 80028c6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80028c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80028ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	330c      	adds	r3, #12
 80028d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80028d8:	643a      	str	r2, [r7, #64]	; 0x40
 80028da:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80028de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80028e0:	e841 2300 	strex	r3, r2, [r1]
 80028e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80028e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d1e5      	bne.n	80028b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	3314      	adds	r3, #20
 80028f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028f4:	6a3b      	ldr	r3, [r7, #32]
 80028f6:	e853 3f00 	ldrex	r3, [r3]
 80028fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	f023 0301 	bic.w	r3, r3, #1
 8002902:	64bb      	str	r3, [r7, #72]	; 0x48
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	3314      	adds	r3, #20
 800290a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800290c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800290e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002910:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002912:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002914:	e841 2300 	strex	r3, r2, [r1]
 8002918:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800291a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291c:	2b00      	cmp	r3, #0
 800291e:	d1e5      	bne.n	80028ec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002924:	2b01      	cmp	r3, #1
 8002926:	d119      	bne.n	800295c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	330c      	adds	r3, #12
 800292e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	e853 3f00 	ldrex	r3, [r3]
 8002936:	60bb      	str	r3, [r7, #8]
   return(result);
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	f023 0310 	bic.w	r3, r3, #16
 800293e:	647b      	str	r3, [r7, #68]	; 0x44
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	330c      	adds	r3, #12
 8002946:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002948:	61ba      	str	r2, [r7, #24]
 800294a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800294c:	6979      	ldr	r1, [r7, #20]
 800294e:	69ba      	ldr	r2, [r7, #24]
 8002950:	e841 2300 	strex	r3, r2, [r1]
 8002954:	613b      	str	r3, [r7, #16]
   return(result);
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d1e5      	bne.n	8002928 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2220      	movs	r2, #32
 8002960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	631a      	str	r2, [r3, #48]	; 0x30
}
 800296a:	bf00      	nop
 800296c:	3754      	adds	r7, #84	; 0x54
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr

08002976 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002976:	b580      	push	{r7, lr}
 8002978:	b084      	sub	sp, #16
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002982:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2200      	movs	r2, #0
 8002988:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2200      	movs	r2, #0
 800298e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002990:	68f8      	ldr	r0, [r7, #12]
 8002992:	f7ff fecb 	bl	800272c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002996:	bf00      	nop
 8002998:	3710      	adds	r7, #16
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}

0800299e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800299e:	b480      	push	{r7}
 80029a0:	b085      	sub	sp, #20
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	2b21      	cmp	r3, #33	; 0x21
 80029b0:	d13e      	bne.n	8002a30 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029ba:	d114      	bne.n	80029e6 <UART_Transmit_IT+0x48>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	691b      	ldr	r3, [r3, #16]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d110      	bne.n	80029e6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6a1b      	ldr	r3, [r3, #32]
 80029c8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	881b      	ldrh	r3, [r3, #0]
 80029ce:	461a      	mov	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029d8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a1b      	ldr	r3, [r3, #32]
 80029de:	1c9a      	adds	r2, r3, #2
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	621a      	str	r2, [r3, #32]
 80029e4:	e008      	b.n	80029f8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a1b      	ldr	r3, [r3, #32]
 80029ea:	1c59      	adds	r1, r3, #1
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	6211      	str	r1, [r2, #32]
 80029f0:	781a      	ldrb	r2, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	3b01      	subs	r3, #1
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	4619      	mov	r1, r3
 8002a06:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d10f      	bne.n	8002a2c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	68da      	ldr	r2, [r3, #12]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a1a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	68da      	ldr	r2, [r3, #12]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a2a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	e000      	b.n	8002a32 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002a30:	2302      	movs	r3, #2
  }
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3714      	adds	r7, #20
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr

08002a3e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002a3e:	b580      	push	{r7, lr}
 8002a40:	b082      	sub	sp, #8
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68da      	ldr	r2, [r3, #12]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a54:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2220      	movs	r2, #32
 8002a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f7ff fe5a 	bl	8002718 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b08c      	sub	sp, #48	; 0x30
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	2b22      	cmp	r3, #34	; 0x22
 8002a80:	f040 80ab 	bne.w	8002bda <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a8c:	d117      	bne.n	8002abe <UART_Receive_IT+0x50>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d113      	bne.n	8002abe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002a96:	2300      	movs	r3, #0
 8002a98:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a9e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002aac:	b29a      	uxth	r2, r3
 8002aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ab0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab6:	1c9a      	adds	r2, r3, #2
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	629a      	str	r2, [r3, #40]	; 0x28
 8002abc:	e026      	b.n	8002b0c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ad0:	d007      	beq.n	8002ae2 <UART_Receive_IT+0x74>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d10a      	bne.n	8002af0 <UART_Receive_IT+0x82>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	691b      	ldr	r3, [r3, #16]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d106      	bne.n	8002af0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	b2da      	uxtb	r2, r3
 8002aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aec:	701a      	strb	r2, [r3, #0]
 8002aee:	e008      	b.n	8002b02 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002afc:	b2da      	uxtb	r2, r3
 8002afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b00:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b06:	1c5a      	adds	r2, r3, #1
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	3b01      	subs	r3, #1
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	4619      	mov	r1, r3
 8002b1a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d15a      	bne.n	8002bd6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	68da      	ldr	r2, [r3, #12]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f022 0220 	bic.w	r2, r2, #32
 8002b2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	68da      	ldr	r2, [r3, #12]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b3e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	695a      	ldr	r2, [r3, #20]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f022 0201 	bic.w	r2, r2, #1
 8002b4e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2220      	movs	r2, #32
 8002b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d135      	bne.n	8002bcc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	330c      	adds	r3, #12
 8002b6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	e853 3f00 	ldrex	r3, [r3]
 8002b74:	613b      	str	r3, [r7, #16]
   return(result);
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	f023 0310 	bic.w	r3, r3, #16
 8002b7c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	330c      	adds	r3, #12
 8002b84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b86:	623a      	str	r2, [r7, #32]
 8002b88:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b8a:	69f9      	ldr	r1, [r7, #28]
 8002b8c:	6a3a      	ldr	r2, [r7, #32]
 8002b8e:	e841 2300 	strex	r3, r2, [r1]
 8002b92:	61bb      	str	r3, [r7, #24]
   return(result);
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d1e5      	bne.n	8002b66 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0310 	and.w	r3, r3, #16
 8002ba4:	2b10      	cmp	r3, #16
 8002ba6:	d10a      	bne.n	8002bbe <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002ba8:	2300      	movs	r3, #0
 8002baa:	60fb      	str	r3, [r7, #12]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	60fb      	str	r3, [r7, #12]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	60fb      	str	r3, [r7, #12]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f7ff fdbb 	bl	8002740 <HAL_UARTEx_RxEventCallback>
 8002bca:	e002      	b.n	8002bd2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f7fd fef9 	bl	80009c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	e002      	b.n	8002bdc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	e000      	b.n	8002bdc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002bda:	2302      	movs	r3, #2
  }
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3730      	adds	r7, #48	; 0x30
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002be4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002be8:	b0c0      	sub	sp, #256	; 0x100
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	691b      	ldr	r3, [r3, #16]
 8002bf8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c00:	68d9      	ldr	r1, [r3, #12]
 8002c02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	ea40 0301 	orr.w	r3, r0, r1
 8002c0c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c12:	689a      	ldr	r2, [r3, #8]
 8002c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	431a      	orrs	r2, r3
 8002c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	431a      	orrs	r2, r3
 8002c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c28:	69db      	ldr	r3, [r3, #28]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002c3c:	f021 010c 	bic.w	r1, r1, #12
 8002c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002c4a:	430b      	orrs	r3, r1
 8002c4c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002c5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c5e:	6999      	ldr	r1, [r3, #24]
 8002c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	ea40 0301 	orr.w	r3, r0, r1
 8002c6a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	4b8f      	ldr	r3, [pc, #572]	; (8002eb0 <UART_SetConfig+0x2cc>)
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d005      	beq.n	8002c84 <UART_SetConfig+0xa0>
 8002c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	4b8d      	ldr	r3, [pc, #564]	; (8002eb4 <UART_SetConfig+0x2d0>)
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d104      	bne.n	8002c8e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002c84:	f7fe fcc8 	bl	8001618 <HAL_RCC_GetPCLK2Freq>
 8002c88:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002c8c:	e003      	b.n	8002c96 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c8e:	f7fe fcaf 	bl	80015f0 <HAL_RCC_GetPCLK1Freq>
 8002c92:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c9a:	69db      	ldr	r3, [r3, #28]
 8002c9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ca0:	f040 810c 	bne.w	8002ebc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ca4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002cae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002cb2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002cb6:	4622      	mov	r2, r4
 8002cb8:	462b      	mov	r3, r5
 8002cba:	1891      	adds	r1, r2, r2
 8002cbc:	65b9      	str	r1, [r7, #88]	; 0x58
 8002cbe:	415b      	adcs	r3, r3
 8002cc0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002cc2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002cc6:	4621      	mov	r1, r4
 8002cc8:	eb12 0801 	adds.w	r8, r2, r1
 8002ccc:	4629      	mov	r1, r5
 8002cce:	eb43 0901 	adc.w	r9, r3, r1
 8002cd2:	f04f 0200 	mov.w	r2, #0
 8002cd6:	f04f 0300 	mov.w	r3, #0
 8002cda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cde:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ce2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ce6:	4690      	mov	r8, r2
 8002ce8:	4699      	mov	r9, r3
 8002cea:	4623      	mov	r3, r4
 8002cec:	eb18 0303 	adds.w	r3, r8, r3
 8002cf0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002cf4:	462b      	mov	r3, r5
 8002cf6:	eb49 0303 	adc.w	r3, r9, r3
 8002cfa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002cfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002d0a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002d0e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002d12:	460b      	mov	r3, r1
 8002d14:	18db      	adds	r3, r3, r3
 8002d16:	653b      	str	r3, [r7, #80]	; 0x50
 8002d18:	4613      	mov	r3, r2
 8002d1a:	eb42 0303 	adc.w	r3, r2, r3
 8002d1e:	657b      	str	r3, [r7, #84]	; 0x54
 8002d20:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002d24:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002d28:	f7fd fa7e 	bl	8000228 <__aeabi_uldivmod>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	460b      	mov	r3, r1
 8002d30:	4b61      	ldr	r3, [pc, #388]	; (8002eb8 <UART_SetConfig+0x2d4>)
 8002d32:	fba3 2302 	umull	r2, r3, r3, r2
 8002d36:	095b      	lsrs	r3, r3, #5
 8002d38:	011c      	lsls	r4, r3, #4
 8002d3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002d44:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002d48:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002d4c:	4642      	mov	r2, r8
 8002d4e:	464b      	mov	r3, r9
 8002d50:	1891      	adds	r1, r2, r2
 8002d52:	64b9      	str	r1, [r7, #72]	; 0x48
 8002d54:	415b      	adcs	r3, r3
 8002d56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d58:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002d5c:	4641      	mov	r1, r8
 8002d5e:	eb12 0a01 	adds.w	sl, r2, r1
 8002d62:	4649      	mov	r1, r9
 8002d64:	eb43 0b01 	adc.w	fp, r3, r1
 8002d68:	f04f 0200 	mov.w	r2, #0
 8002d6c:	f04f 0300 	mov.w	r3, #0
 8002d70:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002d74:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002d78:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d7c:	4692      	mov	sl, r2
 8002d7e:	469b      	mov	fp, r3
 8002d80:	4643      	mov	r3, r8
 8002d82:	eb1a 0303 	adds.w	r3, sl, r3
 8002d86:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002d8a:	464b      	mov	r3, r9
 8002d8c:	eb4b 0303 	adc.w	r3, fp, r3
 8002d90:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002da0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002da4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002da8:	460b      	mov	r3, r1
 8002daa:	18db      	adds	r3, r3, r3
 8002dac:	643b      	str	r3, [r7, #64]	; 0x40
 8002dae:	4613      	mov	r3, r2
 8002db0:	eb42 0303 	adc.w	r3, r2, r3
 8002db4:	647b      	str	r3, [r7, #68]	; 0x44
 8002db6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002dba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002dbe:	f7fd fa33 	bl	8000228 <__aeabi_uldivmod>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	4611      	mov	r1, r2
 8002dc8:	4b3b      	ldr	r3, [pc, #236]	; (8002eb8 <UART_SetConfig+0x2d4>)
 8002dca:	fba3 2301 	umull	r2, r3, r3, r1
 8002dce:	095b      	lsrs	r3, r3, #5
 8002dd0:	2264      	movs	r2, #100	; 0x64
 8002dd2:	fb02 f303 	mul.w	r3, r2, r3
 8002dd6:	1acb      	subs	r3, r1, r3
 8002dd8:	00db      	lsls	r3, r3, #3
 8002dda:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002dde:	4b36      	ldr	r3, [pc, #216]	; (8002eb8 <UART_SetConfig+0x2d4>)
 8002de0:	fba3 2302 	umull	r2, r3, r3, r2
 8002de4:	095b      	lsrs	r3, r3, #5
 8002de6:	005b      	lsls	r3, r3, #1
 8002de8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002dec:	441c      	add	r4, r3
 8002dee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002df2:	2200      	movs	r2, #0
 8002df4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002df8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002dfc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002e00:	4642      	mov	r2, r8
 8002e02:	464b      	mov	r3, r9
 8002e04:	1891      	adds	r1, r2, r2
 8002e06:	63b9      	str	r1, [r7, #56]	; 0x38
 8002e08:	415b      	adcs	r3, r3
 8002e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e0c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002e10:	4641      	mov	r1, r8
 8002e12:	1851      	adds	r1, r2, r1
 8002e14:	6339      	str	r1, [r7, #48]	; 0x30
 8002e16:	4649      	mov	r1, r9
 8002e18:	414b      	adcs	r3, r1
 8002e1a:	637b      	str	r3, [r7, #52]	; 0x34
 8002e1c:	f04f 0200 	mov.w	r2, #0
 8002e20:	f04f 0300 	mov.w	r3, #0
 8002e24:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002e28:	4659      	mov	r1, fp
 8002e2a:	00cb      	lsls	r3, r1, #3
 8002e2c:	4651      	mov	r1, sl
 8002e2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e32:	4651      	mov	r1, sl
 8002e34:	00ca      	lsls	r2, r1, #3
 8002e36:	4610      	mov	r0, r2
 8002e38:	4619      	mov	r1, r3
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	4642      	mov	r2, r8
 8002e3e:	189b      	adds	r3, r3, r2
 8002e40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e44:	464b      	mov	r3, r9
 8002e46:	460a      	mov	r2, r1
 8002e48:	eb42 0303 	adc.w	r3, r2, r3
 8002e4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002e5c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002e60:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002e64:	460b      	mov	r3, r1
 8002e66:	18db      	adds	r3, r3, r3
 8002e68:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	eb42 0303 	adc.w	r3, r2, r3
 8002e70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e72:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e76:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002e7a:	f7fd f9d5 	bl	8000228 <__aeabi_uldivmod>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	460b      	mov	r3, r1
 8002e82:	4b0d      	ldr	r3, [pc, #52]	; (8002eb8 <UART_SetConfig+0x2d4>)
 8002e84:	fba3 1302 	umull	r1, r3, r3, r2
 8002e88:	095b      	lsrs	r3, r3, #5
 8002e8a:	2164      	movs	r1, #100	; 0x64
 8002e8c:	fb01 f303 	mul.w	r3, r1, r3
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	00db      	lsls	r3, r3, #3
 8002e94:	3332      	adds	r3, #50	; 0x32
 8002e96:	4a08      	ldr	r2, [pc, #32]	; (8002eb8 <UART_SetConfig+0x2d4>)
 8002e98:	fba2 2303 	umull	r2, r3, r2, r3
 8002e9c:	095b      	lsrs	r3, r3, #5
 8002e9e:	f003 0207 	and.w	r2, r3, #7
 8002ea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4422      	add	r2, r4
 8002eaa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002eac:	e105      	b.n	80030ba <UART_SetConfig+0x4d6>
 8002eae:	bf00      	nop
 8002eb0:	40011000 	.word	0x40011000
 8002eb4:	40011400 	.word	0x40011400
 8002eb8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ebc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002ec6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002eca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002ece:	4642      	mov	r2, r8
 8002ed0:	464b      	mov	r3, r9
 8002ed2:	1891      	adds	r1, r2, r2
 8002ed4:	6239      	str	r1, [r7, #32]
 8002ed6:	415b      	adcs	r3, r3
 8002ed8:	627b      	str	r3, [r7, #36]	; 0x24
 8002eda:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002ede:	4641      	mov	r1, r8
 8002ee0:	1854      	adds	r4, r2, r1
 8002ee2:	4649      	mov	r1, r9
 8002ee4:	eb43 0501 	adc.w	r5, r3, r1
 8002ee8:	f04f 0200 	mov.w	r2, #0
 8002eec:	f04f 0300 	mov.w	r3, #0
 8002ef0:	00eb      	lsls	r3, r5, #3
 8002ef2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ef6:	00e2      	lsls	r2, r4, #3
 8002ef8:	4614      	mov	r4, r2
 8002efa:	461d      	mov	r5, r3
 8002efc:	4643      	mov	r3, r8
 8002efe:	18e3      	adds	r3, r4, r3
 8002f00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002f04:	464b      	mov	r3, r9
 8002f06:	eb45 0303 	adc.w	r3, r5, r3
 8002f0a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002f0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002f1a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002f1e:	f04f 0200 	mov.w	r2, #0
 8002f22:	f04f 0300 	mov.w	r3, #0
 8002f26:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002f2a:	4629      	mov	r1, r5
 8002f2c:	008b      	lsls	r3, r1, #2
 8002f2e:	4621      	mov	r1, r4
 8002f30:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f34:	4621      	mov	r1, r4
 8002f36:	008a      	lsls	r2, r1, #2
 8002f38:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002f3c:	f7fd f974 	bl	8000228 <__aeabi_uldivmod>
 8002f40:	4602      	mov	r2, r0
 8002f42:	460b      	mov	r3, r1
 8002f44:	4b60      	ldr	r3, [pc, #384]	; (80030c8 <UART_SetConfig+0x4e4>)
 8002f46:	fba3 2302 	umull	r2, r3, r3, r2
 8002f4a:	095b      	lsrs	r3, r3, #5
 8002f4c:	011c      	lsls	r4, r3, #4
 8002f4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f52:	2200      	movs	r2, #0
 8002f54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002f58:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002f5c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002f60:	4642      	mov	r2, r8
 8002f62:	464b      	mov	r3, r9
 8002f64:	1891      	adds	r1, r2, r2
 8002f66:	61b9      	str	r1, [r7, #24]
 8002f68:	415b      	adcs	r3, r3
 8002f6a:	61fb      	str	r3, [r7, #28]
 8002f6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f70:	4641      	mov	r1, r8
 8002f72:	1851      	adds	r1, r2, r1
 8002f74:	6139      	str	r1, [r7, #16]
 8002f76:	4649      	mov	r1, r9
 8002f78:	414b      	adcs	r3, r1
 8002f7a:	617b      	str	r3, [r7, #20]
 8002f7c:	f04f 0200 	mov.w	r2, #0
 8002f80:	f04f 0300 	mov.w	r3, #0
 8002f84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f88:	4659      	mov	r1, fp
 8002f8a:	00cb      	lsls	r3, r1, #3
 8002f8c:	4651      	mov	r1, sl
 8002f8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f92:	4651      	mov	r1, sl
 8002f94:	00ca      	lsls	r2, r1, #3
 8002f96:	4610      	mov	r0, r2
 8002f98:	4619      	mov	r1, r3
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	4642      	mov	r2, r8
 8002f9e:	189b      	adds	r3, r3, r2
 8002fa0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002fa4:	464b      	mov	r3, r9
 8002fa6:	460a      	mov	r2, r1
 8002fa8:	eb42 0303 	adc.w	r3, r2, r3
 8002fac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	67bb      	str	r3, [r7, #120]	; 0x78
 8002fba:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002fbc:	f04f 0200 	mov.w	r2, #0
 8002fc0:	f04f 0300 	mov.w	r3, #0
 8002fc4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002fc8:	4649      	mov	r1, r9
 8002fca:	008b      	lsls	r3, r1, #2
 8002fcc:	4641      	mov	r1, r8
 8002fce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002fd2:	4641      	mov	r1, r8
 8002fd4:	008a      	lsls	r2, r1, #2
 8002fd6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002fda:	f7fd f925 	bl	8000228 <__aeabi_uldivmod>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	4b39      	ldr	r3, [pc, #228]	; (80030c8 <UART_SetConfig+0x4e4>)
 8002fe4:	fba3 1302 	umull	r1, r3, r3, r2
 8002fe8:	095b      	lsrs	r3, r3, #5
 8002fea:	2164      	movs	r1, #100	; 0x64
 8002fec:	fb01 f303 	mul.w	r3, r1, r3
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	011b      	lsls	r3, r3, #4
 8002ff4:	3332      	adds	r3, #50	; 0x32
 8002ff6:	4a34      	ldr	r2, [pc, #208]	; (80030c8 <UART_SetConfig+0x4e4>)
 8002ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ffc:	095b      	lsrs	r3, r3, #5
 8002ffe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003002:	441c      	add	r4, r3
 8003004:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003008:	2200      	movs	r2, #0
 800300a:	673b      	str	r3, [r7, #112]	; 0x70
 800300c:	677a      	str	r2, [r7, #116]	; 0x74
 800300e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003012:	4642      	mov	r2, r8
 8003014:	464b      	mov	r3, r9
 8003016:	1891      	adds	r1, r2, r2
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	415b      	adcs	r3, r3
 800301c:	60fb      	str	r3, [r7, #12]
 800301e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003022:	4641      	mov	r1, r8
 8003024:	1851      	adds	r1, r2, r1
 8003026:	6039      	str	r1, [r7, #0]
 8003028:	4649      	mov	r1, r9
 800302a:	414b      	adcs	r3, r1
 800302c:	607b      	str	r3, [r7, #4]
 800302e:	f04f 0200 	mov.w	r2, #0
 8003032:	f04f 0300 	mov.w	r3, #0
 8003036:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800303a:	4659      	mov	r1, fp
 800303c:	00cb      	lsls	r3, r1, #3
 800303e:	4651      	mov	r1, sl
 8003040:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003044:	4651      	mov	r1, sl
 8003046:	00ca      	lsls	r2, r1, #3
 8003048:	4610      	mov	r0, r2
 800304a:	4619      	mov	r1, r3
 800304c:	4603      	mov	r3, r0
 800304e:	4642      	mov	r2, r8
 8003050:	189b      	adds	r3, r3, r2
 8003052:	66bb      	str	r3, [r7, #104]	; 0x68
 8003054:	464b      	mov	r3, r9
 8003056:	460a      	mov	r2, r1
 8003058:	eb42 0303 	adc.w	r3, r2, r3
 800305c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800305e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	663b      	str	r3, [r7, #96]	; 0x60
 8003068:	667a      	str	r2, [r7, #100]	; 0x64
 800306a:	f04f 0200 	mov.w	r2, #0
 800306e:	f04f 0300 	mov.w	r3, #0
 8003072:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003076:	4649      	mov	r1, r9
 8003078:	008b      	lsls	r3, r1, #2
 800307a:	4641      	mov	r1, r8
 800307c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003080:	4641      	mov	r1, r8
 8003082:	008a      	lsls	r2, r1, #2
 8003084:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003088:	f7fd f8ce 	bl	8000228 <__aeabi_uldivmod>
 800308c:	4602      	mov	r2, r0
 800308e:	460b      	mov	r3, r1
 8003090:	4b0d      	ldr	r3, [pc, #52]	; (80030c8 <UART_SetConfig+0x4e4>)
 8003092:	fba3 1302 	umull	r1, r3, r3, r2
 8003096:	095b      	lsrs	r3, r3, #5
 8003098:	2164      	movs	r1, #100	; 0x64
 800309a:	fb01 f303 	mul.w	r3, r1, r3
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	011b      	lsls	r3, r3, #4
 80030a2:	3332      	adds	r3, #50	; 0x32
 80030a4:	4a08      	ldr	r2, [pc, #32]	; (80030c8 <UART_SetConfig+0x4e4>)
 80030a6:	fba2 2303 	umull	r2, r3, r2, r3
 80030aa:	095b      	lsrs	r3, r3, #5
 80030ac:	f003 020f 	and.w	r2, r3, #15
 80030b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4422      	add	r2, r4
 80030b8:	609a      	str	r2, [r3, #8]
}
 80030ba:	bf00      	nop
 80030bc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80030c0:	46bd      	mov	sp, r7
 80030c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030c6:	bf00      	nop
 80030c8:	51eb851f 	.word	0x51eb851f

080030cc <__libc_init_array>:
 80030cc:	b570      	push	{r4, r5, r6, lr}
 80030ce:	4d0d      	ldr	r5, [pc, #52]	; (8003104 <__libc_init_array+0x38>)
 80030d0:	4c0d      	ldr	r4, [pc, #52]	; (8003108 <__libc_init_array+0x3c>)
 80030d2:	1b64      	subs	r4, r4, r5
 80030d4:	10a4      	asrs	r4, r4, #2
 80030d6:	2600      	movs	r6, #0
 80030d8:	42a6      	cmp	r6, r4
 80030da:	d109      	bne.n	80030f0 <__libc_init_array+0x24>
 80030dc:	4d0b      	ldr	r5, [pc, #44]	; (800310c <__libc_init_array+0x40>)
 80030de:	4c0c      	ldr	r4, [pc, #48]	; (8003110 <__libc_init_array+0x44>)
 80030e0:	f000 f842 	bl	8003168 <_init>
 80030e4:	1b64      	subs	r4, r4, r5
 80030e6:	10a4      	asrs	r4, r4, #2
 80030e8:	2600      	movs	r6, #0
 80030ea:	42a6      	cmp	r6, r4
 80030ec:	d105      	bne.n	80030fa <__libc_init_array+0x2e>
 80030ee:	bd70      	pop	{r4, r5, r6, pc}
 80030f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80030f4:	4798      	blx	r3
 80030f6:	3601      	adds	r6, #1
 80030f8:	e7ee      	b.n	80030d8 <__libc_init_array+0xc>
 80030fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80030fe:	4798      	blx	r3
 8003100:	3601      	adds	r6, #1
 8003102:	e7f2      	b.n	80030ea <__libc_init_array+0x1e>
 8003104:	080031bc 	.word	0x080031bc
 8003108:	080031bc 	.word	0x080031bc
 800310c:	080031bc 	.word	0x080031bc
 8003110:	080031c0 	.word	0x080031c0

08003114 <memcpy>:
 8003114:	440a      	add	r2, r1
 8003116:	4291      	cmp	r1, r2
 8003118:	f100 33ff 	add.w	r3, r0, #4294967295
 800311c:	d100      	bne.n	8003120 <memcpy+0xc>
 800311e:	4770      	bx	lr
 8003120:	b510      	push	{r4, lr}
 8003122:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003126:	f803 4f01 	strb.w	r4, [r3, #1]!
 800312a:	4291      	cmp	r1, r2
 800312c:	d1f9      	bne.n	8003122 <memcpy+0xe>
 800312e:	bd10      	pop	{r4, pc}

08003130 <memset>:
 8003130:	4402      	add	r2, r0
 8003132:	4603      	mov	r3, r0
 8003134:	4293      	cmp	r3, r2
 8003136:	d100      	bne.n	800313a <memset+0xa>
 8003138:	4770      	bx	lr
 800313a:	f803 1b01 	strb.w	r1, [r3], #1
 800313e:	e7f9      	b.n	8003134 <memset+0x4>

08003140 <strncpy>:
 8003140:	b510      	push	{r4, lr}
 8003142:	3901      	subs	r1, #1
 8003144:	4603      	mov	r3, r0
 8003146:	b132      	cbz	r2, 8003156 <strncpy+0x16>
 8003148:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800314c:	f803 4b01 	strb.w	r4, [r3], #1
 8003150:	3a01      	subs	r2, #1
 8003152:	2c00      	cmp	r4, #0
 8003154:	d1f7      	bne.n	8003146 <strncpy+0x6>
 8003156:	441a      	add	r2, r3
 8003158:	2100      	movs	r1, #0
 800315a:	4293      	cmp	r3, r2
 800315c:	d100      	bne.n	8003160 <strncpy+0x20>
 800315e:	bd10      	pop	{r4, pc}
 8003160:	f803 1b01 	strb.w	r1, [r3], #1
 8003164:	e7f9      	b.n	800315a <strncpy+0x1a>
	...

08003168 <_init>:
 8003168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800316a:	bf00      	nop
 800316c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800316e:	bc08      	pop	{r3}
 8003170:	469e      	mov	lr, r3
 8003172:	4770      	bx	lr

08003174 <_fini>:
 8003174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003176:	bf00      	nop
 8003178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800317a:	bc08      	pop	{r3}
 800317c:	469e      	mov	lr, r3
 800317e:	4770      	bx	lr
